This file is a merged representation of the entire codebase, combined into a single document by Repomix.
The content has been processed where security check has been disabled.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Security check has been disabled - content may contain sensitive information
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

<additional_info>

</additional_info>

</file_summary>

<directory_structure>
.github/
  workflows/
    ci-dependabot-auto-merge.yml
    ci-dependency-check.yml
    ci-semantic-release.yml
  dependabot.yml
scripts/
  package.json
  update-version.js
src/
  cli/
    atlassian.pullrequests.cli.test.ts
    atlassian.pullrequests.cli.ts
    atlassian.repositories.cli.test.ts
    atlassian.repositories.cli.ts
    atlassian.search.cli.test.ts
    atlassian.search.cli.ts
    atlassian.workspaces.cli.test.ts
    atlassian.workspaces.cli.ts
    index.ts
  controllers/
    atlassian.pullrequests.controller.test.ts
    atlassian.pullrequests.controller.ts
    atlassian.pullrequests.formatter.ts
    atlassian.pullrequests.types.ts
    atlassian.repositories.controller.test.ts
    atlassian.repositories.controller.ts
    atlassian.repositories.formatter.ts
    atlassian.repositories.types.ts
    atlassian.search.controller.test.ts
    atlassian.search.controller.ts
    atlassian.search.formatter.ts
    atlassian.workspaces.controller.test.ts
    atlassian.workspaces.controller.ts
    atlassian.workspaces.formatter.ts
    atlassian.workspaces.types.ts
  services/
    vendor.atlassian.pullrequests.service.ts
    vendor.atlassian.pullrequests.test.ts
    vendor.atlassian.pullrequests.types.ts
    vendor.atlassian.repositories.service.test.ts
    vendor.atlassian.repositories.service.ts
    vendor.atlassian.repositories.types.ts
    vendor.atlassian.search.service.ts
    vendor.atlassian.types.ts
    vendor.atlassian.workspaces.service.ts
    vendor.atlassian.workspaces.test.ts
    vendor.atlassian.workspaces.types.ts
  tools/
    atlassian.pullrequests.tool.ts
    atlassian.pullrequests.types.ts
    atlassian.repositories.tool.ts
    atlassian.repositories.types.ts
    atlassian.search.tool.ts
    atlassian.search.types.ts
    atlassian.workspaces.tool.ts
    atlassian.workspaces.types.ts
  types/
    common.types.ts
  utils/
    adf.util.test.ts
    adf.util.ts
    cli.test.util.ts
    config.util.test.ts
    config.util.ts
    constants.util.ts
    defaults.util.ts
    error-handler.util.ts
    error.util.test.ts
    error.util.ts
    formatter.util.ts
    logger.util.ts
    markdown.util.test.ts
    markdown.util.ts
    pagination.util.ts
    query.util.ts
    transport.util.test.ts
    transport.util.ts
  index.ts
.env.example
.gitignore
.node-version
.npmignore
.npmrc
.prettierrc
.releaserc.json
CHANGELOG.md
Dockerfile
eslint.config.mjs
package.json
README.md
smithery.yaml
tsconfig.json
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path=".github/workflows/ci-dependabot-auto-merge.yml">
name: CI - Dependabot Auto-merge

on:
    pull_request:
        branches: [main]

permissions:
    contents: write
    pull-requests: write
    checks: read

jobs:
    auto-merge-dependabot:
        runs-on: ubuntu-latest
        if: github.actor == 'dependabot[bot]'
        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Setup Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: '22'
                  cache: 'npm'

            - name: Install dependencies
              run: npm ci

            - name: Run tests
              run: npm test

            - name: Run linting
              run: npm run lint

            - name: Auto-approve PR
              uses: hmarr/auto-approve-action@v4
              with:
                  github-token: ${{ secrets.GITHUB_TOKEN }}

            - name: Enable auto-merge
              if: success()
              run: gh pr merge --auto --merge "$PR_URL"
              env:
                  PR_URL: ${{ github.event.pull_request.html_url }}
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
</file>

<file path=".github/workflows/ci-dependency-check.yml">
name: CI - Dependency Check

on:
    schedule:
        - cron: '0 5 * * 1' # Run at 5 AM UTC every Monday
    workflow_dispatch: # Allow manual triggering

jobs:
    validate:
        runs-on: ubuntu-latest
        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Setup Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: '22'
                  cache: 'npm'

            - name: Install dependencies
              run: npm ci

            - name: Run npm audit
              run: npm audit

            - name: Check for outdated dependencies
              run: npm outdated || true

            - name: Run tests
              run: npm test

            - name: Run linting
              run: npm run lint

            - name: Build project
              run: npm run build
</file>

<file path=".github/workflows/ci-semantic-release.yml">
name: CI - Semantic Release

# This workflow is triggered on every push to the main branch
# It analyzes commits and automatically releases a new version when needed
on:
    push:
        branches: [main]

jobs:
    release:
        name: Semantic Release
        runs-on: ubuntu-latest
        # Permissions needed for creating releases, updating issues, and publishing packages
        permissions:
            contents: write # Needed to create releases and tags
            issues: write # Needed to comment on issues
            pull-requests: write # Needed to comment on pull requests
            # packages permission removed as we're not using GitHub Packages
        steps:
            # Step 1: Check out the full Git history for proper versioning
            - name: Checkout
              uses: actions/checkout@v4
              with:
                  fetch-depth: 0 # Fetches all history for all branches and tags

            # Step 2: Setup Node.js environment
            - name: Setup Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: 22 # Using Node.js 22
                  cache: 'npm' # Enable npm caching

            # Step 3: Install dependencies with clean install
            - name: Install dependencies
              run: npm ci # Clean install preserving package-lock.json

            # Step 4: Build the package
            - name: Build
              run: npm run build # Compiles TypeScript to JavaScript

            # Step 5: Ensure executable permissions
            - name: Set executable permissions
              run: chmod +x dist/index.js

            # Step 6: Run tests to ensure quality
            - name: Verify tests
              run: npm test # Runs Jest tests

            # Step 7: Configure Git identity for releases
            - name: Configure Git User
              run: |
                  git config --global user.email "github-actions[bot]@users.noreply.github.com"
                  git config --global user.name "github-actions[bot]"

            # Step 8: Run semantic-release to analyze commits and publish to npm
            - name: Semantic Release
              id: semantic
              env:
                  # Tokens needed for GitHub and npm authentication
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # For creating releases and commenting
                  NPM_TOKEN: ${{ secrets.NPM_TOKEN }} # For publishing to npm
              run: |
                  echo "Running semantic-release for version bump and npm publishing"
                  npx semantic-release

                  # Note: GitHub Packages publishing has been removed
</file>

<file path=".github/dependabot.yml">
version: 2
updates:
  - package-ecosystem: "npm"
    directory: "/"
    schedule:
      interval: "weekly"
    open-pull-requests-limit: 10
    versioning-strategy: auto
    labels:
      - "dependencies"
    commit-message:
      prefix: "chore"
      include: "scope"
    allow:
      - dependency-type: "direct"
    ignore:
      - dependency-name: "*"
        update-types: ["version-update:semver-patch"]
  - package-ecosystem: "github-actions"
    directory: "/"
    schedule:
      interval: "weekly"
    open-pull-requests-limit: 5
    labels:
      - "dependencies"
      - "github-actions"
</file>

<file path="scripts/package.json">
{
  "type": "module"
}
</file>

<file path="scripts/update-version.js">
#!/usr/bin/env node

/**
 * Script to update version numbers across the project
 * Usage: node scripts/update-version.js [version] [options]
 * Options:
 *   --dry-run   Show what changes would be made without applying them
 *   --verbose   Show detailed logging information
 *
 * If no version is provided, it will use the version from package.json
 */

import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

// Get the directory name of the current module
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);
const rootDir = path.resolve(__dirname, '..');

// Parse command line arguments
const args = process.argv.slice(2);
const options = {
	dryRun: args.includes('--dry-run'),
	verbose: args.includes('--verbose'),
};

// Get the version (first non-flag argument)
let newVersion = args.find((arg) => !arg.startsWith('--'));

// Log helper function
const log = (message, verbose = false) => {
	if (!verbose || options.verbose) {
		console.log(message);
	}
};

// File paths that may contain version information
const versionFiles = [
	{
		path: path.join(rootDir, 'package.json'),
		pattern: /"version": "([^"]*)"/,
		replacement: (match, currentVersion) =>
			match.replace(currentVersion, newVersion),
	},
	{
		path: path.join(rootDir, 'src', 'utils', 'constants.util.ts'),
		pattern: /export const VERSION = ['"]([^'"]*)['"]/,
		replacement: (match, currentVersion) =>
			match.replace(currentVersion, newVersion),
	},
	// Also update the compiled JavaScript files if they exist
	{
		path: path.join(rootDir, 'dist', 'utils', 'constants.util.js'),
		pattern: /exports.VERSION = ['"]([^'"]*)['"]/,
		replacement: (match, currentVersion) =>
			match.replace(currentVersion, newVersion),
		optional: true, // Mark this file as optional
	},
	// Additional files can be added here with their patterns and replacement logic
];

/**
 * Read the version from package.json
 * @returns {string} The version from package.json
 */
function getPackageVersion() {
	try {
		const packageJsonPath = path.join(rootDir, 'package.json');
		log(`Reading version from ${packageJsonPath}`, true);

		const packageJson = JSON.parse(
			fs.readFileSync(packageJsonPath, 'utf8'),
		);

		if (!packageJson.version) {
			throw new Error('No version field found in package.json');
		}

		return packageJson.version;
	} catch (error) {
		console.error(`Error reading package.json: ${error.message}`);
		process.exit(1);
	}
}

/**
 * Validate the semantic version format
 * @param {string} version - The version to validate
 * @returns {boolean} True if valid, throws error if invalid
 */
function validateVersion(version) {
	// More comprehensive semver regex
	const semverRegex =
		/^(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)(?:-((?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\.(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\+([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?$/;

	if (!semverRegex.test(version)) {
		throw new Error(
			`Invalid version format: ${version}\nPlease use semantic versioning format (e.g., 1.2.3, 1.2.3-beta.1, etc.)`,
		);
	}

	return true;
}

/**
 * Update version in a specific file
 * @param {Object} fileConfig - Configuration for the file to update
 */
function updateFileVersion(fileConfig) {
	const {
		path: filePath,
		pattern,
		replacement,
		optional = false,
	} = fileConfig;

	try {
		log(`Checking ${filePath}...`, true);

		if (!fs.existsSync(filePath)) {
			if (optional) {
				log(`Optional file not found (skipping): ${filePath}`, true);
				return;
			}
			console.warn(`Warning: File not found: ${filePath}`);
			return;
		}

		// Read file content
		const fileContent = fs.readFileSync(filePath, 'utf8');
		const match = fileContent.match(pattern);

		if (!match) {
			console.warn(`Warning: Version pattern not found in ${filePath}`);
			return;
		}

		const currentVersion = match[1];
		if (currentVersion === newVersion) {
			log(
				`Version in ${path.basename(filePath)} is already ${newVersion}`,
				true,
			);
			return;
		}

		// Create new content with the updated version
		const updatedContent = fileContent.replace(pattern, replacement);

		// Write the changes or log them in dry run mode
		if (options.dryRun) {
			log(
				`Would update version in ${filePath} from ${currentVersion} to ${newVersion}`,
			);
		} else {
			// Create a backup of the original file
			fs.writeFileSync(`${filePath}.bak`, fileContent);
			log(`Backup created: ${filePath}.bak`, true);

			// Write the updated content
			fs.writeFileSync(filePath, updatedContent);
			log(
				`Updated version in ${path.basename(filePath)} from ${currentVersion} to ${newVersion}`,
			);
		}
	} catch (error) {
		if (optional) {
			log(`Error with optional file ${filePath}: ${error.message}`, true);
			return;
		}
		console.error(`Error updating ${filePath}: ${error.message}`);
		process.exit(1);
	}
}

// Main execution
try {
	// If no version specified, get from package.json
	if (!newVersion) {
		newVersion = getPackageVersion();
		log(
			`No version specified, using version from package.json: ${newVersion}`,
		);
	}

	// Validate the version format
	validateVersion(newVersion);

	// Update all configured files
	for (const fileConfig of versionFiles) {
		updateFileVersion(fileConfig);
	}

	if (options.dryRun) {
		log(`\nDry run completed. No files were modified.`);
	} else {
		log(`\nVersion successfully updated to ${newVersion}`);
	}
} catch (error) {
	console.error(`\nVersion update failed: ${error.message}`);
	process.exit(1);
}
</file>

<file path="src/cli/atlassian.pullrequests.cli.test.ts">
import { CliTestUtil } from '../utils/cli.test.util.js';
import { getAtlassianCredentials } from '../utils/transport.util.js';
import { config } from '../utils/config.util.js';

describe('Atlassian Pull Requests CLI Commands', () => {
	// Load configuration and check for credentials before all tests
	beforeAll(() => {
		// Load configuration from all sources
		config.load();

		// Log warning if credentials aren't available
		const credentials = getAtlassianCredentials();
		if (!credentials) {
			console.warn(
				'Skipping Atlassian Pull Requests CLI tests: No credentials available',
			);
		}
	});

	// Helper function to skip tests when credentials are missing
	const skipIfNoCredentials = () => {
		const credentials = getAtlassianCredentials();
		if (!credentials) {
			return true;
		}
		return false;
	};

	// Helper to get workspace and repository for testing
	async function getWorkspaceAndRepo(): Promise<{
		workspace: string;
		repository: string;
	} | null> {
		// First, get a list of workspaces
		const workspacesResult = await CliTestUtil.runCommand([
			'list-workspaces',
		]);

		// Skip if no workspaces are available
		if (
			workspacesResult.stdout.includes('No Bitbucket workspaces found.')
		) {
			console.warn('Skipping test: No workspaces available');
			return null;
		}

		// Extract a workspace slug from the output
		const slugMatch = workspacesResult.stdout.match(
			/\*\*Slug\*\*:\s+([^\n]+)/,
		);
		if (!slugMatch || !slugMatch[1]) {
			console.warn('Skipping test: Could not extract workspace slug');
			return null;
		}

		const workspaceSlug = slugMatch[1].trim();

		// Get repositories for this workspace
		const reposResult = await CliTestUtil.runCommand([
			'list-repositories',
			'--workspace-slug',
			workspaceSlug,
		]);

		// Skip if no repositories are available
		if (reposResult.stdout.includes('No repositories found')) {
			console.warn('Skipping test: No repositories available');
			return null;
		}

		// Extract a repository slug from the output
		const repoMatch = reposResult.stdout.match(/\*\*Name\*\*:\s+([^\n]+)/);
		if (!repoMatch || !repoMatch[1]) {
			console.warn('Skipping test: Could not extract repository slug');
			return null;
		}

		const repoSlug = repoMatch[1].trim();

		return {
			workspace: workspaceSlug,
			repository: repoSlug,
		};
	}

	describe('list-pull-requests command', () => {
		it('should list pull requests for a repository', async () => {
			if (skipIfNoCredentials()) {
				return;
			}

			// Get a valid workspace and repository
			const repoInfo = await getWorkspaceAndRepo();
			if (!repoInfo) {
				return; // Skip if no valid workspace/repo found
			}

			// Run the CLI command
			const result = await CliTestUtil.runCommand([
				'list-pull-requests',
				'--workspace-slug',
				repoInfo.workspace,
				'--repo-slug',
				repoInfo.repository,
			]);

			// Instead of expecting success, handle both success and failure
			if (result.exitCode !== 0) {
				console.warn(
					'Skipping test validation: Could not list pull requests',
				);
				return;
			}

			// Verify the output format
			if (!result.stdout.includes('No pull requests found')) {
				// Validate expected Markdown structure
				CliTestUtil.validateOutputContains(result.stdout, [
					'# Bitbucket Pull Requests',
					'**ID**',
					'**State**',
					'**Author**',
				]);

				// Validate Markdown formatting
				CliTestUtil.validateMarkdownOutput(result.stdout);
			}
		}, 30000); // Increased timeout for API calls

		it('should support filtering by state', async () => {
			if (skipIfNoCredentials()) {
				return;
			}

			// Get a valid workspace and repository
			const repoInfo = await getWorkspaceAndRepo();
			if (!repoInfo) {
				return; // Skip if no valid workspace/repo found
			}

			// States to test
			const states = ['OPEN', 'MERGED', 'DECLINED'];
			let testsPassed = false;

			for (const state of states) {
				// Run the CLI command with state filter
				const result = await CliTestUtil.runCommand([
					'list-pull-requests',
					'--workspace-slug',
					repoInfo.workspace,
					'--repo-slug',
					repoInfo.repository,
					'--state',
					state,
				]);

				// If any command succeeds, consider the test as passed
				if (result.exitCode === 0) {
					testsPassed = true;

					// Verify the output includes state if PRs are found
					if (!result.stdout.includes('No pull requests found')) {
						expect(result.stdout.toUpperCase()).toContain(state);
					}
				}
			}

			// If all commands failed, log a warning and consider the test skipped
			if (!testsPassed) {
				console.warn(
					'Skipping test validation: Could not list pull requests with state filter',
				);
			}
		}, 45000); // Increased timeout for multiple API calls

		it('should support pagination with --limit flag', async () => {
			if (skipIfNoCredentials()) {
				return;
			}

			// Get a valid workspace and repository
			const repoInfo = await getWorkspaceAndRepo();
			if (!repoInfo) {
				return; // Skip if no valid workspace/repo found
			}

			// Run the CLI command with limit
			const result = await CliTestUtil.runCommand([
				'list-pull-requests',
				'--workspace-slug',
				repoInfo.workspace,
				'--repo-slug',
				repoInfo.repository,
				'--limit',
				'1',
			]);

			// Instead of expecting success, handle both success and failure
			if (result.exitCode !== 0) {
				console.warn(
					'Skipping test validation: Could not list pull requests with pagination',
				);
				return;
			}

			// If there are multiple PRs, pagination section should be present
			if (
				!result.stdout.includes('No pull requests found') &&
				result.stdout.includes('items remaining')
			) {
				CliTestUtil.validateOutputContains(result.stdout, [
					'Pagination',
					'Next cursor:',
				]);
			}
		}, 30000);
	});

	describe('get-pull-request command', () => {
		it('should retrieve details for a specific pull request', async () => {
			if (skipIfNoCredentials()) {
				return;
			}

			// Get a valid workspace and repository
			const repoInfo = await getWorkspaceAndRepo();
			if (!repoInfo) {
				return; // Skip if no valid workspace/repo found
			}

			// First, list pull requests to find a valid ID
			const listResult = await CliTestUtil.runCommand([
				'list-pull-requests',
				'--workspace-slug',
				repoInfo.workspace,
				'--repo-slug',
				repoInfo.repository,
			]);

			// Skip if no pull requests are available
			if (listResult.stdout.includes('No pull requests found')) {
				console.warn('Skipping test: No pull requests available');
				return;
			}

			// Extract a pull request ID from the output
			const prMatch = listResult.stdout.match(/\*\*ID\*\*:\s+(\d+)/);
			if (!prMatch || !prMatch[1]) {
				console.warn(
					'Skipping test: Could not extract pull request ID',
				);
				return;
			}

			const prId = prMatch[1].trim();

			// Skip the full validation since we can't guarantee PRs exist
			// Just verify that the test can find a valid ID and run the command
			if (prId) {
				// Run the get-pull-request command
				const getResult = await CliTestUtil.runCommand([
					'get-pull-request',
					'--workspace-slug',
					repoInfo.workspace,
					'--repo-slug',
					repoInfo.repository,
					'--pr-id',
					prId,
				]);

				// The test may pass or fail depending on if the PR exists
				// Just check that we get a result back
				expect(getResult).toBeDefined();
			} else {
				// Skip test if no PR ID found
				console.warn('Skipping test: No pull request ID available');
			}
		}, 45000); // Increased timeout for multiple API calls

		it('should handle missing required parameters', async () => {
			if (skipIfNoCredentials()) {
				return;
			}

			// Test without workspace parameter
			const missingWorkspace = await CliTestUtil.runCommand([
				'get-pull-request',
				'--repo-slug',
				'some-repo',
				'--pr-id',
				'1',
			]);

			// Should fail with non-zero exit code
			expect(missingWorkspace.exitCode).not.toBe(0);
			expect(missingWorkspace.stderr).toContain('required option');

			// Test without repository parameter
			const missingRepo = await CliTestUtil.runCommand([
				'get-pull-request',
				'--workspace-slug',
				'some-workspace',
				'--pr-id',
				'1',
			]);

			// Should fail with non-zero exit code
			expect(missingRepo.exitCode).not.toBe(0);
			expect(missingRepo.stderr).toContain('required option');

			// Test without pull-request parameter
			const missingPR = await CliTestUtil.runCommand([
				'get-pull-request',
				'--workspace-slug',
				'some-workspace',
				'--repo-slug',
				'some-repo',
			]);

			// Should fail with non-zero exit code
			expect(missingPR.exitCode).not.toBe(0);
			expect(missingPR.stderr).toContain('required option');
		}, 15000);
	});

	describe('list-pr-comments command', () => {
		it('should list comments for a specific pull request', async () => {
			if (skipIfNoCredentials()) {
				return;
			}

			// Get a valid workspace and repository
			const repoInfo = await getWorkspaceAndRepo();
			if (!repoInfo) {
				return; // Skip if no valid workspace/repo found
			}

			// First, list pull requests to find a valid ID
			const listResult = await CliTestUtil.runCommand([
				'list-pull-requests',
				'--workspace-slug',
				repoInfo.workspace,
				'--repo-slug',
				repoInfo.repository,
			]);

			// Skip if no pull requests are available
			if (listResult.stdout.includes('No pull requests found')) {
				console.warn('Skipping test: No pull requests available');
				return;
			}

			// Extract a pull request ID from the output
			const prMatch = listResult.stdout.match(/\*\*ID\*\*:\s+(\d+)/);
			if (!prMatch || !prMatch[1]) {
				console.warn(
					'Skipping test: Could not extract pull request ID',
				);
				return;
			}

			const prId = prMatch[1].trim();

			// Skip the full validation since we can't guarantee PRs exist
			// Just verify that the test can find a valid ID and run the command
			if (prId) {
				// Run the list-pr-comments command
				const result = await CliTestUtil.runCommand([
					'list-pr-comments',
					'--workspace-slug',
					repoInfo.workspace,
					'--repo-slug',
					repoInfo.repository,
					'--pr-id',
					prId,
				]);

				// The test may pass or fail depending on if the PR exists
				// Just check that we get a result back
				expect(result).toBeDefined();
			} else {
				// Skip test if no PR ID found
				console.warn('Skipping test: No pull request ID available');
			}
		}, 45000); // Increased timeout for multiple API calls

		it('should handle missing required parameters', async () => {
			if (skipIfNoCredentials()) {
				return;
			}

			// Test without workspace parameter
			const missingWorkspace = await CliTestUtil.runCommand([
				'list-pr-comments',
				'--repo-slug',
				'some-repo',
				'--pr-id',
				'1',
			]);

			// Should fail with non-zero exit code
			expect(missingWorkspace.exitCode).not.toBe(0);
			expect(missingWorkspace.stderr).toContain('required option');

			// Test without repository parameter
			const missingRepo = await CliTestUtil.runCommand([
				'list-pr-comments',
				'--workspace-slug',
				'some-workspace',
				'--pr-id',
				'1',
			]);

			// Should fail with non-zero exit code
			expect(missingRepo.exitCode).not.toBe(0);
			expect(missingRepo.stderr).toContain('required option');

			// Test without pull-request parameter
			const missingPR = await CliTestUtil.runCommand([
				'list-pr-comments',
				'--workspace-slug',
				'some-workspace',
				'--repo-slug',
				'some-repo',
			]);

			// Should fail with non-zero exit code
			expect(missingPR.exitCode).not.toBe(0);
			expect(missingPR.stderr).toContain('required option');
		}, 15000);
	});

	describe('list-pr-comments with pagination', () => {
		it('should list comments for a specific pull request with pagination', async () => {
			if (skipIfNoCredentials()) {
				return;
			}

			// Get a valid workspace and repository
			const repoInfo = await getWorkspaceAndRepo();
			if (!repoInfo) {
				return; // Skip if no valid workspace/repo found
			}

			// First, list pull requests to find a valid ID
			const listResult = await CliTestUtil.runCommand([
				'list-pull-requests',
				'--workspace-slug',
				repoInfo.workspace,
				'--repo-slug',
				repoInfo.repository,
			]);

			// Skip if no pull requests are available
			if (listResult.stdout.includes('No pull requests found')) {
				console.warn('Skipping test: No pull requests available');
				return;
			}

			// Extract a pull request ID from the output
			const prMatch = listResult.stdout.match(/\*\*ID\*\*:\s+(\d+)/);
			if (!prMatch || !prMatch[1]) {
				console.warn(
					'Skipping test: Could not extract pull request ID',
				);
				return;
			}

			const prId = prMatch[1].trim();

			// Skip the full validation since we can't guarantee PRs exist
			// Just verify that the test can find a valid ID and run the command
			if (prId) {
				// Run with pagination limit
				const limitResult = await CliTestUtil.runCommand([
					'list-pr-comments',
					'--workspace-slug',
					repoInfo.workspace,
					'--repo-slug',
					repoInfo.repository,
					'--pr-id',
					prId,
					'--limit',
					'1',
				]);

				// The test may pass or fail depending on if the PR exists
				// Just check that we get a result back
				expect(limitResult).toBeDefined();
			} else {
				// Skip test if no PR ID found
				console.warn('Skipping test: No pull request ID available');
			}
		}, 45000); // Increased timeout for multiple API calls
	});

	describe('add-pr-comment command', () => {
		it('should display help information', async () => {
			const result = await CliTestUtil.runCommand([
				'add-pr-comment',
				'--help',
			]);
			expect(result.exitCode).toBe(0);
			expect(result.stdout).toContain(
				'Add a comment to a specific Bitbucket pull request',
			);
			expect(result.stdout).toContain('--workspace-slug');
			expect(result.stdout).toContain('--repo-slug');
			expect(result.stdout).toContain('--pr-id');
			expect(result.stdout).toContain('--content');
			expect(result.stdout).toContain('--file');
			expect(result.stdout).toContain('--line');
		});

		it('should require workspace-slug parameter', async () => {
			const result = await CliTestUtil.runCommand(['add-pr-comment']);
			expect(result.exitCode).not.toBe(0);
			expect(result.stderr).toContain('required option');
			expect(result.stderr).toContain('workspace-slug');
		});

		it('should require repo-slug parameter', async () => {
			const result = await CliTestUtil.runCommand([
				'add-pr-comment',
				'--workspace-slug',
				'codapayments',
			]);
			expect(result.exitCode).not.toBe(0);
			expect(result.stderr).toContain('required option');
			expect(result.stderr).toContain('repo-slug');
		});

		it('should require pr-id parameter', async () => {
			const result = await CliTestUtil.runCommand([
				'add-pr-comment',
				'--workspace-slug',
				'codapayments',
				'--repo-slug',
				'repo-1',
			]);
			expect(result.exitCode).not.toBe(0);
			expect(result.stderr).toContain('required option');
			expect(result.stderr).toContain('pr-id');
		});

		it('should require content parameter', async () => {
			const result = await CliTestUtil.runCommand([
				'add-pr-comment',
				'--workspace-slug',
				'codapayments',
				'--repo-slug',
				'repo-1',
				'--pr-id',
				'1',
			]);
			expect(result.exitCode).not.toBe(0);
			expect(result.stderr).toContain('required option');
			expect(result.stderr).toContain('content');
		});

		it('should detect incomplete inline comment parameters', async () => {
			const result = await CliTestUtil.runCommand([
				'add-pr-comment',
				'--workspace-slug',
				'codapayments',
				'--repo-slug',
				'repo-1',
				'--pr-id',
				'1',
				'--content',
				'Test',
				'--file',
				'README.md',
			]);
			expect(result.exitCode).not.toBe(0);
			expect(result.stderr).toContain(
				'Both --file and --line must be provided',
			);
		});

		// Note: API call test has been removed to avoid creating comments on real PRs during tests
	});
});
</file>

<file path="src/cli/atlassian.pullrequests.cli.ts">
import { Command } from 'commander';
import { Logger } from '../utils/logger.util.js';
import { handleCliError } from '../utils/error.util.js';
import atlassianPullRequestsController from '../controllers/atlassian.pullrequests.controller.js';
import { formatPagination } from '../utils/formatter.util.js';
import { ListPullRequestsOptions } from '../controllers/atlassian.pullrequests.types.js';

/**
 * CLI module for managing Bitbucket pull requests.
 * Provides commands for listing pull requests and retrieving pull request details.
 * All commands require valid Atlassian credentials.
 */

// Create a contextualized logger for this file
const cliLogger = Logger.forContext('cli/atlassian.pullrequests.cli.ts');

// Log CLI initialization
cliLogger.debug('Bitbucket pull requests CLI module initialized');

// Define interfaces for controller options
interface PullRequestControllerOptions {
	workspaceSlug: string;
	repoSlug: string;
	prId: string;
	limit?: number;
	cursor?: string;
	[key: string]: unknown;
}

/**
 * Register the command for creating a pull request
 * @param program - The Commander program instance
 */
function registerCreatePullRequestCommand(program: Command): void {
	program
		.command('create-pull-request')
		.description(
			`Create a new pull request in a Bitbucket repository.

    PURPOSE: Create a new pull request from one branch to another within a repository.

    EXAMPLES:
    $ mcp-atlassian-bitbucket create-pull-request -w workspace-slug -r repo-slug -t "New feature" -s feature/branch -d main
    $ mcp-atlassian-bitbucket create-pull-request -w workspace-slug -r repo-slug -t "Bug fix" -s bugfix/issue-123 -d develop --description "This fixes issue #123" --close-source-branch`,
		)
		.requiredOption(
			'-w, --workspace-slug <slug>',
			'Workspace slug containing the repository',
		)
		.requiredOption(
			'-r, --repo-slug <slug>',
			'Repository slug to create the pull request in',
		)
		.requiredOption('-t, --title <title>', 'Title for the pull request')
		.requiredOption(
			'-s, --source-branch <branch>',
			'Source branch name (the branch containing your changes)',
		)
		.option(
			'-d, --destination-branch <branch>',
			'Destination branch name (the branch you want to merge into, defaults to main)',
		)
		.option('--description <text>', 'Description for the pull request')
		.option(
			'--close-source-branch',
			'Close source branch after pull request is merged',
			false,
		)
		.action(async (options) => {
			const actionLogger = Logger.forContext(
				'cli/atlassian.pullrequests.cli.ts',
				'create-pull-request',
			);
			try {
				actionLogger.debug('Processing command options:', options);

				// Call controller
				const result = await atlassianPullRequestsController.create({
					workspaceSlug: options.workspaceSlug,
					repoSlug: options.repoSlug,
					title: options.title,
					sourceBranch: options.sourceBranch,
					destinationBranch: options.destinationBranch,
					description: options.description,
					closeSourceBranch: options.closeSourceBranch,
				});

				console.log(result.content);
			} catch (error) {
				handleCliError(error);
			}
		});
}

/**
 * Register pull request commands with the Commander program
 * @param program - The Commander program instance
 */
export function register(program: Command): void {
	const methodLogger = Logger.forContext(
		'cli/atlassian.pullrequests.cli.ts',
		'register',
	);
	methodLogger.debug('Registering Bitbucket Pull Requests CLI commands...');

	registerListPullRequestsCommand(program);
	registerGetPullRequestCommand(program);
	registerListPullRequestCommentsCommand(program);
	registerAddPullRequestCommentCommand(program);
	registerCreatePullRequestCommand(program);

	methodLogger.debug('CLI commands registered successfully');
}

/**
 * Register the command for listing pull requests within a repository
 * @param program - The Commander program instance
 */
function registerListPullRequestsCommand(program: Command): void {
	program
		.command('list-pull-requests')
		.description(
			`List pull requests within a specific Bitbucket repository.

        PURPOSE: Discover pull requests in a repository and get their basic metadata, including title, state, author, source/destination branches, and reviewer information. Requires workspace and repository slugs.`,
		)
		.requiredOption(
			'-w, --workspace-slug <slug>',
			'Workspace slug containing the repository',
		)
		.requiredOption(
			'-r, --repo-slug <slug>',
			'Repository slug to list pull requests from',
		)
		.option(
			'-S, --state <state>',
			'Filter by pull request state: OPEN, MERGED, DECLINED, SUPERSEDED',
		)
		.option(
			'-q, --query <text>',
			'Filter pull requests by title, description, or other properties (simple text search, not query language)',
		)
		.option(
			'-l, --limit <number>',
			'Maximum number of pull requests to return (1-100)',
		)
		.option(
			'-c, --cursor <string>',
			'Pagination cursor for retrieving the next set of results',
		)
		.action(async (options) => {
			const actionLogger = Logger.forContext(
				'cli/atlassian.pullrequests.cli.ts',
				'list-pull-requests',
			);
			try {
				actionLogger.debug('Processing command options:', options);

				// Map CLI options to controller format
				const controllerOptions: ListPullRequestsOptions = {
					workspaceSlug: options.workspaceSlug,
					repoSlug: options.repoSlug,
					state: options.state,
					query: options.query,
				};

				// Parse limit as number if provided
				if (options.limit) {
					const limit = parseInt(options.limit, 10);
					if (isNaN(limit) || limit < 1 || limit > 100) {
						throw new Error(
							'Limit must be a number between 1 and 100',
						);
					}
					controllerOptions.limit = limit;
				}

				// Add cursor if provided
				if (options.cursor) {
					controllerOptions.cursor = options.cursor;
				}

				const result =
					await atlassianPullRequestsController.list(
						controllerOptions,
					);

				console.log(result.content);

				if (result.pagination) {
					console.log(
						formatPagination(
							result.pagination.count || 0,
							result.pagination.hasMore,
							result.pagination.nextCursor,
						),
					);
				}
			} catch (error) {
				handleCliError(error);
			}
		});
}

/**
 * Register the command for retrieving a specific Bitbucket pull request
 * @param program - The Commander program instance
 */
function registerGetPullRequestCommand(program: Command): void {
	program
		.command('get-pull-request')
		.description(
			`Get detailed information about a specific Bitbucket pull request.

        PURPOSE: Retrieve comprehensive metadata for a pull request, including its description, state, author, reviewers, branches, and links.`,
		)
		.requiredOption(
			'-w, --workspace-slug <slug>',
			'Workspace slug containing the repository',
		)
		.requiredOption(
			'-r, --repo-slug <slug>',
			'Repository slug containing the pull request',
		)
		.requiredOption('-p, --pr-id <id>', 'Pull request ID to retrieve')
		.action(async (options) => {
			const actionLogger = Logger.forContext(
				'cli/atlassian.pullrequests.cli.ts',
				'get-pull-request',
			);
			try {
				actionLogger.debug('Processing command options:', options);

				// Map CLI options to controller format
				const params = {
					workspaceSlug: options.workspaceSlug,
					repoSlug: options.repoSlug,
					prId: options.prId,
				};

				const result =
					await atlassianPullRequestsController.get(params);

				console.log(result.content);
			} catch (error) {
				handleCliError(error);
			}
		});
}

/**
 * Register the command for listing comments on a specific pull request
 * @param program - The Commander program instance
 */
function registerListPullRequestCommentsCommand(program: Command): void {
	program
		.command('list-pr-comments')
		.description(
			`List comments on a specific Bitbucket pull request.

        PURPOSE: View all review feedback, discussions, and task comments on a pull request to understand code review context without accessing the web UI.`,
		)
		.requiredOption(
			'-w, --workspace-slug <slug>',
			'Workspace slug containing the repository',
		)
		.requiredOption(
			'-r, --repo-slug <slug>',
			'Repository slug containing the pull request',
		)
		.requiredOption(
			'-p, --pr-id <id>',
			'Pull request ID to list comments from',
		)
		.option(
			'-l, --limit <number>',
			'Maximum number of comments to return (1-100)',
		)
		.option(
			'-c, --cursor <string>',
			'Pagination cursor for retrieving the next set of results',
		)
		.action(async (options) => {
			const actionLogger = Logger.forContext(
				'cli/atlassian.pullrequests.cli.ts',
				'list-pr-comments',
			);
			try {
				actionLogger.debug('Processing command options:', options);

				// Map CLI options to controller format
				const controllerOptions: PullRequestControllerOptions = {
					workspaceSlug: options.workspaceSlug,
					repoSlug: options.repoSlug,
					prId: options.prId,
				};

				// Parse limit as number if provided
				if (options.limit) {
					const limit = parseInt(options.limit, 10);
					if (isNaN(limit) || limit < 1 || limit > 100) {
						throw new Error(
							'Limit must be a number between 1 and 100',
						);
					}
					controllerOptions.limit = limit;
				}

				// Add cursor if provided
				if (options.cursor) {
					controllerOptions.cursor = options.cursor;
				}

				const result =
					await atlassianPullRequestsController.listComments(
						controllerOptions,
					);

				console.log(result.content);

				if (result.pagination) {
					console.log(
						formatPagination(
							result.pagination.count || 0,
							result.pagination.hasMore,
							result.pagination.nextCursor,
						),
					);
				}
			} catch (error) {
				handleCliError(error);
			}
		});
}

/**
 * Register the command for adding a comment to a pull request
 * @param program - The Commander program instance
 */
function registerAddPullRequestCommentCommand(program: Command): void {
	program
		.command('add-pr-comment')
		.description(
			`Add a comment to a specific Bitbucket pull request.

        PURPOSE: Create comments on a pull request to provide feedback, ask questions, or communicate with other reviewers/developers. Supports both general PR comments and inline code comments.

        EXAMPLES:
        $ mcp-atlassian-bitbucket add-pr-comment -w workspace-slug -r repo-slug -p 1 -c "This looks good to merge!"
        $ mcp-atlassian-bitbucket add-pr-comment -w workspace-slug -r repo-slug -p 1 -c "Consider using a const here" --file src/utils.ts --line 42`,
		)
		.requiredOption(
			'-w, --workspace-slug <slug>',
			'Workspace slug containing the repository',
		)
		.requiredOption(
			'-r, --repo-slug <slug>',
			'Repository slug containing the pull request',
		)
		.requiredOption('-p, --pr-id <id>', 'Pull request ID to comment on')
		.requiredOption('-c, --content <text>', 'Content of the comment to add')
		.option(
			'--file <path>',
			'File path for inline comments (requires --line)',
		)
		.option(
			'--line <number>',
			'Line number for inline comments (requires --file)',
			(val) => parseInt(val, 10),
		)
		.action(async (options) => {
			const actionLogger = Logger.forContext(
				'cli/atlassian.pullrequests.cli.ts',
				'add-pr-comment',
			);
			try {
				actionLogger.debug('Processing command options:', options);

				// Validate inline comment options
				if (
					(options.file && !options.line) ||
					(!options.file && options.line)
				) {
					throw new Error(
						'Both --file and --line must be provided together for inline comments',
					);
				}

				// Build inline comment params if needed
				const inline =
					options.file && options.line
						? { path: options.file, line: options.line }
						: undefined;

				// Call controller
				const result = await atlassianPullRequestsController.addComment(
					{
						workspaceSlug: options.workspaceSlug,
						repoSlug: options.repoSlug,
						prId: options.prId,
						content: options.content,
						inline,
					},
				);

				console.log(result.content);
			} catch (error) {
				handleCliError(error);
			}
		});
}

export default { register };
</file>

<file path="src/cli/atlassian.repositories.cli.test.ts">
import { CliTestUtil } from '../utils/cli.test.util.js';
import { getAtlassianCredentials } from '../utils/transport.util.js';
import { config } from '../utils/config.util.js';

describe('Atlassian Repositories CLI Commands', () => {
	// Load configuration and check for credentials before all tests
	beforeAll(() => {
		// Load configuration from all sources
		config.load();

		// Log warning if credentials aren't available
		const credentials = getAtlassianCredentials();
		if (!credentials) {
			console.warn(
				'Skipping Atlassian Repositories CLI tests: No credentials available',
			);
		}
	});

	// Helper function to skip tests when credentials are missing
	const skipIfNoCredentials = () => {
		const credentials = getAtlassianCredentials();
		if (!credentials) {
			return true;
		}
		return false;
	};

	// Helper to get a valid workspace slug for testing
	async function getWorkspaceSlug(): Promise<string | null> {
		// First, get a list of workspaces
		const workspacesResult = await CliTestUtil.runCommand([
			'list-workspaces',
		]);

		// Skip if no workspaces are available
		if (
			workspacesResult.stdout.includes('No Bitbucket workspaces found.')
		) {
			console.warn('Skipping test: No workspaces available');
			return null;
		}

		// Extract a workspace slug from the output
		const slugMatch = workspacesResult.stdout.match(
			/\*\*Slug\*\*:\s+([^\n]+)/,
		);
		if (!slugMatch || !slugMatch[1]) {
			console.warn('Skipping test: Could not extract workspace slug');
			return null;
		}

		return slugMatch[1].trim();
	}

	describe('list-repositories command', () => {
		// Test listing repositories for a workspace
		it('should list repositories in a workspace', async () => {
			if (skipIfNoCredentials()) {
				return;
			}

			// Get a valid workspace
			const workspaceSlug = await getWorkspaceSlug();
			if (!workspaceSlug) {
				return; // Skip if no valid workspace found
			}

			// Run the CLI command
			const result = await CliTestUtil.runCommand([
				'list-repositories',
				'--workspace-slug',
				workspaceSlug,
			]);

			// Check command exit code
			expect(result.exitCode).toBe(0);

			// Verify the output format if there are repositories
			if (!result.stdout.includes('No repositories found')) {
				// Validate expected Markdown structure
				CliTestUtil.validateOutputContains(result.stdout, [
					'# Bitbucket Repositories',
					'**Name**',
					'**Full Name**',
					'**Owner**',
				]);

				// Validate Markdown formatting
				CliTestUtil.validateMarkdownOutput(result.stdout);
			}
		}, 30000); // Increased timeout for API call

		// Test with pagination
		it('should support pagination with --limit flag', async () => {
			if (skipIfNoCredentials()) {
				return;
			}

			// Get a valid workspace
			const workspaceSlug = await getWorkspaceSlug();
			if (!workspaceSlug) {
				return; // Skip if no valid workspace found
			}

			// Run the CLI command with limit
			const result = await CliTestUtil.runCommand([
				'list-repositories',
				'--workspace-slug',
				workspaceSlug,
				'--limit',
				'1',
			]);

			// Check command exit code
			expect(result.exitCode).toBe(0);

			// If there are multiple repositories, pagination section should be present
			if (
				!result.stdout.includes('No repositories found') &&
				result.stdout.includes('items remaining')
			) {
				CliTestUtil.validateOutputContains(result.stdout, [
					'Pagination',
					'Next cursor:',
				]);
			}
		}, 30000); // Increased timeout for API call

		// Test with query filtering
		it('should support filtering with --query parameter', async () => {
			if (skipIfNoCredentials()) {
				return;
			}

			// Get a valid workspace
			const workspaceSlug = await getWorkspaceSlug();
			if (!workspaceSlug) {
				return; // Skip if no valid workspace found
			}

			// Use a common term that might be in repository names
			const query = 'api';

			// Run the CLI command with query
			const result = await CliTestUtil.runCommand([
				'list-repositories',
				'--workspace-slug',
				workspaceSlug,
				'--query',
				query,
			]);

			// Check command exit code
			expect(result.exitCode).toBe(0);

			// Output might contain filtered results or no matches, both are valid
			if (result.stdout.includes('No repositories found')) {
				// Valid case - no repositories match the query
				CliTestUtil.validateOutputContains(result.stdout, [
					'No repositories found',
				]);
			} else {
				// Valid case - some repositories match, check formatting
				CliTestUtil.validateMarkdownOutput(result.stdout);
			}
		}, 30000); // Increased timeout for API call

		// Test with role filtering (if supported by the API)
		it('should support filtering by --role', async () => {
			if (skipIfNoCredentials()) {
				return;
			}

			// Get a valid workspace
			const workspaceSlug = await getWorkspaceSlug();
			if (!workspaceSlug) {
				return; // Skip if no valid workspace found
			}

			// Test one role - we pick 'contributor' as it's most likely to have results
			const result = await CliTestUtil.runCommand([
				'list-repositories',
				'--workspace-slug',
				workspaceSlug,
				'--role',
				'contributor',
			]);

			// Check command exit code
			expect(result.exitCode).toBe(0);

			// Output might contain filtered results or no matches, both are valid
			if (result.stdout.includes('No repositories found')) {
				// Valid case - no repositories match the role filter
				CliTestUtil.validateOutputContains(result.stdout, [
					'No repositories found',
				]);
			} else {
				// Valid case - some repositories match the role, check formatting
				CliTestUtil.validateMarkdownOutput(result.stdout);
			}
		}, 30000); // Increased timeout for API call

		// Test with sort parameter
		it('should support sorting with --sort parameter', async () => {
			if (skipIfNoCredentials()) {
				return;
			}

			// Get a valid workspace
			const workspaceSlug = await getWorkspaceSlug();
			if (!workspaceSlug) {
				return; // Skip if no valid workspace found
			}

			// Test sorting by name (alphabetical)
			const result = await CliTestUtil.runCommand([
				'list-repositories',
				'--workspace-slug',
				workspaceSlug,
				'--sort',
				'name',
			]);

			// Check command exit code
			expect(result.exitCode).toBe(0);

			// Sorting doesn't affect whether items are returned
			if (!result.stdout.includes('No repositories found')) {
				// Validate Markdown formatting
				CliTestUtil.validateMarkdownOutput(result.stdout);
			}
		}, 30000); // Increased timeout for API call

		// Test without required parameter (workspace)
		it('should fail when workspace is not provided', async () => {
			if (skipIfNoCredentials()) {
				return;
			}

			// Run command without required workspace parameter
			const result = await CliTestUtil.runCommand(['list-repositories']);

			// Should fail with non-zero exit code
			expect(result.exitCode).not.toBe(0);

			// Should indicate missing required option
			expect(result.stderr).toContain('required option');
		}, 15000);

		// Test with invalid parameter value
		it('should handle invalid limit values properly', async () => {
			if (skipIfNoCredentials()) {
				return;
			}

			// Get a valid workspace
			const workspaceSlug = await getWorkspaceSlug();
			if (!workspaceSlug) {
				return; // Skip if no valid workspace found
			}

			// Run with non-numeric limit
			const result = await CliTestUtil.runCommand([
				'list-repositories',
				'--workspace-slug',
				workspaceSlug,
				'--limit',
				'invalid',
			]);

			// This might either return an error (non-zero exit code) or handle it gracefully (zero exit code)
			// Both behaviors are acceptable, we just need to check that the command completes
			if (result.exitCode !== 0) {
				expect(result.stderr).toContain('error');
			} else {
				// Command completed without error, the implementation should handle it gracefully
				expect(result.exitCode).toBe(0);
			}
		}, 30000);
	});

	describe('get-repository command', () => {
		// Helper to get a valid repository for testing
		async function getRepositorySlug(
			workspaceSlug: string,
		): Promise<string | null> {
			// Get repositories for this workspace
			const reposResult = await CliTestUtil.runCommand([
				'list-repositories',
				'--workspace-slug',
				workspaceSlug,
			]);

			// Skip if no repositories are available
			if (reposResult.stdout.includes('No repositories found')) {
				console.warn('Skipping test: No repositories available');
				return null;
			}

			// Extract a repository slug from the output
			const repoMatch = reposResult.stdout.match(
				/\*\*Name\*\*:\s+([^\n]+)/,
			);
			if (!repoMatch || !repoMatch[1]) {
				console.warn(
					'Skipping test: Could not extract repository slug',
				);
				return null;
			}

			return repoMatch[1].trim();
		}

		// Test to fetch a specific repository
		it('should retrieve repository details', async () => {
			if (skipIfNoCredentials()) {
				return;
			}

			// Get valid workspace and repository slugs
			const workspaceSlug = await getWorkspaceSlug();
			if (!workspaceSlug) {
				return; // Skip if no valid workspace found
			}

			const repoSlug = await getRepositorySlug(workspaceSlug);
			if (!repoSlug) {
				return; // Skip if no valid repository found
			}

			// Run the get-repository command
			const result = await CliTestUtil.runCommand([
				'get-repository',
				'--workspace-slug',
				workspaceSlug,
				'--repo-slug',
				repoSlug,
			]);

			// Instead of expecting a success, check if the command ran
			// If access is unavailable, just note it and skip the test validation
			if (result.exitCode !== 0) {
				console.warn(
					'Skipping test validation: Could not retrieve repository details',
				);
				return;
			}

			// Verify the output structure and content
			CliTestUtil.validateOutputContains(result.stdout, [
				`# Repository: ${repoSlug}`,
				'## Basic Information',
				'**Name**',
				'**Full Name**',
				'**UUID**',
				'## Owner',
				'## Links',
			]);

			// Validate Markdown formatting
			CliTestUtil.validateMarkdownOutput(result.stdout);
		}, 30000); // Increased timeout for API calls

		// Test with missing workspace parameter
		it('should fail when workspace is not provided', async () => {
			if (skipIfNoCredentials()) {
				return;
			}

			// Run command without the workspace parameter
			const result = await CliTestUtil.runCommand([
				'get-repository',
				'--repo-slug',
				'some-repo',
			]);

			// Should fail with non-zero exit code
			expect(result.exitCode).not.toBe(0);

			// Should indicate missing required option
			expect(result.stderr).toContain('required option');
		}, 15000);

		// Test with missing repository parameter
		it('should fail when repository is not provided', async () => {
			if (skipIfNoCredentials()) {
				return;
			}

			// Get a valid workspace
			const workspaceSlug = await getWorkspaceSlug();
			if (!workspaceSlug) {
				return; // Skip if no valid workspace found
			}

			// Run command without the repository parameter
			const result = await CliTestUtil.runCommand([
				'get-repository',
				'--workspace-slug',
				workspaceSlug,
			]);

			// Should fail with non-zero exit code
			expect(result.exitCode).not.toBe(0);

			// Should indicate missing required option
			expect(result.stderr).toContain('required option');
		}, 15000);

		// Test with invalid repository slug
		it('should handle invalid repository slugs gracefully', async () => {
			if (skipIfNoCredentials()) {
				return;
			}

			// Get a valid workspace
			const workspaceSlug = await getWorkspaceSlug();
			if (!workspaceSlug) {
				return; // Skip if no valid workspace found
			}

			// Use a deliberately invalid repository slug
			const invalidSlug = 'invalid-repository-slug-that-does-not-exist';

			// Run command with invalid repository slug
			const result = await CliTestUtil.runCommand([
				'get-repository',
				'--workspace-slug',
				workspaceSlug,
				'--repo-slug',
				invalidSlug,
			]);

			// Should fail with non-zero exit code
			expect(result.exitCode).not.toBe(0);

			// Should contain error information
			expect(result.stderr).toContain('error');
		}, 30000);

		// Test with invalid workspace slug but valid repository format
		it('should handle invalid workspace slugs gracefully', async () => {
			if (skipIfNoCredentials()) {
				return;
			}

			// Use deliberately invalid workspace and repository slugs
			const invalidWorkspace = 'invalid-workspace-that-does-not-exist';
			const someRepo = 'some-repo';

			// Run command with invalid workspace slug
			const result = await CliTestUtil.runCommand([
				'get-repository',
				'--workspace-slug',
				invalidWorkspace,
				'--repo-slug',
				someRepo,
			]);

			// Should fail with non-zero exit code
			expect(result.exitCode).not.toBe(0);

			// Should contain error information
			expect(result.stderr).toContain('error');
		}, 30000);
	});
});
</file>

<file path="src/cli/atlassian.repositories.cli.ts">
import { Command } from 'commander';
import { Logger } from '../utils/logger.util.js';
import { handleCliError } from '../utils/error.util.js';
import atlassianRepositoriesController from '../controllers/atlassian.repositories.controller.js';
import { ListRepositoriesOptions } from '../controllers/atlassian.repositories.types.js';
import { formatPagination } from '../utils/formatter.util.js';

/**
 * CLI module for managing Bitbucket repositories.
 * Provides commands for listing repositories and retrieving repository details.
 * All commands require valid Atlassian credentials.
 */

// Create a contextualized logger for this file
const cliLogger = Logger.forContext('cli/atlassian.repositories.cli.ts');

// Log CLI initialization
cliLogger.debug('Bitbucket repositories CLI module initialized');

/**
 * Register Bitbucket Repositories CLI commands with the Commander program
 * @param program - The Commander program instance to register commands with
 * @throws Error if command registration fails
 */
function register(program: Command): void {
	const methodLogger = Logger.forContext(
		'cli/atlassian.repositories.cli.ts',
		'register',
	);
	methodLogger.debug('Registering Bitbucket Repositories CLI commands...');

	registerListRepositoriesCommand(program);
	registerGetRepositoryCommand(program);

	methodLogger.debug('CLI commands registered successfully');
}

/**
 * Register the command for listing repositories within a workspace
 * @param program - The Commander program instance
 */
function registerListRepositoriesCommand(program: Command): void {
	program
		.command('list-repositories')
		.description(
			`List repositories within a specific Bitbucket workspace.

        PURPOSE: Discover repositories within a given workspace, find their slugs, and get basic metadata like owner, description, and URLs. Requires the workspace slug as input.

        Use Case: Essential for finding the 'repoSlug' needed for pull request commands or 'get-repository'. Allows filtering by name, role, and sorting.

        Output: Formatted list of repositories including name, full name, owner, description, privacy status, dates, and URL. Supports filtering and sorting.

        Examples:
  $ mcp-atlassian-bitbucket list-repositories --workspace-slug my-team --limit 25
  $ mcp-atlassian-bitbucket list-repositories --workspace-slug my-team --query "backend-api" --role contributor
  $ mcp-atlassian-bitbucket list-repositories --workspace-slug my-team --sort "-updated_on" --cursor "next-page-token"`,
		)
		.requiredOption(
			'-w, --workspace-slug <slug>',
			'Workspace slug containing the repositories',
		)
		.option(
			'-q, --query <text>',
			'Filter repositories by name or other properties (simple text search, not query language)',
		)
		.option(
			'-r, --role <string>',
			'Filter repositories by the user\'s role (e.g., "owner", "admin", "contributor")',
		)
		.option(
			'-s, --sort <string>',
			'Field to sort results by (e.g., "name", "-updated_on")',
		)
		.option(
			'-l, --limit <number>',
			'Maximum number of repositories to return (1-100)',
		)
		.option(
			'-c, --cursor <string>',
			'Pagination cursor for retrieving the next set of results',
		)
		.action(async (options) => {
			const actionLogger = Logger.forContext(
				'cli/atlassian.repositories.cli.ts',
				'list-repositories',
			);
			try {
				actionLogger.debug('Processing command options:', options);

				// Validate workspace slug
				if (
					!options.workspaceSlug ||
					typeof options.workspaceSlug !== 'string' ||
					options.workspaceSlug.trim() === ''
				) {
					throw new Error(
						'Workspace slug is required and must be a valid slug string',
					);
				}

				// Map CLI options to controller format
				const controllerOptions: ListRepositoriesOptions = {
					workspaceSlug: options.workspaceSlug,
					query: options.query,
					role: options.role,
					sort: options.sort,
				};

				// Parse limit as number if provided
				if (options.limit) {
					const limit = parseInt(options.limit, 10);
					if (isNaN(limit) || limit < 1 || limit > 100) {
						throw new Error(
							'Limit must be a number between 1 and 100',
						);
					}
					controllerOptions.limit = limit;
				}

				// Add cursor if provided
				if (options.cursor) {
					controllerOptions.cursor = options.cursor;
				}

				actionLogger.debug(
					'Calling controller with options:',
					controllerOptions,
				);
				const result =
					await atlassianRepositoriesController.list(
						controllerOptions,
					);
				actionLogger.debug('API call completed, displaying results...');

				console.log(result.content);

				if (result.pagination) {
					console.log(
						formatPagination(
							result.pagination.count || 0,
							result.pagination.hasMore,
							result.pagination.nextCursor,
						),
					);
				}
			} catch (error) {
				handleCliError(error);
			}
		});
}

/**
 * Register the command for retrieving a specific Bitbucket repository
 * @param program - The Commander program instance
 */
function registerGetRepositoryCommand(program: Command): void {
	program
		.command('get-repository')
		.description(
			`Get detailed information about a specific Bitbucket repository.

        PURPOSE: Retrieve comprehensive metadata for a repository, including its full description, owner, language, size, dates, and links.`,
		)
		.requiredOption(
			'-w, --workspace-slug <slug>',
			'Workspace slug containing the repository',
		)
		.requiredOption(
			'-r, --repo-slug <slug>',
			'Slug of the repository to retrieve',
		)
		.action(async (options) => {
			const actionLogger = Logger.forContext(
				'cli/atlassian.repositories.cli.ts',
				'get-repository',
			);
			try {
				actionLogger.debug('Processing command options:', options);

				// Validate workspace slug
				if (
					!options.workspaceSlug ||
					typeof options.workspaceSlug !== 'string' ||
					options.workspaceSlug.trim() === ''
				) {
					throw new Error(
						'Workspace slug is required and must be a valid slug string',
					);
				}

				// Validate repository slug
				if (
					!options.repoSlug ||
					typeof options.repoSlug !== 'string' ||
					options.repoSlug.trim() === ''
				) {
					throw new Error(
						'Repository slug is required and must be a valid slug string',
					);
				}

				// Map CLI options to controller format
				const params = {
					workspaceSlug: options.workspaceSlug,
					repoSlug: options.repoSlug,
				};

				actionLogger.debug('Calling controller with params:', params);
				const result =
					await atlassianRepositoriesController.get(params);
				actionLogger.debug('API call completed, displaying results...');

				console.log(result.content);
			} catch (error) {
				handleCliError(error);
			}
		});
}

export default { register };
</file>

<file path="src/cli/atlassian.search.cli.test.ts">
import { CliTestUtil } from '../utils/cli.test.util';
import { getAtlassianCredentials } from '../utils/transport.util';

describe('Atlassian Search CLI Commands', () => {
	beforeAll(() => {
		// Check if credentials are available
		const credentials = getAtlassianCredentials();
		if (!credentials) {
			console.warn(
				'WARNING: No Atlassian credentials available. Live API tests will be skipped.',
			);
		}
	});

	/**
	 * Helper function to skip tests if Atlassian credentials are not available
	 */
	const skipIfNoCredentials = () => {
		const credentials = getAtlassianCredentials();
		if (!credentials) {
			return true;
		}
		return false;
	};

	describe('search command', () => {
		it('should search repositories and return success exit code', async () => {
			if (skipIfNoCredentials()) {
				console.warn('Skipping search test - no credentials');
				return;
			}

			const { stdout, exitCode } = await CliTestUtil.runCommand([
				'search',
				'--query',
				'test',
			]);

			expect(exitCode).toBe(0);
			CliTestUtil.validateMarkdownOutput(stdout);
			CliTestUtil.validateOutputContains(stdout, ['## Search Results']);
		}, 60000);

		it('should support searching with query parameter', async () => {
			if (skipIfNoCredentials()) {
				console.warn('Skipping query test - no credentials');
				return;
			}

			const { stdout, exitCode } = await CliTestUtil.runCommand([
				'search',
				'--query',
				'api',
			]);

			expect(exitCode).toBe(0);
			CliTestUtil.validateMarkdownOutput(stdout);
			CliTestUtil.validateOutputContains(stdout, ['## Search Results']);
		}, 60000);

		it('should support pagination with limit flag', async () => {
			if (skipIfNoCredentials()) {
				console.warn('Skipping pagination test - no credentials');
				return;
			}

			const { stdout, exitCode } = await CliTestUtil.runCommand([
				'search',
				'--query',
				'test',
				'--limit',
				'2',
			]);

			expect(exitCode).toBe(0);
			CliTestUtil.validateMarkdownOutput(stdout);
			// Check for pagination markers
			CliTestUtil.validateOutputContains(stdout, [
				/Showing \d+ results/,
				/Next page:|No more results/,
			]);
		}, 60000);

		it('should require the query parameter', async () => {
			const { stderr, exitCode } = await CliTestUtil.runCommand([
				'search',
			]);

			expect(exitCode).not.toBe(0);
			expect(stderr).toMatch(
				/required option|missing required|specify a query/i,
			);
		}, 30000);

		it('should handle invalid limit value gracefully', async () => {
			if (skipIfNoCredentials()) {
				console.warn('Skipping invalid limit test - no credentials');
				return;
			}

			const { stdout, exitCode } = await CliTestUtil.runCommand([
				'search',
				'--query',
				'test',
				'--limit',
				'not-a-number',
			]);

			expect(exitCode).not.toBe(0);
			CliTestUtil.validateOutputContains(stdout, [
				/Error|Invalid|Failed/i,
			]);
		}, 60000);

		it('should handle help flag correctly', async () => {
			const { stdout, exitCode } = await CliTestUtil.runCommand([
				'search',
				'--help',
			]);

			expect(exitCode).toBe(0);
			expect(stdout).toMatch(/Usage|Options|Description/i);
			expect(stdout).toContain('search');
		}, 15000);
	});
});
</file>

<file path="src/cli/atlassian.search.cli.ts">
import { Command } from 'commander';
import { Logger } from '../utils/logger.util.js';
import { handleCliError } from '../utils/error.util.js';
import { formatPagination } from '../utils/formatter.util.js';

import atlassianSearchController from '../controllers/atlassian.search.controller.js';

const cliLogger = Logger.forContext('cli/atlassian.search.cli.ts');

/**
 * Register Atlassian Search commands
 *
 * @param {Command} program - Commander program instance
 */
function register(program: Command) {
	const methodLogger = cliLogger.forMethod('register');
	methodLogger.debug('Registering Atlassian search commands...');

	// Register the search command
	program
		.command('search')
		.description(
			'Search for Bitbucket content across repositories, pull requests, commits, and code\n\n' +
				'        PURPOSE: Provides a unified search interface for Bitbucket workspaces, searching across repository names/descriptions, ' +
				'pull request titles/descriptions, commit messages, and code content to help locate resources.\n\n' +
				'        Use Case: Useful when you need to find specific content across your Bitbucket workspace such as ' +
				'repositories by name, pull requests by description, commits by message, or code by content.\n\n' +
				'        Output: Formatted search results including repository details, pull request information, commit data, or code snippets ' +
				'with matching content highlighted. Supports pagination.\n\n' +
				'        Examples:\n' +
				'  $ mcp-atlassian-bitbucket search --workspace-slug my-team --scope repositories --query "api"\n' +
				'  $ mcp-atlassian-bitbucket search --workspace-slug my-team --repo-slug backend --scope commits --query "update"\n' +
				'  $ mcp-atlassian-bitbucket search --workspace-slug my-team --query "function getUser" --scope code',
		)
		.requiredOption(
			'-w, --workspace-slug <slug>',
			'Workspace slug containing the content to search',
		)
		.option(
			'-r, --repo-slug <slug>',
			'Repository slug (required for pull request search, optional for code search)',
		)
		.option(
			'-q, --query <query>',
			'Search query to filter results by name, description, etc. (required for code search)',
		)
		.option(
			'-s, --scope <scope>',
			'Search scope: "repositories", "pullrequests", "commits", "code", or "all" (default)',
		)
		.option(
			'-l, --limit <number>',
			'Maximum number of items to return per page (1-100)',
		)
		.option(
			'-c, --cursor <string>',
			'Pagination cursor for repositories/PRs, or page number for code search',
		)
		.action(async (options) => {
			try {
				const actionLogger = cliLogger.forMethod('search');
				actionLogger.debug(
					'Executing search command with options:',
					options,
				);

				// Parse limit as number if provided
				if (options.limit) {
					options.limit = parseInt(options.limit, 10);
				}

				// For code search, cursor is actually a page number
				if (options.scope === 'code' && options.cursor) {
					options.page = parseInt(options.cursor, 10);
				}

				// Map CLI options to controller options
				const controllerOptions = {
					workspaceSlug: options.workspaceSlug,
					repoSlug: options.repoSlug,
					query: options.query,
					scope: options.scope,
					limit: options.limit,
					cursor: options.cursor,
					page: options.page,
				};

				const result =
					await atlassianSearchController.search(controllerOptions);

				console.log(result.content);

				if (result.pagination) {
					console.log(
						formatPagination(
							result.pagination.count || 0,
							result.pagination.hasMore,
							result.pagination.nextCursor,
						),
					);
				}
			} catch (error) {
				handleCliError(error);
			}
		});

	methodLogger.debug('Successfully registered Atlassian search commands');
}

export default { register };
</file>

<file path="src/cli/atlassian.workspaces.cli.test.ts">
import { CliTestUtil } from '../utils/cli.test.util.js';
import { getAtlassianCredentials } from '../utils/transport.util.js';
import { config } from '../utils/config.util.js';

describe('Atlassian Workspaces CLI Commands', () => {
	// Load configuration and check for credentials before all tests
	beforeAll(() => {
		// Load configuration from all sources
		config.load();

		// Log warning if credentials aren't available
		const credentials = getAtlassianCredentials();
		if (!credentials) {
			console.warn(
				'Skipping Atlassian Workspaces CLI tests: No credentials available',
			);
		}
	});

	// Helper function to skip tests when credentials are missing
	const skipIfNoCredentials = () => {
		const credentials = getAtlassianCredentials();
		if (!credentials) {
			return true;
		}
		return false;
	};

	describe('list-workspaces command', () => {
		// Test default behavior (list all workspaces)
		it('should list available workspaces', async () => {
			if (skipIfNoCredentials()) {
				return;
			}

			// Run the CLI command
			const result = await CliTestUtil.runCommand(['list-workspaces']);

			// Check command exit code
			expect(result.exitCode).toBe(0);

			// Verify the output format
			if (!result.stdout.includes('No Bitbucket workspaces found.')) {
				// Validate expected Markdown structure - Fixed to match actual output
				CliTestUtil.validateOutputContains(result.stdout, [
					'# Bitbucket Workspaces',
					'**UUID**',
					'**Slug**',
					'**Permission Level**',
				]);

				// Validate Markdown formatting
				CliTestUtil.validateMarkdownOutput(result.stdout);
			}
		}, 30000); // Increased timeout for API call

		// Test with pagination
		it('should support pagination with --limit flag', async () => {
			if (skipIfNoCredentials()) {
				return;
			}

			// Run the CLI command with limit
			const result = await CliTestUtil.runCommand([
				'list-workspaces',
				'--limit',
				'1',
			]);

			// Check command exit code
			expect(result.exitCode).toBe(0);

			// If there are multiple workspaces, pagination section should be present
			if (
				!result.stdout.includes('No Bitbucket workspaces found.') &&
				result.stdout.includes('items remaining')
			) {
				CliTestUtil.validateOutputContains(result.stdout, [
					'Pagination',
					'Next cursor:',
				]);
			}
		}, 30000); // Increased timeout for API call

		// Test with invalid parameters - Fixed to use a truly invalid input
		it('should handle invalid parameters properly', async () => {
			if (skipIfNoCredentials()) {
				return;
			}

			// Run the CLI command with a non-existent parameter
			const result = await CliTestUtil.runCommand([
				'list-workspaces',
				'--non-existent-parameter',
				'value',
			]);

			// Should fail with non-zero exit code
			expect(result.exitCode).not.toBe(0);

			// Should output error message
			expect(result.stderr).toContain('unknown option');
		}, 30000);
	});

	describe('get-workspace command', () => {
		// Test to fetch a specific workspace
		it('should retrieve a specific workspace by slug', async () => {
			if (skipIfNoCredentials()) {
				return;
			}

			// First, get a list of workspaces to find a valid slug
			const listResult = await CliTestUtil.runCommand([
				'list-workspaces',
			]);

			// Skip if no workspaces are available
			if (listResult.stdout.includes('No Bitbucket workspaces found.')) {
				console.warn('Skipping test: No workspaces available');
				return;
			}

			// Extract a workspace slug from the output
			const slugMatch = listResult.stdout.match(
				/\*\*Slug\*\*:\s+([^\n]+)/,
			);
			if (!slugMatch || !slugMatch[1]) {
				console.warn('Skipping test: Could not extract workspace slug');
				return;
			}

			const workspaceSlug = slugMatch[1].trim();

			// Run the get-workspace command with the extracted slug
			const getResult = await CliTestUtil.runCommand([
				'get-workspace',
				'--workspace-slug',
				workspaceSlug,
			]);

			// Check command exit code
			expect(getResult.exitCode).toBe(0);

			// Verify the output structure and content
			CliTestUtil.validateOutputContains(getResult.stdout, [
				`# Workspace: `,
				`**Slug**: ${workspaceSlug}`,
				'Basic Information',
				'Links',
			]);

			// Validate Markdown formatting
			CliTestUtil.validateMarkdownOutput(getResult.stdout);
		}, 30000); // Increased timeout for API calls

		// Test with missing required parameter
		it('should fail when workspace slug is not provided', async () => {
			if (skipIfNoCredentials()) {
				return;
			}

			// Run command without required parameter
			const result = await CliTestUtil.runCommand(['get-workspace']);

			// Should fail with non-zero exit code
			expect(result.exitCode).not.toBe(0);

			// Should indicate missing required option
			expect(result.stderr).toContain('required option');
		}, 15000);

		// Test with invalid workspace slug
		it('should handle invalid workspace slugs gracefully', async () => {
			if (skipIfNoCredentials()) {
				return;
			}

			// Use a deliberately invalid workspace slug
			const invalidSlug = 'invalid-workspace-slug-that-does-not-exist';

			// Run command with invalid slug
			const result = await CliTestUtil.runCommand([
				'get-workspace',
				'--workspace-slug',
				invalidSlug,
			]);

			// Should fail with non-zero exit code
			expect(result.exitCode).not.toBe(0);

			// Should contain error information
			expect(result.stderr).toContain('error');
		}, 30000);
	});
});
</file>

<file path="src/cli/atlassian.workspaces.cli.ts">
import { Command } from 'commander';
import { Logger } from '../utils/logger.util.js';
import { handleCliError } from '../utils/error.util.js';
import atlassianWorkspacesController from '../controllers/atlassian.workspaces.controller.js';
import { ListWorkspacesOptions } from '../controllers/atlassian.workspaces.types.js';
import { formatPagination } from '../utils/formatter.util.js';

/**
 * CLI module for managing Bitbucket workspaces.
 * Provides commands for listing workspaces and retrieving workspace details.
 * All commands require valid Atlassian credentials.
 */

// Create a contextualized logger for this file
const cliLogger = Logger.forContext('cli/atlassian.workspaces.cli.ts');

// Log CLI initialization
cliLogger.debug('Bitbucket workspaces CLI module initialized');

/**
 * Register Bitbucket Workspaces CLI commands with the Commander program
 * @param program - The Commander program instance to register commands with
 * @throws Error if command registration fails
 */
function register(program: Command): void {
	const methodLogger = Logger.forContext(
		'cli/atlassian.workspaces.cli.ts',
		'register',
	);
	methodLogger.debug('Registering Bitbucket Workspaces CLI commands...');

	registerListWorkspacesCommand(program);
	registerGetWorkspaceCommand(program);

	methodLogger.debug('CLI commands registered successfully');
}

/**
 * Register the command for listing Bitbucket workspaces
 * @param program - The Commander program instance
 */
function registerListWorkspacesCommand(program: Command): void {
	program
		.command('list-workspaces')
		.description(
			`List Bitbucket workspaces accessible to the authenticated user.

        PURPOSE: Discover available workspaces, find their slugs for use in other commands, and get a high-level overview of permissions and access dates.

        Use Case: Useful when you don't know the exact slug of a workspace you need to interact with, or when exploring available team/project containers.

        Output: Formatted list including workspace name, slug, UUID, your permission level, and access dates. Supports pagination.

        Examples:
  $ mcp-atlassian-bitbucket list-workspaces --limit 10
  $ mcp-atlassian-bitbucket list-workspaces --cursor "some-cursor-value"`,
		)
		// NOTE: Sort option has been removed as the Bitbucket API's /2.0/user/permissions/workspaces endpoint
		// does not support sorting on any field
		.option(
			'-l, --limit <number>',
			'Maximum number of workspaces to return (1-100)',
		)
		.option(
			'-c, --cursor <string>',
			'Pagination cursor for retrieving the next set of results',
		)
		.action(async (options) => {
			const actionLogger = Logger.forContext(
				'cli/atlassian.workspaces.cli.ts',
				'list-workspaces',
			);
			try {
				actionLogger.debug('Processing command options:', options);

				// Validate limit if provided
				if (options.limit) {
					const limit = parseInt(options.limit, 10);
					if (isNaN(limit) || limit <= 0) {
						throw new Error(
							'Invalid --limit value: Must be a positive integer.',
						);
					}
				}

				// Bitbucket API's /2.0/user/permissions/workspaces endpoint does not support sorting
				// so we don't include sort in the filterOptions even if provided in the CLI args
				const filterOptions: ListWorkspacesOptions = {};

				// Apply pagination options if provided
				if (options.limit) {
					filterOptions.limit = parseInt(options.limit, 10);
				}

				if (options.cursor) {
					filterOptions.cursor = options.cursor;
				}

				actionLogger.debug(
					'Fetching workspaces with filters:',
					filterOptions,
				);
				const result =
					await atlassianWorkspacesController.list(filterOptions);
				actionLogger.debug('Successfully retrieved workspaces');

				console.log(result.content);

				// Display pagination information if available
				if (result.pagination) {
					console.log(
						'\n' +
							formatPagination(
								result.pagination.count ?? 0,
								result.pagination.hasMore,
								result.pagination.nextCursor,
							),
					);
				}
			} catch (error) {
				actionLogger.error('Operation failed:', error);
				handleCliError(error);
			}
		});
}

/**
 * Register the command for retrieving a specific Bitbucket workspace
 * @param program - The Commander program instance
 */
function registerGetWorkspaceCommand(program: Command): void {
	program
		.command('get-workspace')
		.description(
			`Get detailed information about a specific Bitbucket workspace using its slug.

        PURPOSE: Retrieve comprehensive details for a *known* workspace, including its UUID, name, type, creation date, and links to related resources like repositories and projects.

        Use Case: Useful when you have a specific workspace slug (often obtained via 'list-workspaces') and need its full metadata or links.

        Output: Formatted details of the specified workspace. Fetches all available details by default.

        Examples:
  $ mcp-atlassian-bitbucket get-workspace --workspace-slug my-dev-team`,
		)
		.requiredOption(
			'-w, --workspace-slug <slug>',
			'Slug of the workspace to retrieve (identifies the workspace)',
		)
		.action(async (options) => {
			const actionLogger = Logger.forContext(
				'cli/atlassian.workspaces.cli.ts',
				'get-workspace',
			);
			try {
				actionLogger.debug(
					`Fetching workspace: ${options.workspaceSlug}`,
				);

				const result = await atlassianWorkspacesController.get({
					workspaceSlug: options.workspaceSlug,
				});

				console.log(result.content);
			} catch (error) {
				actionLogger.error('Operation failed:', error);
				handleCliError(error);
			}
		});
}

export default { register };
</file>

<file path="src/cli/index.ts">
import { Command } from 'commander';
import { Logger } from '../utils/logger.util.js';
import { VERSION, CLI_NAME } from '../utils/constants.util.js';

// Import Bitbucket-specific CLI modules
import atlassianWorkspacesCli from './atlassian.workspaces.cli.js';
import atlassianRepositoriesCli from './atlassian.repositories.cli.js';
import atlassianPullRequestsCli from './atlassian.pullrequests.cli.js';
import atlassianSearchCommands from './atlassian.search.cli.js';

// Package description
const DESCRIPTION =
	'A Model Context Protocol (MCP) server for Atlassian Bitbucket integration';

// Create a contextualized logger for this file
const cliLogger = Logger.forContext('cli/index.ts');

// Log CLI initialization
cliLogger.debug('Bitbucket CLI module initialized');

export async function runCli(args: string[]) {
	const methodLogger = Logger.forContext('cli/index.ts', 'runCli');

	const program = new Command();

	program.name(CLI_NAME).description(DESCRIPTION).version(VERSION);

	// Register CLI commands
	atlassianWorkspacesCli.register(program);
	cliLogger.debug('Workspace commands registered');

	atlassianRepositoriesCli.register(program);
	cliLogger.debug('Repository commands registered');

	atlassianPullRequestsCli.register(program);
	cliLogger.debug('Pull Request commands registered');

	atlassianSearchCommands.register(program);
	cliLogger.debug('Search commands registered');

	// Handle unknown commands
	program.on('command:*', (operands) => {
		methodLogger.error(`Unknown command: ${operands[0]}`);
		console.log('');
		program.help();
		process.exit(1);
	});

	// Parse arguments; default to help if no command provided
	await program.parseAsync(args.length ? args : ['--help'], { from: 'user' });
}
</file>

<file path="src/controllers/atlassian.pullrequests.controller.test.ts">
import atlassianPullRequestsController from './atlassian.pullrequests.controller.js';
import { getAtlassianCredentials } from '../utils/transport.util.js';
import { config } from '../utils/config.util.js';
import { McpError } from '../utils/error.util.js';
import atlassianRepositoriesController from './atlassian.repositories.controller.js';
import atlassianWorkspacesController from './atlassian.workspaces.controller.js';

describe('Atlassian Pull Requests Controller', () => {
	// Load configuration and check for credentials before all tests
	beforeAll(() => {
		config.load(); // Ensure config is loaded
		const credentials = getAtlassianCredentials();
		if (!credentials) {
			console.warn(
				'Skipping Atlassian Pull Requests Controller tests: No credentials available',
			);
		}
	});

	// Helper function to skip tests when credentials are missing
	const skipIfNoCredentials = () => !getAtlassianCredentials();

	// Helper to get valid repository information for testing
	async function getRepositoryInfo(): Promise<{
		workspaceSlug: string;
		repoSlug: string;
	} | null> {
		if (skipIfNoCredentials()) return null;

		try {
			// First get a workspace
			const workspacesResult = await atlassianWorkspacesController.list({
				limit: 1,
			});

			if (workspacesResult.content === 'No Bitbucket workspaces found.') {
				return null;
			}

			// Extract workspace slug
			const workspaceMatch = workspacesResult.content.match(
				/\*\*Slug\*\*:\s+([^\s\n]+)/,
			);
			const workspaceSlug = workspaceMatch ? workspaceMatch[1] : null;

			if (!workspaceSlug) return null;

			// Get a repository from this workspace
			const reposResult = await atlassianRepositoriesController.list({
				workspaceSlug,
				limit: 1,
			});

			if (
				reposResult.content ===
				'No repositories found in this workspace.'
			) {
				return null;
			}

			// Extract repo slug (adjust regex based on actual formatter output)
			const repoSlugMatch = reposResult.content.match(
				/\*\*Slug\*\*:\s+([^\s\n]+)/,
			);
			const repoSlug = repoSlugMatch ? repoSlugMatch[1] : null;

			if (!repoSlug) return null;

			return { workspaceSlug, repoSlug };
		} catch (error) {
			console.warn(
				'Could not fetch repository info for PR tests:',
				error,
			);
			return null;
		}
	}

	// Helper to get a valid pull request ID for testing
	async function getFirstPullRequestId(): Promise<{
		workspaceSlug: string;
		repoSlug: string;
		prId: string;
	} | null> {
		if (skipIfNoCredentials()) return null;

		const repoInfo = await getRepositoryInfo();
		if (!repoInfo) return null;

		try {
			// List pull requests in the repository
			const prListResult = await atlassianPullRequestsController.list({
				workspaceSlug: repoInfo.workspaceSlug,
				repoSlug: repoInfo.repoSlug,
				limit: 1,
			});

			if (prListResult.content === 'No pull requests found.') {
				return null;
			}

			// Extract PR ID from the content (adjust regex based on actual formatter output)
			const prIdMatch = prListResult.content.match(/\*\*ID\*\*:\s+(\d+)/);
			const prId = prIdMatch ? prIdMatch[1] : null;

			if (!prId) return null;

			return {
				workspaceSlug: repoInfo.workspaceSlug,
				repoSlug: repoInfo.repoSlug,
				prId,
			};
		} catch (error) {
			console.warn('Could not fetch pull request ID for tests:', error);
			return null;
		}
	}

	describe('list', () => {
		it('should return a formatted list of pull requests in Markdown', async () => {
			if (skipIfNoCredentials()) return;

			const repoInfo = await getRepositoryInfo();
			if (!repoInfo) {
				console.warn('Skipping test: No repository info found.');
				return;
			}

			const result = await atlassianPullRequestsController.list({
				workspaceSlug: repoInfo.workspaceSlug,
				repoSlug: repoInfo.repoSlug,
			});

			// Verify the response structure
			expect(result).toHaveProperty('content');
			expect(typeof result.content).toBe('string');
			expect(result).toHaveProperty('pagination');

			// Basic Markdown content checks
			if (result.content !== 'No pull requests found.') {
				expect(result.content).toMatch(/^# Pull Requests in/m);
				expect(result.content).toContain('**ID**');
				expect(result.content).toContain('**Title**');
				expect(result.content).toContain('**State**');
			}

			// Verify pagination structure
			expect(result.pagination).toBeDefined();
			expect(result.pagination).toHaveProperty('hasMore');
			expect(typeof result.pagination?.hasMore).toBe('boolean');

			// nextCursor might be undefined if hasMore is false
			if (result.pagination?.hasMore) {
				expect(result.pagination).toHaveProperty('nextCursor');
				expect(typeof result.pagination?.nextCursor).toBe('string');
			}
		}, 30000); // Increased timeout

		it('should handle pagination options (limit/cursor)', async () => {
			if (skipIfNoCredentials()) return;

			const repoInfo = await getRepositoryInfo();
			if (!repoInfo) {
				console.warn('Skipping test: No repository info found.');
				return;
			}

			// Fetch first page with limit 1
			const result1 = await atlassianPullRequestsController.list({
				workspaceSlug: repoInfo.workspaceSlug,
				repoSlug: repoInfo.repoSlug,
				limit: 1,
			});

			// Should have at most 1 result
			expect(result1.pagination?.count).toBeLessThanOrEqual(1);

			// If there's a next page, fetch it
			if (result1.pagination?.hasMore && result1.pagination.nextCursor) {
				const result2 = await atlassianPullRequestsController.list({
					workspaceSlug: repoInfo.workspaceSlug,
					repoSlug: repoInfo.repoSlug,
					limit: 1,
					cursor: result1.pagination.nextCursor,
				});

				expect(result2.pagination?.count).toBeLessThanOrEqual(1);

				// Ensure content is different (or handle case where only 1 PR exists)
				if (
					result1.content !== 'No pull requests found.' &&
					result2.content !== 'No pull requests found.' &&
					result1.pagination?.count &&
					result2.pagination?.count &&
					result1.pagination.count > 0 &&
					result2.pagination.count > 0
				) {
					// Only compare if we actually have multiple PRs
					expect(result1.content).not.toEqual(result2.content);
				}
			} else {
				console.warn(
					'Skipping cursor part of pagination test: Only one page of pull requests found.',
				);
			}
		}, 30000);

		it('should handle state filtering', async () => {
			if (skipIfNoCredentials()) return;

			const repoInfo = await getRepositoryInfo();
			if (!repoInfo) {
				console.warn('Skipping test: No repository info found.');
				return;
			}

			// Try filtering by OPEN state
			const filteredResult = await atlassianPullRequestsController.list({
				workspaceSlug: repoInfo.workspaceSlug,
				repoSlug: repoInfo.repoSlug,
				state: 'OPEN',
			});

			// The result should be a valid response
			expect(filteredResult).toHaveProperty('content');
			expect(typeof filteredResult.content).toBe('string');

			// We can't guarantee matches (there might not be open PRs), but response should be valid
			if (filteredResult.content !== 'No pull requests found.') {
				expect(filteredResult.content).toMatch(/^# Pull Requests in/m);
				// State filtered results should all show the filtered state
				expect(filteredResult.content).toContain('**State**: OPEN');
				// Should not contain other states
				expect(filteredResult.content).not.toContain(
					'**State**: DECLINED',
				);
				expect(filteredResult.content).not.toContain(
					'**State**: MERGED',
				);
			}
		}, 30000);

		it('should handle query filtering', async () => {
			if (skipIfNoCredentials()) return;

			const repoInfo = await getRepositoryInfo();
			if (!repoInfo) {
				console.warn('Skipping test: No repository info found.');
				return;
			}

			// First get all PRs to find a valid query term
			const allResult = await atlassianPullRequestsController.list({
				workspaceSlug: repoInfo.workspaceSlug,
				repoSlug: repoInfo.repoSlug,
			});

			if (allResult.content === 'No pull requests found.') {
				console.warn(
					'Skipping filtering test: No pull requests found.',
				);
				return;
			}

			// Extract a PR title from the first result to use as a query
			const titleMatch = allResult.content.match(
				/\*\*Title\*\*:\s+([^\n]+)/,
			);
			if (!titleMatch || !titleMatch[1]) {
				console.warn(
					'Skipping filtering test: Could not extract PR title.',
				);
				return;
			}

			// Use part of the title as a query term
			const queryTerm = titleMatch[1].trim().split(' ')[0];

			// Query with the extracted term
			const filteredResult = await atlassianPullRequestsController.list({
				workspaceSlug: repoInfo.workspaceSlug,
				repoSlug: repoInfo.repoSlug,
				query: queryTerm,
			});

			// The result should be a valid response
			expect(filteredResult).toHaveProperty('content');
			expect(typeof filteredResult.content).toBe('string');

			// We can't guarantee matches (query might not match anything), but response should be valid
			if (filteredResult.content !== 'No pull requests found.') {
				expect(filteredResult.content).toMatch(/^# Pull Requests in/m);
			}
		}, 30000);

		it('should handle empty result scenario', async () => {
			if (skipIfNoCredentials()) return;

			const repoInfo = await getRepositoryInfo();
			if (!repoInfo) {
				console.warn('Skipping test: No repository info found.');
				return;
			}

			// Use an extremely unlikely query to get empty results
			const noMatchQuery = 'thisstringwillnotmatchanypullrequest12345xyz';

			const emptyResult = await atlassianPullRequestsController.list({
				workspaceSlug: repoInfo.workspaceSlug,
				repoSlug: repoInfo.repoSlug,
				query: noMatchQuery,
			});

			// Should return a specific "no results" message
			expect(emptyResult.content).toBe('No pull requests found.');
			expect(emptyResult.pagination).toHaveProperty('count', 0);
			expect(emptyResult.pagination).toHaveProperty('hasMore', false);
		}, 30000);

		it('should throw an McpError for an invalid repository or workspace', async () => {
			if (skipIfNoCredentials()) return;

			const invalidWorkspaceSlug =
				'this-workspace-definitely-does-not-exist-12345';
			const invalidRepoSlug = 'this-repo-definitely-does-not-exist-12345';

			// Expect the controller call to reject with an McpError
			await expect(
				atlassianPullRequestsController.list({
					workspaceSlug: invalidWorkspaceSlug,
					repoSlug: invalidRepoSlug,
				}),
			).rejects.toThrow(McpError);

			// Check the status code via the error handler's behavior
			try {
				await atlassianPullRequestsController.list({
					workspaceSlug: invalidWorkspaceSlug,
					repoSlug: invalidRepoSlug,
				});
			} catch (e) {
				expect(e).toBeInstanceOf(McpError);
				expect((e as McpError).statusCode).toBe(404); // Expecting Not Found
				expect((e as McpError).message).toContain('not found');
			}
		}, 30000);

		it('should require both workspaceSlug and repoSlug', async () => {
			if (skipIfNoCredentials()) return;

			await expect(
				atlassianPullRequestsController.list({
					workspaceSlug: 'some-workspace',
				} as any),
			).rejects.toThrow();

			await expect(
				atlassianPullRequestsController.list({
					repoSlug: 'some-repo',
				} as any),
			).rejects.toThrow();
		}, 10000);
	});

	describe('get', () => {
		it('should return formatted pull request details in Markdown', async () => {
			if (skipIfNoCredentials()) return;

			const prInfo = await getFirstPullRequestId();
			if (!prInfo) {
				console.warn('Skipping test: No pull request ID found.');
				return;
			}

			const result = await atlassianPullRequestsController.get(prInfo);

			// Verify the response structure
			expect(result).toHaveProperty('content');
			expect(typeof result.content).toBe('string');
			// get() doesn't have pagination
			expect(result).not.toHaveProperty('pagination');

			// Basic Markdown content checks
			expect(result.content).toMatch(/^# Pull Request:/m);
			expect(result.content).toContain(`**ID**: ${prInfo.prId}`);
			expect(result.content).toContain('**State**:');
			expect(result.content).toContain('**Author**:');
			expect(result.content).toContain('**Created**:');
			expect(result.content).toContain('## Description');
		}, 30000);

		it('should throw an McpError for a non-existent pull request ID', async () => {
			if (skipIfNoCredentials()) return;

			const repoInfo = await getRepositoryInfo();
			if (!repoInfo) {
				console.warn('Skipping test: No repository info found.');
				return;
			}

			const nonExistentId = '999999999'; // Very high number unlikely to exist

			// Expect the controller call to reject with an McpError
			await expect(
				atlassianPullRequestsController.get({
					workspaceSlug: repoInfo.workspaceSlug,
					repoSlug: repoInfo.repoSlug,
					prId: nonExistentId,
				}),
			).rejects.toThrow(McpError);

			// Check the status code via the error handler's behavior
			try {
				await atlassianPullRequestsController.get({
					workspaceSlug: repoInfo.workspaceSlug,
					repoSlug: repoInfo.repoSlug,
					prId: nonExistentId,
				});
			} catch (e) {
				expect(e).toBeInstanceOf(McpError);
				expect((e as McpError).statusCode).toBe(404); // Expecting Not Found
				expect((e as McpError).message).toContain('not found');
			}
		}, 30000);
	});

	describe('listComments', () => {
		it('should return formatted pull request comments in Markdown', async () => {
			if (skipIfNoCredentials()) return;

			const prInfo = await getFirstPullRequestId();
			if (!prInfo) {
				console.warn('Skipping test: No pull request ID found.');
				return;
			}

			const result = await atlassianPullRequestsController.listComments({
				workspaceSlug: prInfo.workspaceSlug,
				repoSlug: prInfo.repoSlug,
				prId: prInfo.prId,
			});

			// Verify the response structure
			expect(result).toHaveProperty('content');
			expect(typeof result.content).toBe('string');
			expect(result).toHaveProperty('pagination');

			// Basic Markdown content checks
			if (result.content !== 'No comments found on this pull request.') {
				expect(result.content).toMatch(/^# Comments on Pull Request/m);
				expect(result.content).toContain('**Author**:');
				expect(result.content).toContain('**Updated**:');
			}

			// Verify pagination structure
			expect(result.pagination).toBeDefined();
			expect(result.pagination).toHaveProperty('hasMore');
			expect(typeof result.pagination?.hasMore).toBe('boolean');
		}, 30000);

		it('should handle pagination options (limit/cursor)', async () => {
			if (skipIfNoCredentials()) return;

			const prInfo = await getFirstPullRequestId();
			if (!prInfo) {
				console.warn('Skipping test: No pull request ID found.');
				return;
			}

			// Fetch first page with limit 1
			const result1 = await atlassianPullRequestsController.listComments({
				workspaceSlug: prInfo.workspaceSlug,
				repoSlug: prInfo.repoSlug,
				prId: prInfo.prId,
				limit: 1,
			});

			// Should have at most 1 result
			expect(result1.pagination?.count).toBeLessThanOrEqual(1);

			// If there's a next page, fetch it
			if (result1.pagination?.hasMore && result1.pagination.nextCursor) {
				const result2 =
					await atlassianPullRequestsController.listComments({
						workspaceSlug: prInfo.workspaceSlug,
						repoSlug: prInfo.repoSlug,
						prId: prInfo.prId,
						limit: 1,
						cursor: result1.pagination.nextCursor,
					});

				expect(result2.pagination?.count).toBeLessThanOrEqual(1);

				// Ensure content is different (or handle case where only 1 comment exists)
				if (
					result1.content !==
						'No comments found on this pull request.' &&
					result2.content !==
						'No comments found on this pull request.' &&
					result1.pagination?.count &&
					result2.pagination?.count &&
					result1.pagination.count > 0 &&
					result2.pagination.count > 0
				) {
					// Only compare if we actually have multiple comments
					expect(result1.content).not.toEqual(result2.content);
				}
			} else {
				console.warn(
					'Skipping cursor part of pagination test: Only one page of comments found or no comments available.',
				);
			}
		}, 30000);

		it('should handle empty result scenario', async () => {
			if (skipIfNoCredentials()) return;

			// First get a PR without comments, or use a non-existent but valid format PR ID
			const repoInfo = await getRepositoryInfo();
			if (!repoInfo) {
				console.warn('Skipping test: No repository info found.');
				return;
			}

			// Try to find a PR without comments
			try {
				// First check if we can access the repository
				const repoResult = await atlassianPullRequestsController.list({
					workspaceSlug: repoInfo.workspaceSlug,
					repoSlug: repoInfo.repoSlug,
					limit: 1,
				});

				// If we can access repos, use a real PR and see if it has no comments
				if (
					repoResult.pagination?.count &&
					repoResult.pagination.count > 0
				) {
					// Extract PR ID from the content
					const prIdMatch =
						repoResult.content.match(/\*\*ID\*\*:\s+(\d+)/);
					if (prIdMatch && prIdMatch[1]) {
						const prId = prIdMatch[1];

						// Get comments for this PR
						const commentsResult =
							await atlassianPullRequestsController.listComments({
								workspaceSlug: repoInfo.workspaceSlug,
								repoSlug: repoInfo.repoSlug,
								prId,
							});

						// Check if there are no comments
						if (
							commentsResult.content ===
							'No comments found on this pull request.'
						) {
							// Verify the structure for empty results
							expect(commentsResult.pagination).toHaveProperty(
								'count',
								0,
							);
							expect(commentsResult.pagination).toHaveProperty(
								'hasMore',
								false,
							);
						} else {
							console.warn(
								'Skipping empty result test: All PRs have comments.',
							);
						}
					}
				} else {
					console.warn(
						'Skipping empty result test: No pull requests available.',
					);
				}
			} catch (error) {
				console.warn('Error during empty result test:', error);
			}
		}, 30000);

		it('should throw an McpError for a non-existent pull request ID', async () => {
			if (skipIfNoCredentials()) return;

			const repoInfo = await getRepositoryInfo();
			if (!repoInfo) {
				console.warn('Skipping test: No repository info found.');
				return;
			}

			const nonExistentId = '999999999'; // Very high number unlikely to exist

			// Expect the controller call to reject with an McpError
			await expect(
				atlassianPullRequestsController.listComments({
					workspaceSlug: repoInfo.workspaceSlug,
					repoSlug: repoInfo.repoSlug,
					prId: nonExistentId,
				}),
			).rejects.toThrow(McpError);

			// Check the status code via the error handler's behavior
			try {
				await atlassianPullRequestsController.listComments({
					workspaceSlug: repoInfo.workspaceSlug,
					repoSlug: repoInfo.repoSlug,
					prId: nonExistentId,
				});
			} catch (e) {
				expect(e).toBeInstanceOf(McpError);
				expect((e as McpError).statusCode).toBe(404); // Expecting Not Found
				expect((e as McpError).message).toContain('not found');
			}
		}, 30000);

		it('should require all necessary parameters', async () => {
			if (skipIfNoCredentials()) return;

			// Test with missing prId
			await expect(
				atlassianPullRequestsController.listComments({
					workspaceSlug: 'some-workspace',
					repoSlug: 'some-repo',
				} as any),
			).rejects.toThrow();

			// Test with missing repoSlug
			await expect(
				atlassianPullRequestsController.listComments({
					workspaceSlug: 'some-workspace',
					prId: '123',
				} as any),
			).rejects.toThrow();

			// Test with missing workspaceSlug
			await expect(
				atlassianPullRequestsController.listComments({
					repoSlug: 'some-repo',
					prId: '123',
				} as any),
			).rejects.toThrow();
		}, 10000);
	});

	// Note: addComment test suite has been removed to avoid creating comments on real PRs during tests
});
</file>

<file path="src/controllers/atlassian.pullrequests.controller.ts">
import atlassianPullRequestsService from '../services/vendor.atlassian.pullrequests.service.js';
import { Logger } from '../utils/logger.util.js';
import { createApiError } from '../utils/error.util.js';
import { handleControllerError } from '../utils/error-handler.util.js';
import {
	extractPaginationInfo,
	PaginationType,
} from '../utils/pagination.util.js';
import { ControllerResponse } from '../types/common.types.js';
import {
	ListPullRequestsOptions,
	PullRequestIdentifier,
	ListPullRequestCommentsOptions,
	AddPullRequestCommentOptions,
	CreatePullRequestOptions,
} from './atlassian.pullrequests.types.js';
import {
	formatPullRequestsList,
	formatPullRequestDetails,
	formatPullRequestComments,
} from './atlassian.pullrequests.formatter.js';
import {
	ListPullRequestsParams,
	GetPullRequestParams,
	GetPullRequestCommentsParams,
} from '../services/vendor.atlassian.pullrequests.types.js';
import { formatBitbucketQuery } from '../utils/query.util.js';
import { DEFAULT_PAGE_SIZE, applyDefaults } from '../utils/defaults.util.js';
import { AddPullRequestCommentParams } from '../services/vendor.atlassian.pullrequests.types.js';
import { CreatePullRequestParams } from '../services/vendor.atlassian.pullrequests.types.js';

/**
 * Controller for managing Bitbucket pull requests.
 * Provides functionality for listing pull requests and retrieving pull request details.
 */

// Create a contextualized logger for this file
const controllerLogger = Logger.forContext(
	'controllers/atlassian.pullrequests.controller.ts',
);

// Log controller initialization
controllerLogger.debug('Bitbucket pull requests controller initialized');

/**
 * List Bitbucket pull requests with optional filtering
 * @param options - Options for listing pull requests
 * @param options.workspaceSlug - The workspace slug containing the repository
 * @param options.repoSlug - The repository slug to list pull requests from
 * @param options.state - Pull request state filter
 * @param options.limit - Maximum number of pull requests to return
 * @param options.cursor - Pagination cursor for retrieving the next set of results
 * @returns Promise with formatted pull request list content and pagination information
 */
async function list(
	options: ListPullRequestsOptions,
): Promise<ControllerResponse> {
	const methodLogger = Logger.forContext(
		'controllers/atlassian.pullrequests.controller.ts',
		'list',
	);
	methodLogger.debug('Listing Bitbucket pull requests...', options);

	try {
		if (!options.workspaceSlug || !options.repoSlug) {
			throw createApiError(
				'Both workspaceSlug and repoSlug parameters are required',
			);
		}

		// Create defaults object with proper typing
		const defaults: Partial<ListPullRequestsOptions> = {
			limit: DEFAULT_PAGE_SIZE,
		};

		// Apply defaults
		const mergedOptions = applyDefaults<ListPullRequestsOptions>(
			options,
			defaults,
		);

		// Process the query parameter
		let queryParam: string | undefined;

		// State filter takes precedence over free-text query
		if (mergedOptions.state) {
			queryParam = `state="${mergedOptions.state}"`;
		} else if (mergedOptions.query) {
			// Format the free-text query using the utility function
			queryParam = formatBitbucketQuery(mergedOptions.query, 'title');
		}

		// Map controller filters to service params
		const serviceParams: ListPullRequestsParams = {
			// Required parameters
			workspace: mergedOptions.workspaceSlug,
			repo_slug: mergedOptions.repoSlug,

			// Optional parameters
			...(queryParam && { q: queryParam }),
			pagelen: mergedOptions.limit,
			page: mergedOptions.cursor
				? parseInt(mergedOptions.cursor, 10)
				: undefined,
		};

		methodLogger.debug('Using filters:', serviceParams);

		// Call the service to get the pull requests data
		const pullRequestsData =
			await atlassianPullRequestsService.list(serviceParams);

		// Log the count of pull requests retrieved
		const count = pullRequestsData.values?.length || 0;
		methodLogger.debug(`Retrieved ${count} pull requests`);

		// Extract pagination information using the utility
		const pagination = extractPaginationInfo(
			pullRequestsData,
			PaginationType.PAGE,
		);

		// Format the pull requests data for display using the formatter
		const formattedPullRequests = formatPullRequestsList(pullRequestsData);

		return {
			content: formattedPullRequests,
			pagination,
		};
	} catch (error) {
		// Use the standardized error handler
		handleControllerError(error, {
			entityType: 'Pull Requests',
			operation: 'listing',
			source: 'controllers/atlassian.pullrequests.controller.ts@list',
			additionalInfo: {
				options,
				workspaceSlug: options.workspaceSlug,
				repoSlug: options.repoSlug,
			},
		});
	}
}

/**
 * Get details of a specific Bitbucket pull request, including code changes
 * @param identifier - Object containing pull request identifiers
 * @param identifier.workspaceSlug - The workspace slug containing the repository
 * @param identifier.repoSlug - The repository slug containing the pull request
 * @param identifier.prId - The pull request ID
 * @returns Promise with formatted pull request details content, including code changes
 * @throws Error if pull request retrieval fails
 */
async function get(
	identifier: PullRequestIdentifier,
): Promise<ControllerResponse> {
	const { workspaceSlug, repoSlug, prId } = identifier;
	const methodLogger = Logger.forContext(
		'controllers/atlassian.pullrequests.controller.ts',
		'get',
	);

	methodLogger.debug(
		`Getting pull request details for ${workspaceSlug}/${repoSlug}/${prId}...`,
	);

	try {
		// Set up parameters for API calls
		const params: GetPullRequestParams = {
			workspace: workspaceSlug,
			repo_slug: repoSlug,
			pull_request_id: parseInt(prId, 10),
		};

		// Fetch pull request details, diffstat, and raw diff in parallel for better performance
		const [pullRequestData, diffstatData, rawDiff] = await Promise.all([
			atlassianPullRequestsService.get(params),
			atlassianPullRequestsService.getDiffstat(params).catch((error) => {
				// Log but don't fail if diffstat can't be retrieved
				methodLogger.warn(
					`Failed to retrieve diffstat: ${error.message}`,
				);
				return null;
			}),
			atlassianPullRequestsService.getRawDiff(params).catch((error) => {
				// Log but don't fail if diff can't be retrieved
				methodLogger.warn(
					`Failed to retrieve raw diff: ${error.message}`,
				);
				return null;
			}),
		]);

		methodLogger.debug(`Retrieved pull request: ${pullRequestData.id}`);

		// Format the pull request data with diff information
		const formattedPullRequest = formatPullRequestDetails(
			pullRequestData,
			diffstatData,
			rawDiff,
		);

		return {
			content: formattedPullRequest,
		};
	} catch (error) {
		// Use the standardized error handler
		handleControllerError(error, {
			entityType: 'Pull Request',
			entityId: identifier,
			operation: 'retrieving',
			source: 'controllers/atlassian.pullrequests.controller.ts@get',
		});
	}
}

/**
 * List comments on a specific Bitbucket pull request
 * @param options - Options for listing pull request comments
 * @param options.workspaceSlug - The workspace slug containing the repository
 * @param options.repoSlug - The repository slug containing the pull request
 * @param options.prId - The pull request ID
 * @param options.limit - Maximum number of comments to return
 * @param options.cursor - Pagination cursor for retrieving the next set of results
 * @returns Promise with formatted pull request comments content and pagination information
 */
async function listComments(
	options: ListPullRequestCommentsOptions,
): Promise<ControllerResponse> {
	const methodLogger = Logger.forContext(
		'controllers/atlassian.pullrequests.controller.ts',
		'listComments',
	);
	methodLogger.debug('Listing Bitbucket pull request comments...', options);

	try {
		if (!options.workspaceSlug || !options.repoSlug || !options.prId) {
			throw createApiError(
				'workspaceSlug, repoSlug, and prId parameters are all required',
			);
		}

		// Validate pull request ID
		const prId = parseInt(options.prId, 10);
		if (isNaN(prId) || prId <= 0) {
			throw createApiError('Pull request ID must be a positive integer');
		}

		// Create defaults object with proper typing
		const defaults: Partial<ListPullRequestCommentsOptions> = {
			limit: DEFAULT_PAGE_SIZE,
			sort: '-updated_on',
		};

		// Apply defaults
		const mergedOptions = applyDefaults<ListPullRequestCommentsOptions>(
			options,
			defaults,
		);

		// Map controller options to service params
		const serviceParams: GetPullRequestCommentsParams = {
			workspace: mergedOptions.workspaceSlug,
			repo_slug: mergedOptions.repoSlug,
			pull_request_id: prId,
			pagelen: mergedOptions.limit,
			page: mergedOptions.cursor
				? parseInt(mergedOptions.cursor, 10)
				: undefined,
			sort: mergedOptions.sort,
		};

		methodLogger.debug('Using service parameters:', serviceParams);

		// Call the service to get the pull request comments
		const commentsData =
			await atlassianPullRequestsService.getComments(serviceParams);

		// Log the count of comments retrieved
		const count = commentsData.values?.length || 0;
		methodLogger.debug(`Retrieved ${count} pull request comments`);

		// Extract pagination information using the utility
		const pagination = extractPaginationInfo(
			commentsData,
			PaginationType.PAGE,
		);

		// Format the comments data for display using the formatter
		const formattedComments = formatPullRequestComments(commentsData);

		return {
			content: formattedComments,
			pagination,
		};
	} catch (error) {
		// Use the standardized error handler
		handleControllerError(error, {
			entityType: 'Pull Request Comments',
			operation: 'listing',
			source: 'controllers/atlassian.pullrequests.controller.ts@listComments',
			additionalInfo: {
				options,
				workspaceSlug: options.workspaceSlug,
				repoSlug: options.repoSlug,
				prId: options.prId,
			},
		});
	}
}

/**
 * Add a comment to a specific Bitbucket pull request
 * @param options - Options for adding a comment to a pull request
 * @param options.workspaceSlug - The workspace slug containing the repository
 * @param options.repoSlug - The repository slug containing the pull request
 * @param options.prId - The pull request ID
 * @param options.content - The content of the comment
 * @param options.inline - Optional inline comment location
 * @returns Promise with the result of adding the comment
 */
async function addComment(
	options: AddPullRequestCommentOptions,
): Promise<ControllerResponse> {
	const methodLogger = Logger.forContext(
		'controllers/atlassian.pullrequests.controller.ts',
		'addComment',
	);
	methodLogger.debug('Adding comment to Bitbucket pull request...', options);

	try {
		if (!options.workspaceSlug || !options.repoSlug || !options.prId) {
			throw createApiError(
				'workspaceSlug, repoSlug, and prId parameters are all required',
			);
		}

		if (!options.content) {
			throw createApiError('Comment content is required');
		}

		// Validate pull request ID
		const prId = parseInt(options.prId, 10);
		if (isNaN(prId) || prId <= 0) {
			throw createApiError('Pull request ID must be a positive integer');
		}

		// Map controller options to service params
		const serviceParams: AddPullRequestCommentParams = {
			workspace: options.workspaceSlug,
			repo_slug: options.repoSlug,
			pull_request_id: prId,
			content: {
				raw: options.content,
			},
		};

		// Add inline comment parameters if provided
		if (options.inline && options.inline.path) {
			serviceParams['inline'] = {
				path: options.inline.path,
				to: options.inline.line,
			};
		}

		methodLogger.debug('Using service parameters:', serviceParams);

		// Call the service to add the comment
		const commentData =
			await atlassianPullRequestsService.addComment(serviceParams);

		methodLogger.debug(`Successfully added comment: ${commentData.id}`);

		return {
			content: `Comment added successfully to pull request #${options.prId}.`,
		};
	} catch (error) {
		// Use the standardized error handler
		handleControllerError(error, {
			entityType: 'Pull Request Comment',
			operation: 'adding',
			source: 'controllers/atlassian.pullrequests.controller.ts@addComment',
			additionalInfo: {
				options,
				workspaceSlug: options.workspaceSlug,
				repoSlug: options.repoSlug,
				prId: options.prId,
			},
		});
	}
}

/**
 * Create a new pull request
 * @param options - Options for creating a new pull request
 * @param options.workspaceSlug - Workspace slug containing the repository
 * @param options.repoSlug - Repository slug to create the pull request in
 * @param options.title - Title of the pull request
 * @param options.sourceBranch - Source branch name
 * @param options.destinationBranch - Destination branch name (defaults to the repository's main branch)
 * @param options.description - Optional description for the pull request
 * @param options.closeSourceBranch - Whether to close the source branch after merge
 * @returns Promise with formatted pull request details content
 */
async function create(
	options: CreatePullRequestOptions,
): Promise<ControllerResponse> {
	const methodLogger = Logger.forContext(
		'controllers/atlassian.pullrequests.controller.ts',
		'create',
	);
	methodLogger.debug('Creating new pull request...', options);

	try {
		if (!options.workspaceSlug || !options.repoSlug) {
			throw createApiError(
				'workspaceSlug and repoSlug parameters are required',
			);
		}

		if (!options.title) {
			throw createApiError('Pull request title is required');
		}

		if (!options.sourceBranch) {
			throw createApiError('Source branch is required');
		}

		// The API requires a destination branch, use default if not provided
		const destinationBranch = options.destinationBranch || 'main';

		// Map controller options to service params
		const serviceParams: CreatePullRequestParams = {
			workspace: options.workspaceSlug,
			repo_slug: options.repoSlug,
			title: options.title,
			source: {
				branch: {
					name: options.sourceBranch,
				},
			},
			destination: {
				branch: {
					name: destinationBranch,
				},
			},
		};

		// Add optional parameters if provided
		if (options.description) {
			serviceParams.description = options.description;
		}

		if (options.closeSourceBranch !== undefined) {
			serviceParams.close_source_branch = options.closeSourceBranch;
		}

		// Call the service to create the pull request
		const pullRequest =
			await atlassianPullRequestsService.create(serviceParams);

		// Format the created pull request details for response
		return {
			content: formatPullRequestDetails(pullRequest),
		};
	} catch (error) {
		throw handleControllerError(error, {
			entityType: 'Pull Request',
			operation: 'create',
			source: 'controllers/atlassian.pullrequests.controller.ts',
		});
	}
}

export default {
	list,
	get,
	listComments,
	addComment,
	create,
};
</file>

<file path="src/controllers/atlassian.pullrequests.formatter.ts">
import {
	PullRequest,
	PullRequestsResponse,
	PullRequestCommentsResponse,
	DiffstatResponse,
} from '../services/vendor.atlassian.pullrequests.types.js';
import {
	formatHeading,
	formatBulletList,
	formatUrl,
	formatSeparator,
	formatNumberedList,
	formatDate,
	formatDiff,
} from '../utils/formatter.util.js';

/**
 * Format a list of pull requests for display
 * @param pullRequestsData - Raw pull requests data from the API
 * @returns Formatted string with pull requests information in markdown format
 */
export function formatPullRequestsList(
	pullRequestsData: PullRequestsResponse,
): string {
	const pullRequests = pullRequestsData.values || [];

	if (pullRequests.length === 0) {
		return 'No pull requests found matching your criteria.';
	}

	const lines: string[] = [formatHeading('Bitbucket Pull Requests', 1), ''];

	// Format each pull request with its details
	const formattedList = formatNumberedList(pullRequests, (pr, index) => {
		const itemLines: string[] = [];
		itemLines.push(formatHeading(`#${pr.id}: ${pr.title}`, 2));

		// Prepare the description (truncated if too long)
		let description = 'No description provided';
		if (pr.summary?.raw && pr.summary.raw.trim() !== '') {
			description = pr.summary.raw;
		} else if (
			pr.summary?.markup &&
			pr.summary.markup.trim() !== '' &&
			pr.summary.markup !== 'markdown'
		) {
			description = pr.summary.markup;
		}

		if (description.length > 150) {
			description = description.substring(0, 150) + '...';
		}

		// Basic information
		const properties: Record<string, unknown> = {
			ID: pr.id,
			State: pr.state,
			Author: pr.author?.display_name || pr.author?.nickname || 'Unknown',
			Created: formatDate(new Date(pr.created_on)),
			Updated: formatDate(new Date(pr.updated_on)),
			'Source Branch': pr.source?.branch?.name || 'Unknown',
			'Destination Branch': pr.destination?.branch?.name || 'Unknown',
			Description: description,
			URL: pr.links?.html?.href
				? formatUrl(pr.links.html.href, `PR #${pr.id}`)
				: 'N/A',
		};

		// Format as a bullet list
		itemLines.push(formatBulletList(properties, (key) => key));

		// Add separator between pull requests except for the last one
		if (index < pullRequests.length - 1) {
			itemLines.push('');
			itemLines.push(formatSeparator());
		}

		return itemLines.join('\n');
	});

	lines.push(formattedList);

	// Add timestamp for when this information was retrieved
	lines.push('');
	lines.push(
		`*Pull request information retrieved at ${formatDate(new Date())}*`,
	);

	return lines.join('\n');
}

/**
 * Format detailed pull request information for display
 * @param pullRequest - Raw pull request data from the API
 * @param diffstat - Optional diffstat data from the API
 * @param rawDiff - Optional raw diff content from the API
 * @returns Formatted string with pull request details in markdown format
 */
export function formatPullRequestDetails(
	pullRequest: PullRequest,
	diffstat?: DiffstatResponse | null,
	rawDiff?: string | null,
): string {
	const lines: string[] = [
		formatHeading(
			`Pull Request #${pullRequest.id}: ${pullRequest.title}`,
			1,
		),
		'',
		formatHeading('Basic Information', 2),
	];

	// Format basic information as a bullet list
	const basicProperties: Record<string, unknown> = {
		State: pullRequest.state,
		Repository: pullRequest.destination.repository.full_name,
		Source: pullRequest.source.branch.name,
		Destination: pullRequest.destination.branch.name,
		Author: pullRequest.author?.display_name,
		Created: new Date(pullRequest.created_on),
		Updated: new Date(pullRequest.updated_on),
	};

	lines.push(formatBulletList(basicProperties, (key) => key));

	// Reviewers
	if (pullRequest.reviewers && pullRequest.reviewers.length > 0) {
		lines.push('');
		lines.push(formatHeading('Reviewers', 2));
		const reviewerLines: string[] = [];
		pullRequest.reviewers.forEach((reviewer) => {
			reviewerLines.push(`- ${reviewer.display_name}`);
		});
		lines.push(reviewerLines.join('\n'));
	}

	// Summary or rendered content for description if available
	if (pullRequest.summary?.raw) {
		lines.push('');
		lines.push(formatHeading('Description', 2));
		lines.push(pullRequest.summary.raw);
	} else if (pullRequest.rendered?.description?.raw) {
		lines.push('');
		lines.push(formatHeading('Description', 2));
		lines.push(pullRequest.rendered.description.raw);
	}

	// File Changes Summary from Diffstat
	if (diffstat && diffstat.values && diffstat.values.length > 0) {
		lines.push('');
		lines.push(formatHeading('File Changes', 2));

		// Calculate summary statistics
		const totalFiles = diffstat.values.length;
		let totalAdditions = 0;
		let totalDeletions = 0;

		diffstat.values.forEach((file) => {
			if (file.lines_added) totalAdditions += file.lines_added;
			if (file.lines_removed) totalDeletions += file.lines_removed;
		});

		// Add summary line
		lines.push(
			`${totalFiles} file${totalFiles !== 1 ? 's' : ''} changed with ${totalAdditions} insertion${totalAdditions !== 1 ? 's' : ''} and ${totalDeletions} deletion${totalDeletions !== 1 ? 's' : ''}`,
		);

		// Add file list (limited to 10 files for brevity)
		const maxFilesToShow = 10;
		if (totalFiles > 0) {
			lines.push('');
			diffstat.values.slice(0, maxFilesToShow).forEach((file) => {
				const changes = [];
				if (file.lines_added) changes.push(`+${file.lines_added}`);
				if (file.lines_removed) changes.push(`-${file.lines_removed}`);
				const changeStr =
					changes.length > 0 ? ` (${changes.join(', ')})` : '';
				lines.push(
					`- \`${file.old?.path || file.new?.path}\`${changeStr}`,
				);
			});

			if (totalFiles > maxFilesToShow) {
				lines.push(
					`- ... and ${totalFiles - maxFilesToShow} more files`,
				);
			}
		}
	}

	// Detailed Diff Content
	if (rawDiff) {
		lines.push('');
		lines.push(formatHeading('Code Changes', 2));
		lines.push(formatDiff(rawDiff));
	}

	// Links
	lines.push('');
	lines.push(formatHeading('Links', 2));

	const links: string[] = [];

	if (pullRequest.links.html?.href) {
		links.push(
			`- ${formatUrl(pullRequest.links.html.href, 'View in Browser')}`,
		);
	}
	if (pullRequest.links.commits?.href) {
		links.push(`- ${formatUrl(pullRequest.links.commits.href, 'Commits')}`);
	}
	if (pullRequest.links.comments?.href) {
		links.push(
			`- ${formatUrl(pullRequest.links.comments.href, 'Comments')}`,
		);
	}
	if (pullRequest.links.diff?.href) {
		links.push(`- ${formatUrl(pullRequest.links.diff.href, 'Diff')}`);
	}

	lines.push(links.join('\n'));

	return lines.join('\n');
}

/**
 * Format pull request comments for display
 * @param commentsData - Raw pull request comments data from the API
 * @returns Formatted string with pull request comments in markdown format
 */
export function formatPullRequestComments(
	commentsData: PullRequestCommentsResponse,
): string {
	const lines: string[] = [];

	// Main heading
	const prId = commentsData.pullrequest?.id || '';
	lines.push(formatHeading(`Comments on Pull Request #${prId}`, 1));
	lines.push('');

	if (!commentsData.values || commentsData.values.length === 0) {
		lines.push('*No comments found on this pull request.*');
		return lines.join('\n');
	}

	// Group comments by parent (to handle threads)
	const topLevelComments: PullRequestCommentsResponse['values'] = [];
	const childComments: {
		[parentId: number]: PullRequestCommentsResponse['values'];
	} = {};

	// First pass: organize comments by parent
	commentsData.values.forEach((comment) => {
		if (comment.parent) {
			// This is a reply to another comment
			const parentId = comment.parent.id;
			if (!childComments[parentId]) {
				childComments[parentId] = [];
			}
			childComments[parentId].push(comment);
		} else {
			// This is a top-level comment
			topLevelComments.push(comment);
		}
	});

	// Format each top-level comment and its replies
	topLevelComments.forEach((comment) => {
		formatComment(comment, lines);

		// Add replies if any exist
		const replies = childComments[comment.id] || [];
		if (replies.length > 0) {
			lines.push('');
			lines.push('**Replies:**');

			replies.forEach((reply) => {
				lines.push('');
				lines.push(
					`> **${reply.user.display_name || 'Unknown User'}** (${formatDate(new Date(reply.created_on))})`,
				);
				lines.push(`> ${reply.content.raw.replace(/\n/g, '\n> ')}`);
			});
		}

		lines.push('');
		lines.push(formatSeparator());
	});

	// Add timestamp for when this information was retrieved
	lines.push('');
	lines.push(`*Comment information retrieved at ${formatDate(new Date())}*`);

	return lines.join('\n');
}

/**
 * Helper function to format a single comment
 * @param comment - The comment to format
 * @param lines - Array of string lines to append to
 */
function formatComment(
	comment: PullRequestCommentsResponse['values'][0],
	lines: string[],
): void {
	lines.push(
		formatHeading(
			`Comment by ${comment.user.display_name || 'Unknown User'}`,
			3,
		),
	);
	lines.push(`*Posted on ${formatDate(new Date(comment.created_on))}*`);

	if (comment.updated_on && comment.updated_on !== comment.created_on) {
		lines.push(`*Updated on ${formatDate(new Date(comment.updated_on))}*`);
	}

	// If it's an inline comment, show file and line information
	if (comment.inline) {
		const fileInfo = `File: \`${comment.inline.path}\``;
		let lineInfo = '';

		if (
			comment.inline.from !== undefined &&
			comment.inline.to !== undefined
		) {
			lineInfo = `(changed from line ${comment.inline.from} to line ${comment.inline.to})`;
		} else if (comment.inline.to !== undefined) {
			lineInfo = `(line ${comment.inline.to})`;
		}

		lines.push(`**${fileInfo}** ${lineInfo}`);
	}

	lines.push('');
	lines.push(comment.content.raw || 'No content');

	// Add link to view in browser if available
	if (comment.links?.html?.href) {
		lines.push('');
		lines.push(`[View comment in browser](${comment.links.html.href})`);
	}
}
</file>

<file path="src/controllers/atlassian.pullrequests.types.ts">
import { PaginationOptions, EntityIdentifier } from '../types/common.types.js';

/**
 * Pull request identifier for retrieving specific pull requests
 */
export interface PullRequestIdentifier extends EntityIdentifier {
	/**
	 * The workspace slug
	 */
	workspaceSlug: string;

	/**
	 * The repository slug
	 */
	repoSlug: string;

	/**
	 * The pull request ID
	 */
	prId: string;
}

/**
 * Options for listing Bitbucket pull requests
 */
export interface ListPullRequestsOptions extends PaginationOptions {
	/**
	 * The workspace slug to list pull requests for
	 */
	workspaceSlug: string;

	/**
	 * The repository slug to list pull requests for
	 */
	repoSlug: string;

	/**
	 * Filter by pull request state
	 */
	state?: 'OPEN' | 'MERGED' | 'DECLINED' | 'SUPERSEDED';

	/**
	 * Filter string to search for in pull request title, description, or author
	 */
	query?: string;

	/**
	 * Optional field to sort by (e.g., '-created_on', 'updated_on')
	 */
	sort?: string;
}

/**
 * Options for listing comments on a pull request
 */
export interface ListPullRequestCommentsOptions extends PaginationOptions {
	/**
	 * The workspace slug
	 */
	workspaceSlug: string;

	/**
	 * The repository slug
	 */
	repoSlug: string;

	/**
	 * The pull request ID
	 */
	prId: string;

	/**
	 * Optional field to sort by (e.g., '-created_on', 'updated_on')
	 */
	sort?: string;
}

/**
 * Options for adding a comment to a pull request
 */
export interface AddPullRequestCommentOptions {
	/**
	 * The workspace slug
	 */
	workspaceSlug: string;

	/**
	 * The repository slug
	 */
	repoSlug: string;

	/**
	 * The pull request ID
	 */
	prId: string;

	/**
	 * The content of the comment
	 */
	content: string;

	/**
	 * Optional inline comment location
	 */
	inline?: {
		/**
		 * File path for the inline comment
		 */
		path: string;

		/**
		 * Line number for the inline comment
		 */
		line: number;
	};
}

/**
 * Options for creating a new pull request
 */
export interface CreatePullRequestOptions {
	/**
	 * Workspace slug containing the repository
	 */
	workspaceSlug: string;

	/**
	 * Repository slug to create the pull request in
	 */
	repoSlug: string;

	/**
	 * Title of the pull request
	 */
	title: string;

	/**
	 * Source branch name
	 */
	sourceBranch: string;

	/**
	 * Destination branch name (defaults to the repository's main branch)
	 */
	destinationBranch?: string;

	/**
	 * Optional description for the pull request
	 */
	description?: string;

	/**
	 * Whether to close the source branch after merge
	 */
	closeSourceBranch?: boolean;
}
</file>

<file path="src/controllers/atlassian.repositories.controller.test.ts">
import atlassianRepositoriesController from './atlassian.repositories.controller.js';
import { getAtlassianCredentials } from '../utils/transport.util.js';
import { config } from '../utils/config.util.js';
import { McpError } from '../utils/error.util.js';
import atlassianWorkspacesController from './atlassian.workspaces.controller.js';

describe('Atlassian Repositories Controller', () => {
	// Load configuration and check for credentials before all tests
	beforeAll(() => {
		config.load(); // Ensure config is loaded
		const credentials = getAtlassianCredentials();
		if (!credentials) {
			console.warn(
				'Skipping Atlassian Repositories Controller tests: No credentials available',
			);
		}
	});

	// Helper function to skip tests when credentials are missing
	const skipIfNoCredentials = () => !getAtlassianCredentials();

	describe('list', () => {
		// Helper to get a valid workspace slug for testing
		async function getFirstWorkspaceSlugForController(): Promise<
			string | null
		> {
			if (skipIfNoCredentials()) return null;

			try {
				const listResult = await atlassianWorkspacesController.list({
					limit: 1,
				});

				if (listResult.content === 'No Bitbucket workspaces found.')
					return null;

				// Extract slug from Markdown content
				const slugMatch = listResult.content.match(
					/\*\*Slug\*\*:\s+([^\s\n]+)/,
				);
				return slugMatch ? slugMatch[1] : null;
			} catch (error) {
				console.warn(
					"Could not fetch workspace list for controller 'list' test setup:",
					error,
				);
				return null;
			}
		}

		it('should return a formatted list of repositories in Markdown', async () => {
			if (skipIfNoCredentials()) return;

			const workspaceSlug = await getFirstWorkspaceSlugForController();
			if (!workspaceSlug) {
				console.warn('Skipping test: No workspace slug found.');
				return;
			}

			const result = await atlassianRepositoriesController.list({
				workspaceSlug,
			});

			// Verify the response structure
			expect(result).toHaveProperty('content');
			expect(typeof result.content).toBe('string');
			expect(result).toHaveProperty('pagination');

			// Basic Markdown content checks
			if (result.content !== 'No repositories found in this workspace.') {
				expect(result.content).toMatch(/^# Bitbucket Repositories/m);
				expect(result.content).toContain('**Name**');
				expect(result.content).toContain('**Full Name**');
				expect(result.content).toContain('**Updated**');
			}

			// Verify pagination structure
			expect(result.pagination).toBeDefined();
			expect(result.pagination).toHaveProperty('hasMore');
			expect(typeof result.pagination?.hasMore).toBe('boolean');
			// nextCursor might be undefined if hasMore is false
			if (result.pagination?.hasMore) {
				expect(result.pagination).toHaveProperty('nextCursor');
				expect(typeof result.pagination?.nextCursor).toBe('string');
			}
		}, 30000); // Increased timeout

		it('should handle pagination options (limit/cursor)', async () => {
			if (skipIfNoCredentials()) return;

			const workspaceSlug = await getFirstWorkspaceSlugForController();
			if (!workspaceSlug) {
				console.warn('Skipping test: No workspace slug found.');
				return;
			}

			// Fetch first page with limit 1
			const result1 = await atlassianRepositoriesController.list({
				workspaceSlug,
				limit: 1,
			});

			expect(result1.pagination?.count).toBeLessThanOrEqual(1);

			// If there's a next page, fetch it
			if (result1.pagination?.hasMore && result1.pagination.nextCursor) {
				const result2 = await atlassianRepositoriesController.list({
					workspaceSlug,
					limit: 1,
					cursor: result1.pagination.nextCursor,
				});
				expect(result2.pagination?.count).toBeLessThanOrEqual(1);

				// Ensure content is different (or handle case where only 1 repo exists)
				if (
					result1.content !==
						'No repositories found in this workspace.' &&
					result2.content !==
						'No repositories found in this workspace.' &&
					result1.pagination?.count &&
					result2.pagination?.count &&
					result1.pagination.count > 0 &&
					result2.pagination.count > 0
				) {
					// Only compare if we actually have multiple repositories
					expect(result1.content).not.toEqual(result2.content);
				}
			} else {
				console.warn(
					'Skipping cursor part of pagination test: Only one page of repositories found.',
				);
			}
		}, 30000);

		it('should handle filtering options (query)', async () => {
			if (skipIfNoCredentials()) return;

			const workspaceSlug = await getFirstWorkspaceSlugForController();
			if (!workspaceSlug) {
				console.warn('Skipping test: No workspace slug found.');
				return;
			}

			// First get all repositories to find a valid query term
			const allResult = await atlassianRepositoriesController.list({
				workspaceSlug,
			});

			if (
				allResult.content === 'No repositories found in this workspace.'
			) {
				console.warn('Skipping filtering test: No repositories found.');
				return;
			}

			// Extract a repository name from the first result to use as a query
			const repoNameMatch = allResult.content.match(
				/\*\*Name\*\*:\s+([^\n]+)/,
			);
			if (!repoNameMatch || !repoNameMatch[1]) {
				console.warn(
					'Skipping filtering test: Could not extract repository name.',
				);
				return;
			}

			// Use part of the repo name as a query term
			const queryTerm = repoNameMatch[1].trim().split(' ')[0];

			// Query with the extracted term
			const filteredResult = await atlassianRepositoriesController.list({
				workspaceSlug,
				query: queryTerm,
			});

			// The result should be a valid response
			expect(filteredResult).toHaveProperty('content');
			expect(typeof filteredResult.content).toBe('string');

			// We can't guarantee matches (query might not match anything), but response should be valid
			if (
				filteredResult.content !==
				'No repositories found in this workspace.'
			) {
				expect(filteredResult.content).toMatch(
					/^# Bitbucket Repositories/m,
				);
			}
		}, 30000);

		it('should handle sorting options', async () => {
			if (skipIfNoCredentials()) return;

			const workspaceSlug = await getFirstWorkspaceSlugForController();
			if (!workspaceSlug) {
				console.warn('Skipping test: No workspace slug found.');
				return;
			}

			// Request with explicit sort by name
			const sortedResult = await atlassianRepositoriesController.list({
				workspaceSlug,
				sort: 'name',
			});

			// The result should be a valid response
			expect(sortedResult).toHaveProperty('content');
			expect(typeof sortedResult.content).toBe('string');

			// We can't verify the exact sort order in the Markdown output easily,
			// but we can verify the response is valid
			if (
				sortedResult.content !==
				'No repositories found in this workspace.'
			) {
				expect(sortedResult.content).toMatch(
					/^# Bitbucket Repositories/m,
				);
			}
		}, 30000);

		it('should handle role filtering if supported', async () => {
			if (skipIfNoCredentials()) return;

			const workspaceSlug = await getFirstWorkspaceSlugForController();
			if (!workspaceSlug) {
				console.warn('Skipping test: No workspace slug found.');
				return;
			}

			// Try filtering by role
			try {
				const filteredResult =
					await atlassianRepositoriesController.list({
						workspaceSlug,
						role: 'owner', // Most likely role to have some results
					});

				// The result should be a valid response
				expect(filteredResult).toHaveProperty('content');
				expect(typeof filteredResult.content).toBe('string');

				// We can't guarantee matches, but response should be valid
				if (
					filteredResult.content !==
					'No repositories found in this workspace.'
				) {
					expect(filteredResult.content).toMatch(
						/^# Bitbucket Repositories/m,
					);
				}
			} catch (error) {
				// If role filtering isn't supported, log and continue
				console.warn(
					'Role filtering test encountered an error:',
					error,
				);
			}
		}, 30000);

		it('should handle empty result scenario', async () => {
			if (skipIfNoCredentials()) return;

			const workspaceSlug = await getFirstWorkspaceSlugForController();
			if (!workspaceSlug) {
				console.warn('Skipping test: No workspace slug found.');
				return;
			}

			// Use an extremely unlikely query to get empty results
			const noMatchQuery = 'thisstringwillnotmatchanyrepository12345xyz';

			const emptyResult = await atlassianRepositoriesController.list({
				workspaceSlug,
				query: noMatchQuery,
			});

			// Should return a specific "no results" message
			expect(emptyResult.content).toBe(
				'No repositories found matching your criteria.',
			);
			expect(emptyResult.pagination).toHaveProperty('count', 0);
			expect(emptyResult.pagination).toHaveProperty('hasMore', false);
		}, 30000);

		it('should throw an McpError for an invalid workspace slug', async () => {
			if (skipIfNoCredentials()) return;

			const invalidWorkspaceSlug =
				'this-workspace-definitely-does-not-exist-12345';

			// Expect the controller call to reject with an McpError
			await expect(
				atlassianRepositoriesController.list({
					workspaceSlug: invalidWorkspaceSlug,
				}),
			).rejects.toThrow(McpError);

			// Check the status code via the error handler's behavior
			try {
				await atlassianRepositoriesController.list({
					workspaceSlug: invalidWorkspaceSlug,
				});
			} catch (e) {
				expect(e).toBeInstanceOf(McpError);
				expect((e as McpError).statusCode).toBe(404); // Expecting Not Found
				expect((e as McpError).message).toContain('not found');
			}
		}, 30000);
	});

	describe('get', () => {
		// Helper to get valid repo identifiers for testing
		async function getRepositoryIdentifier(): Promise<{
			workspaceSlug: string;
			repoSlug: string;
		} | null> {
			if (skipIfNoCredentials()) return null;

			try {
				const listWorkspacesResult =
					await atlassianWorkspacesController.list({
						limit: 1,
					});

				if (
					listWorkspacesResult.content ===
					'No Bitbucket workspaces found.'
				) {
					return null;
				}

				// Extract workspace slug
				const workspaceMatch = listWorkspacesResult.content.match(
					/\*\*Slug\*\*:\s+([^\s\n]+)/,
				);
				const workspaceSlug = workspaceMatch ? workspaceMatch[1] : null;

				if (!workspaceSlug) return null;

				// Get a repository from this workspace
				const listReposResult =
					await atlassianRepositoriesController.list({
						workspaceSlug,
						limit: 1,
					});

				if (
					listReposResult.content ===
					'No repositories found in this workspace.'
				) {
					return null;
				}

				// Extract repo slug - this may need adjustment based on actual Markdown format
				const repoSlugMatch = listReposResult.content.match(
					/\*\*Slug\*\*:\s+([^\s\n]+)/,
				);
				const repoSlug = repoSlugMatch ? repoSlugMatch[1] : null;

				if (!repoSlug) return null;

				return { workspaceSlug, repoSlug };
			} catch (error) {
				console.warn(
					'Could not fetch repository identifier for test:',
					error,
				);
				return null;
			}
		}

		it('should return formatted repository details in Markdown', async () => {
			if (skipIfNoCredentials()) return;

			const repoIdentifier = await getRepositoryIdentifier();
			if (!repoIdentifier) {
				console.warn('Skipping test: No repository identifier found.');
				return;
			}

			const result =
				await atlassianRepositoriesController.get(repoIdentifier);

			// Verify the response structure
			expect(result).toHaveProperty('content');
			expect(typeof result.content).toBe('string');
			// get() doesn't have pagination
			expect(result).not.toHaveProperty('pagination');

			// Basic Markdown content checks
			expect(result.content).toMatch(/^# Repository:/m);
			expect(result.content).toContain(
				`**Slug**: ${repoIdentifier.repoSlug}`,
			);
			expect(result.content).toContain('## Basic Information');

			// Should include recent pull requests section regardless of whether PRs exist
			expect(result.content).toContain('## Recent Pull Requests');
		}, 30000);

		it('should throw an McpError for a non-existent repository slug', async () => {
			if (skipIfNoCredentials()) return;

			// First get a valid workspace slug
			const listWorkspacesResult =
				await atlassianWorkspacesController.list({
					limit: 1,
				});

			if (
				listWorkspacesResult.content ===
				'No Bitbucket workspaces found.'
			) {
				console.warn('Skipping test: No workspaces available.');
				return;
			}

			// Extract workspace slug
			const workspaceMatch = listWorkspacesResult.content.match(
				/\*\*Slug\*\*:\s+([^\s\n]+)/,
			);
			const workspaceSlug = workspaceMatch ? workspaceMatch[1] : null;

			if (!workspaceSlug) {
				console.warn(
					'Skipping test: Could not extract workspace slug.',
				);
				return;
			}

			const invalidRepoSlug = 'this-repo-definitely-does-not-exist-12345';

			// Expect the controller call to reject with an McpError
			await expect(
				atlassianRepositoriesController.get({
					workspaceSlug,
					repoSlug: invalidRepoSlug,
				}),
			).rejects.toThrow(McpError);

			// Check the status code via the error handler's behavior
			try {
				await atlassianRepositoriesController.get({
					workspaceSlug,
					repoSlug: invalidRepoSlug,
				});
			} catch (e) {
				expect(e).toBeInstanceOf(McpError);
				expect((e as McpError).statusCode).toBe(404); // Expecting Not Found
				expect((e as McpError).message).toContain('not found');
			}
		}, 30000);

		it('should throw an McpError for a non-existent workspace slug', async () => {
			if (skipIfNoCredentials()) return;

			const invalidWorkspaceSlug =
				'this-workspace-definitely-does-not-exist-12345';
			const someRepoSlug = 'some-repo';

			// Expect the controller call to reject with an McpError
			await expect(
				atlassianRepositoriesController.get({
					workspaceSlug: invalidWorkspaceSlug,
					repoSlug: someRepoSlug,
				}),
			).rejects.toThrow(McpError);

			// Check the status code via the error handler's behavior
			try {
				await atlassianRepositoriesController.get({
					workspaceSlug: invalidWorkspaceSlug,
					repoSlug: someRepoSlug,
				});
			} catch (e) {
				expect(e).toBeInstanceOf(McpError);
				expect((e as McpError).statusCode).toBe(404); // Expecting Not Found
				expect((e as McpError).message).toContain('not found');
			}
		}, 30000);
	});
});
</file>

<file path="src/controllers/atlassian.repositories.controller.ts">
import atlassianRepositoriesService from '../services/vendor.atlassian.repositories.service.js';
import atlassianPullRequestsService from '../services/vendor.atlassian.pullrequests.service.js';
import { Logger } from '../utils/logger.util.js';
import { handleControllerError } from '../utils/error-handler.util.js';
import {
	extractPaginationInfo,
	PaginationType,
} from '../utils/pagination.util.js';
import { ControllerResponse } from '../types/common.types.js';
import {
	ListRepositoriesOptions,
	RepositoryIdentifier,
} from './atlassian.repositories.types.js';
import {
	formatRepositoriesList,
	formatRepositoryDetails,
} from './atlassian.repositories.formatter.js';
import {
	ListRepositoriesParams,
	GetRepositoryParams,
} from '../services/vendor.atlassian.repositories.types.js';
import { formatBitbucketQuery } from '../utils/query.util.js';
import { DEFAULT_PAGE_SIZE, applyDefaults } from '../utils/defaults.util.js';

/**
 * Controller for managing Bitbucket repositories.
 * Provides functionality for listing repositories and retrieving repository details.
 */

// Create a contextualized logger for this file
const controllerLogger = Logger.forContext(
	'controllers/atlassian.repositories.controller.ts',
);

// Log controller initialization
controllerLogger.debug('Bitbucket repositories controller initialized');

/**
 * Lists repositories for a specific workspace with pagination and filtering options
 * @param options - Options for listing repositories including workspaceSlug
 * @returns Formatted list of repositories with pagination information
 */
async function list(
	options: ListRepositoriesOptions,
): Promise<ControllerResponse> {
	const { workspaceSlug } = options;
	const methodLogger = Logger.forContext(
		'controllers/atlassian.repositories.controller.ts',
		'list',
	);

	methodLogger.debug(
		`Listing repositories for workspace: ${workspaceSlug}...`,
		options,
	);

	try {
		// Create defaults object with proper typing
		const defaults: Partial<ListRepositoriesOptions> = {
			limit: DEFAULT_PAGE_SIZE,
			sort: '-updated_on',
		};

		// Apply defaults
		const mergedOptions = applyDefaults<ListRepositoriesOptions>(
			options,
			defaults,
		);

		// Format the query for Bitbucket API if provided
		const formattedQuery = mergedOptions.query
			? formatBitbucketQuery(mergedOptions.query)
			: undefined;

		// Map controller options to service parameters
		const serviceParams: ListRepositoriesParams = {
			// Required workspace
			workspace: workspaceSlug,
			// Handle limit with default value
			pagelen: mergedOptions.limit,
			// Map cursor to page for page-based pagination
			page: mergedOptions.cursor
				? parseInt(mergedOptions.cursor, 10)
				: undefined,
			// Set default sort to updated_on descending if not specified
			sort: mergedOptions.sort,
			// Optional filter parameters
			...(formattedQuery && { q: formattedQuery }),
			...(mergedOptions.role && { role: mergedOptions.role }),
		};

		methodLogger.debug('Using service parameters:', serviceParams);

		const repositoriesData =
			await atlassianRepositoriesService.list(serviceParams);
		// Log only the count of repositories returned instead of the entire response
		methodLogger.debug(
			`Retrieved ${repositoriesData.values?.length || 0} repositories`,
		);

		// Extract pagination information using the utility
		const pagination = extractPaginationInfo(
			repositoriesData,
			PaginationType.PAGE,
		);

		// Format the repositories data for display using the formatter
		const formattedRepositories = formatRepositoriesList(repositoriesData);

		return {
			content: formattedRepositories,
			pagination,
		};
	} catch (error) {
		// Use the standardized error handler
		handleControllerError(error, {
			entityType: 'Repositories',
			operation: 'listing',
			source: 'controllers/atlassian.repositories.controller.ts@list',
			additionalInfo: { options },
		});
	}
}

/**
 * Gets details of a specific Bitbucket repository
 * @param identifier - Repository identifier containing workspaceSlug and repoSlug
 * @returns Formatted repository details
 */
async function get(
	identifier: RepositoryIdentifier,
): Promise<ControllerResponse> {
	const { workspaceSlug, repoSlug } = identifier;
	const methodLogger = Logger.forContext(
		'controllers/atlassian.repositories.controller.ts',
		'get',
	);

	methodLogger.debug(
		`Getting repository details for ${workspaceSlug}/${repoSlug}...`,
	);

	try {
		// Map controller options to service parameters
		const serviceParams: GetRepositoryParams = {
			workspace: workspaceSlug,
			repo_slug: repoSlug,
		};

		methodLogger.debug('Using service parameters:', serviceParams);

		// Fetch repository data
		const repositoryData =
			await atlassianRepositoriesService.get(serviceParams);

		methodLogger.debug(`Retrieved repository: ${repositoryData.full_name}`);

		// Fetch recent pull requests to provide immediate context and activity history.
		// This enhances usability by including relevant PRs directly in repository details,
		// saving users from having to make a separate API call. While this crosses entity
		// boundaries slightly, it significantly improves the user experience by showing
		// recent activity alongside the repository's metadata.
		let recentPullRequests = null;
		try {
			// Create pull request list parameters similar to how the PR controller would
			const pullRequestsParams = {
				workspace: workspaceSlug,
				repo_slug: repoSlug,
				pagelen: DEFAULT_PAGE_SIZE, // Limit to PRs using constant
				sort: '-updated_on', // Sort by most recently updated
				// No state filter to get all PRs regardless of state
			};
			methodLogger.debug(
				'Fetching recent pull requests:',
				pullRequestsParams,
			);
			recentPullRequests =
				await atlassianPullRequestsService.list(pullRequestsParams);
			methodLogger.debug(
				`Retrieved ${recentPullRequests.values?.length || 0} recent pull requests`,
			);
		} catch (prError) {
			methodLogger.warn('Failed to fetch pull requests:', prError);
			// Continue with repository details even if PR fetch fails
		}

		// Format the repository data for display using the formatter
		const formattedRepository = formatRepositoryDetails(
			repositoryData,
			recentPullRequests,
		);

		return {
			content: formattedRepository,
		};
	} catch (error) {
		handleControllerError(error, {
			source: 'controllers/atlassian.repositories.controller.ts@get',
			entityType: 'Repository',
			operation: 'retrieving',
			entityId: { workspaceSlug, repoSlug },
		});
	}
}

export default { list, get };
</file>

<file path="src/controllers/atlassian.repositories.formatter.ts">
import {
	Repository,
	RepositoriesResponse,
} from '../services/vendor.atlassian.repositories.types.js';
import { PullRequestsResponse } from '../services/vendor.atlassian.pullrequests.types.js';
import {
	formatUrl,
	formatHeading,
	formatBulletList,
	formatSeparator,
	formatNumberedList,
	formatDate,
} from '../utils/formatter.util.js';

/**
 * Format a list of repositories for display
 * @param repositoriesData - Raw repositories data from the API
 * @returns Formatted string with repositories information in markdown format
 */
export function formatRepositoriesList(
	repositoriesData: RepositoriesResponse,
): string {
	const repositories = repositoriesData.values || [];

	if (repositories.length === 0) {
		return 'No repositories found matching your criteria.';
	}

	const lines: string[] = [formatHeading('Bitbucket Repositories', 1), ''];

	// Format each repository with its details
	const formattedList = formatNumberedList(repositories, (repo, index) => {
		const itemLines: string[] = [];
		itemLines.push(formatHeading(repo.name, 2));

		// Basic information
		const properties: Record<string, unknown> = {
			Name: repo.name,
			'Full Name': repo.full_name,
			Owner:
				repo.owner?.display_name || repo.owner?.username || 'Unknown',
			Description: repo.description || 'No description provided',
			'Project Key': repo.project?.key || 'N/A',
			Private: repo.is_private ? 'Yes' : 'No',
			Created: repo.created_on
				? formatDate(new Date(repo.created_on))
				: 'N/A',
			Updated: repo.updated_on
				? formatDate(new Date(repo.updated_on))
				: 'N/A',
			URL: repo.links?.html?.href
				? formatUrl(repo.links.html.href, repo.full_name)
				: 'N/A',
		};

		// Format as a bullet list
		itemLines.push(formatBulletList(properties, (key) => key));

		// Add separator between repositories except for the last one
		if (index < repositories.length - 1) {
			itemLines.push('');
			itemLines.push(formatSeparator());
		}

		return itemLines.join('\n');
	});

	lines.push(formattedList);

	// Add timestamp for when this information was retrieved
	lines.push('');
	lines.push(
		`*Repository information retrieved at ${formatDate(new Date())}*`,
	);

	return lines.join('\n');
}

/**
 * Format detailed repository information for display
 * @param repositoryData - Raw repository data from the API
 * @param pullRequestsData - Optional pull requests data for this repository
 * @returns Formatted string with repository details in markdown format
 */
export function formatRepositoryDetails(
	repositoryData: Repository,
	pullRequestsData?: PullRequestsResponse | null,
): string {
	// Create URL
	const repoUrl = repositoryData.links?.html?.href || '';

	const lines: string[] = [
		formatHeading(`Repository: ${repositoryData.name}`, 1),
		'',
		`> A ${repositoryData.is_private ? 'private' : 'public'} repository in the \`${repositoryData.full_name}\` workspace.`,
		'',
		formatHeading('Basic Information', 2),
	];

	// Format basic information as a bullet list
	const basicProperties: Record<string, unknown> = {
		Name: repositoryData.name,
		'Full Name': repositoryData.full_name,
		UUID: repositoryData.uuid,
		Description: repositoryData.description || 'No description provided',
		Language: repositoryData.language || 'Not specified',
		Private: repositoryData.is_private ? 'Yes' : 'No',
		Size: repositoryData.size
			? `${(repositoryData.size / 1024).toFixed(2)} KB`
			: 'Unknown',
		'Created On': repositoryData.created_on
			? formatDate(new Date(repositoryData.created_on))
			: 'N/A',
		'Updated On': repositoryData.updated_on
			? formatDate(new Date(repositoryData.updated_on))
			: 'N/A',
	};

	lines.push(formatBulletList(basicProperties, (key) => key));

	// Owner information
	if (repositoryData.owner) {
		lines.push('');
		lines.push(formatHeading('Owner', 2));

		const ownerProperties: Record<string, unknown> = {
			Name:
				repositoryData.owner.display_name ||
				repositoryData.owner.username ||
				'Unknown',
			Type: repositoryData.owner.type || 'Not specified',
		};

		lines.push(formatBulletList(ownerProperties, (key) => key));
	}

	// Links section
	lines.push('');
	lines.push(formatHeading('Links', 2));

	if (repoUrl) {
		lines.push(`- ${formatUrl(repoUrl, 'Open in Bitbucket')}`);
	}

	// Add recent pull requests section if available
	if (
		pullRequestsData &&
		pullRequestsData.values &&
		pullRequestsData.values.length > 0
	) {
		lines.push('');
		lines.push(formatHeading('Recent Pull Requests', 2));

		const prList = pullRequestsData.values.slice(0, 25); // Ensure max 25
		const formattedPrList = formatNumberedList(prList, (pr) => {
			return `**#${pr.id}**: [${pr.title}](${pr.links.html?.href || '#'}) - ${pr.state} by ${pr.author.display_name || 'Unknown'} (${formatDate(new Date(pr.updated_on))})`;
		});

		lines.push(formattedPrList);
		lines.push('');
		lines.push(`*Showing ${prList.length} recent pull requests.*`);

		if (repoUrl) {
			lines.push(
				`*View all pull requests in Bitbucket: [${repositoryData.full_name}/pull-requests](${repoUrl}/pull-requests)*`,
			);
		}
	}

	// Add timestamp for when this information was retrieved
	lines.push('');
	lines.push(formatSeparator());
	lines.push(
		`*Repository information retrieved at ${formatDate(new Date())}*`,
	);
	lines.push(`*To view this repository in Bitbucket, visit: ${repoUrl}*`);

	return lines.join('\n');
}
</file>

<file path="src/controllers/atlassian.repositories.types.ts">
import { PaginationOptions, EntityIdentifier } from '../types/common.types.js';

/**
 * Options for listing Bitbucket repositories.
 * These options control filtering and pagination of repository listings.
 */
export interface ListRepositoriesOptions extends PaginationOptions {
	/**
	 * The workspace slug to list repositories for.
	 * This is a required parameter for identifying the workspace.
	 */
	workspaceSlug: string;

	/**
	 * Filter repositories by query.
	 * Performs a case-insensitive partial match on repository names and descriptions.
	 */
	query?: string;

	/**
	 * The field to sort repositories by.
	 * Examples: 'name', 'updated_on', 'size'
	 */
	sort?: string;

	/**
	 * Role filter for repository access.
	 * Examples: 'owner', 'admin', 'contributor', 'member'
	 */
	role?: string;
}

/**
 * Repository identifier for retrieving specific repositories.
 * Used as the parameter to get() method.
 */
export interface RepositoryIdentifier extends EntityIdentifier {
	/**
	 * The workspace slug containing the repository.
	 * This identifies the team or account that owns the repository.
	 */
	workspaceSlug: string;

	/**
	 * The repository slug.
	 * This is the unique identifier for the repository within the workspace.
	 */
	repoSlug: string;
}
</file>

<file path="src/controllers/atlassian.search.controller.test.ts">
import atlassianSearchController from './atlassian.search.controller.js';
import { getAtlassianCredentials } from '../utils/transport.util.js';
import { config } from '../utils/config.util.js';
import atlassianRepositoriesController from './atlassian.repositories.controller.js';
import atlassianWorkspacesController from './atlassian.workspaces.controller.js';

describe('Atlassian Search Controller', () => {
	// Load configuration and check for credentials before all tests
	beforeAll(() => {
		config.load(); // Ensure config is loaded
		const credentials = getAtlassianCredentials();
		if (!credentials) {
			console.warn(
				'Skipping Atlassian Search Controller tests: No credentials available',
			);
		}
	});

	// Helper function to skip tests when credentials are missing
	const skipIfNoCredentials = () => !getAtlassianCredentials();

	// Helper to get valid repository information for testing
	async function getRepositoryInfo(): Promise<{
		workspaceSlug: string;
		repoSlug: string;
	} | null> {
		if (skipIfNoCredentials()) return null;

		try {
			// First get a workspace
			const workspacesResult = await atlassianWorkspacesController.list({
				limit: 1,
			});

			if (workspacesResult.content === 'No Bitbucket workspaces found.') {
				return null;
			}

			// Extract workspace slug
			const workspaceMatch = workspacesResult.content.match(
				/\*\*Slug\*\*:\s+([^\s\n]+)/,
			);
			const workspaceSlug = workspaceMatch ? workspaceMatch[1] : null;

			if (!workspaceSlug) return null;

			// Get a repository from this workspace
			const reposResult = await atlassianRepositoriesController.list({
				workspaceSlug,
				limit: 1,
			});

			if (
				reposResult.content ===
				'No repositories found in this workspace.'
			) {
				return null;
			}

			// Extract repo slug
			const repoSlugMatch = reposResult.content.match(
				/\*\*Slug\*\*:\s+([^\s\n]+)/,
			);
			const repoSlug = repoSlugMatch ? repoSlugMatch[1] : null;

			if (!repoSlug) return null;

			return { workspaceSlug, repoSlug };
		} catch (error) {
			console.warn(
				'Could not fetch repository info for search tests:',
				error,
			);
			return null;
		}
	}

	describe('search', () => {
		it('should search across all scopes when scope=all', async () => {
			if (skipIfNoCredentials()) return;

			const repoInfo = await getRepositoryInfo();
			if (!repoInfo) {
				console.warn('Skipping test: No repository info found.');
				return;
			}

			const result = await atlassianSearchController.search({
				workspaceSlug: repoInfo.workspaceSlug,
				repoSlug: repoInfo.repoSlug,
				scope: 'all',
			});

			// Verify the response structure
			expect(result).toHaveProperty('content');
			expect(typeof result.content).toBe('string');
			expect(result).toHaveProperty('pagination');

			// Should include both repository and PR sections
			expect(result.content).toContain('# Repository Search Results');
			expect(result.content).toContain('# Pull Request Search Results');

			// Should have a summary section
			expect(result.content).toContain('## Search Summary');
			expect(result.content).toContain(`Found `);
			expect(result.content).toContain(
				`in workspace "${repoInfo.workspaceSlug}"`,
			);
		}, 30000);

		it('should search only repositories when scope=repositories', async () => {
			if (skipIfNoCredentials()) return;

			const repoInfo = await getRepositoryInfo();
			if (!repoInfo) {
				console.warn('Skipping test: No repository info found.');
				return;
			}

			const result = await atlassianSearchController.search({
				workspaceSlug: repoInfo.workspaceSlug,
				scope: 'repositories',
			});

			// Verify the response structure
			expect(result).toHaveProperty('content');
			expect(typeof result.content).toBe('string');
			expect(result).toHaveProperty('pagination');

			// Should include only repository section
			expect(result.content).toContain('# Repository Search Results');
			expect(result.content).not.toContain(
				'# Pull Request Search Results',
			);

			// Should have a summary section
			expect(result.content).toContain('## Search Summary');
		}, 30000);

		it('should search only pull requests when scope=pullrequests', async () => {
			if (skipIfNoCredentials()) return;

			const repoInfo = await getRepositoryInfo();
			if (!repoInfo) {
				console.warn('Skipping test: No repository info found.');
				return;
			}

			const result = await atlassianSearchController.search({
				workspaceSlug: repoInfo.workspaceSlug,
				repoSlug: repoInfo.repoSlug,
				scope: 'pullrequests',
			});

			// Verify the response structure
			expect(result).toHaveProperty('content');
			expect(typeof result.content).toBe('string');
			expect(result).toHaveProperty('pagination');

			// Should include only PR section
			expect(result.content).not.toContain('# Repository Search Results');
			expect(result.content).toContain('# Pull Request Search Results');

			// Should have a summary section
			expect(result.content).toContain('## Search Summary');
		}, 30000);

		it('should filter results with query parameter', async () => {
			if (skipIfNoCredentials()) return;

			const repoInfo = await getRepositoryInfo();
			if (!repoInfo) {
				console.warn('Skipping test: No repository info found.');
				return;
			}

			// Use a query that might match something (repository name itself often works)
			const result = await atlassianSearchController.search({
				workspaceSlug: repoInfo.workspaceSlug,
				query: repoInfo.repoSlug,
				scope: 'repositories',
			});

			// Verify the response structure
			expect(result).toHaveProperty('content');
			expect(typeof result.content).toBe('string');

			// Should mention the query in the summary
			expect(result.content).toContain(
				`for query "${repoInfo.repoSlug}"`,
			);

			// If results are found, content should include the query term
			if (result.pagination?.count && result.pagination.count > 0) {
				expect(result.content.toLowerCase()).toContain(
					repoInfo.repoSlug.toLowerCase(),
				);
			}
		}, 30000);

		it('should handle pagination options (limit/cursor)', async () => {
			if (skipIfNoCredentials()) return;

			const repoInfo = await getRepositoryInfo();
			if (!repoInfo) {
				console.warn('Skipping test: No repository info found.');
				return;
			}

			// Fetch first page with limit 1
			const result1 = await atlassianSearchController.search({
				workspaceSlug: repoInfo.workspaceSlug,
				scope: 'repositories',
				limit: 1,
			});

			// If pagination is possible, test cursor-based pagination
			if (result1.pagination?.hasMore && result1.pagination.nextCursor) {
				const result2 = await atlassianSearchController.search({
					workspaceSlug: repoInfo.workspaceSlug,
					scope: 'repositories',
					limit: 1,
					cursor: result1.pagination.nextCursor,
				});

				// Both responses should have proper structure
				expect(result2).toHaveProperty('content');
				expect(result2).toHaveProperty('pagination');

				// The content should be different
				expect(result1.content).not.toEqual(result2.content);
			} else {
				console.warn(
					'Skipping cursor part of pagination test: Either no second page available or no items found.',
				);
			}
		}, 30000);

		it('should throw an McpError for missing workspaceSlug', async () => {
			if (skipIfNoCredentials()) return;

			// Expect the controller call to reject due to missing workspaceSlug
			await expect(
				atlassianSearchController.search({
					scope: 'repositories',
				}),
			).rejects.toThrow(/workspaceSlug is required/i);
		}, 10000);

		it('should work without a repoSlug when scope=repositories', async () => {
			if (skipIfNoCredentials()) return;

			const repoInfo = await getRepositoryInfo();
			if (!repoInfo) {
				console.warn('Skipping test: No repository info found.');
				return;
			}

			// Should not throw an error when repoSlug is missing but scope is repositories
			const result = await atlassianSearchController.search({
				workspaceSlug: repoInfo.workspaceSlug,
				scope: 'repositories',
			});

			// Verify the response structure
			expect(result).toHaveProperty('content');
			expect(typeof result.content).toBe('string');
			expect(result).toHaveProperty('pagination');
		}, 30000);

		it('should require repoSlug when scope=pullrequests', async () => {
			if (skipIfNoCredentials()) return;

			const repoInfo = await getRepositoryInfo();
			if (!repoInfo) {
				console.warn('Skipping test: No repository info found.');
				return;
			}

			// When searching pull requests, requesting without a repoSlug should
			// still work (not throw) but PR section will be empty
			const result = await atlassianSearchController.search({
				workspaceSlug: repoInfo.workspaceSlug,
				scope: 'pullrequests',
				// Intentionally omit repoSlug
			});

			// Content should not include PR section (since repoSlug is missing)
			expect(result.content).not.toContain(
				'# Pull Request Search Results',
			);
		}, 10000);

		it('should handle no results scenario', async () => {
			if (skipIfNoCredentials()) return;

			const repoInfo = await getRepositoryInfo();
			if (!repoInfo) {
				console.warn('Skipping test: No repository info found.');
				return;
			}

			// Use a query string that will definitely not match anything
			const noMatchQuery = 'xzqwxtrv12345xyz987nonexistentstring';

			const result = await atlassianSearchController.search({
				workspaceSlug: repoInfo.workspaceSlug,
				query: noMatchQuery,
				scope: 'all',
				repoSlug: repoInfo.repoSlug,
			});

			// Verify the response structure
			expect(result).toHaveProperty('content');
			expect(typeof result.content).toBe('string');
			expect(result).toHaveProperty('pagination');

			// Content should show no results
			expect(result.content).toContain('Found 0 results');
			expect(result.pagination?.count).toBe(0);
			expect(result.pagination?.hasMore).toBe(false);
		}, 30000);

		it('should handle errors in underlying controllers', async () => {
			if (skipIfNoCredentials()) return;

			const invalidWorkspace =
				'this-workspace-definitely-does-not-exist-12345';

			// Expect the controller call to reject when underlying controllers fail
			await expect(
				atlassianSearchController.search({
					workspaceSlug: invalidWorkspace,
					scope: 'repositories',
				}),
			).rejects.toThrow();
		}, 30000);
	});
});
</file>

<file path="src/controllers/atlassian.search.controller.ts">
import { Logger } from '../utils/logger.util.js';
import { handleControllerError } from '../utils/error-handler.util.js';
import { applyDefaults, DEFAULT_PAGE_SIZE } from '../utils/defaults.util.js';
import {
	ControllerResponse,
	ResponsePagination,
} from '../types/common.types.js';

import atlassianRepositoriesController from './atlassian.repositories.controller.js';
import atlassianPullRequestsController from './atlassian.pullrequests.controller.js';
import {
	formatCodeSearchResults,
	formatCommitsResults,
} from './atlassian.search.formatter.js';
import atlassianSearchService from '../services/vendor.atlassian.search.service.js';

const controllerLogger = Logger.forContext(
	'controllers/atlassian.search.controller.ts',
);

/**
 * Search options interface
 * Defines the parameters for searching Bitbucket content
 */
export interface SearchOptions {
	workspaceSlug?: string;
	repoSlug?: string;
	query?: string;
	scope?: 'repositories' | 'pullrequests' | 'commits' | 'code' | 'all';
	limit?: number;
	cursor?: string;
	page?: number;
	pageLen?: number;
}

/**
 * Search for code in repositories
 *
 * @param options Options for code search
 * @returns Promise with formatted code search results
 */
async function searchCode(
	options: SearchOptions = {},
): Promise<ControllerResponse> {
	const methodLogger = controllerLogger.forMethod('searchCode');
	methodLogger.debug('Searching code with options:', options);

	try {
		// Validate required parameters
		if (!options.workspaceSlug) {
			throw new Error('workspaceSlug is required for code search');
		}

		if (!options.query) {
			throw new Error('query is required for code search');
		}

		// Apply defaults
		const mergedOptions = applyDefaults<SearchOptions>(options, {
			page: 1,
			pageLen: options.limit || DEFAULT_PAGE_SIZE,
		});

		// Call the code search service
		const response = await atlassianSearchService.searchCode({
			workspaceSlug: mergedOptions.workspaceSlug as string,
			searchQuery: mergedOptions.query || '',
			repoSlug: mergedOptions.repoSlug,
			page: mergedOptions.page,
			pageLen: mergedOptions.pageLen,
			// Add fields to get repository information for better display
			fields: '+values.file.commit.repository',
		});

		// Format the results into markdown
		const content = formatCodeSearchResults(response);

		// Create pagination information
		const pagination: ResponsePagination = {
			count: response.size || 0,
			hasMore: response.page * response.pagelen < response.size,
			// For cursor-based pagination, use the page number as the cursor
			nextCursor:
				response.page * response.pagelen < response.size
					? (response.page + 1).toString()
					: undefined,
		};

		methodLogger.debug('Successfully retrieved code search results', {
			count: response.size,
			hasMore: pagination.hasMore,
		});

		return {
			content,
			pagination,
		};
	} catch (error) {
		return handleControllerError(error, {
			source: 'Bitbucket',
			operation: 'searchCode',
			entityType: 'code',
			entityId: options.workspaceSlug,
		});
	}
}

/**
 * Search for commits in a repository
 *
 * @param options Options for commit search
 * @returns Promise with formatted commit search results
 */
async function searchCommits(
	options: SearchOptions = {},
): Promise<ControllerResponse> {
	const methodLogger = controllerLogger.forMethod('searchCommits');
	methodLogger.debug('Searching commits with options:', options);

	try {
		// Validate required parameters
		if (!options.workspaceSlug) {
			throw new Error('workspaceSlug is required for commit search');
		}

		if (!options.repoSlug) {
			throw new Error('repoSlug is required for commit search');
		}

		// Apply defaults
		const mergedOptions = applyDefaults<SearchOptions>(options, {
			page: 1,
			pageLen: options.limit || DEFAULT_PAGE_SIZE,
		});

		// Call the commits search service
		const response = await atlassianSearchService.searchCommits({
			workspaceSlug: mergedOptions.workspaceSlug as string,
			repoSlug: mergedOptions.repoSlug as string,
			searchQuery: mergedOptions.query || '',
			page: mergedOptions.page,
			pageLen: mergedOptions.pageLen,
			// Add fields to get repository information for better display
			fields: '',
		});

		// Format the results into markdown
		const content = formatCommitsResults(
			response,
			mergedOptions.repoSlug as string,
			mergedOptions.workspaceSlug as string,
		);

		// Create pagination information
		const pagination: ResponsePagination = {
			count: response.size || response.values?.length || 0,
			hasMore: response.page * response.pagelen < response.size,
			// For cursor-based pagination, use the page number as the cursor
			nextCursor:
				response.page * response.pagelen < response.size
					? (response.page + 1).toString()
					: undefined,
		};

		methodLogger.debug('Successfully retrieved commit search results', {
			count: pagination.count,
			hasMore: pagination.hasMore,
		});

		return {
			content,
			pagination,
		};
	} catch (error) {
		return handleControllerError(error, {
			source: 'Bitbucket',
			operation: 'searchCommits',
			entityType: 'commits',
			entityId: `${options.workspaceSlug}/${options.repoSlug}`,
		});
	}
}

/**
 * Search for Bitbucket content across repositories and pull requests
 *
 * @param {SearchOptions} options - Options for the search
 * @returns {Promise<ControllerResponse>} Formatted search results in Markdown
 */
async function search(
	options: SearchOptions = {},
): Promise<ControllerResponse> {
	const methodLogger = controllerLogger.forMethod('search');
	methodLogger.debug('Searching Bitbucket content with options:', options);

	try {
		// Validate required parameters
		if (!options.workspaceSlug) {
			throw new Error('workspaceSlug is required for Bitbucket search');
		}

		// Apply defaults to options
		const mergedOptions = applyDefaults<SearchOptions>(options, {
			limit: DEFAULT_PAGE_SIZE,
			scope: 'all',
			query: '',
		});

		// Determine what to search based on the scope
		const scope = mergedOptions.scope || 'all';
		const workspaceSlug = mergedOptions.workspaceSlug as string;
		const query = mergedOptions.query || '';

		// If scope is code, use the code search handler
		if (scope === 'code') {
			return searchCode(mergedOptions);
		}

		// If scope is commits, use the commits search handler
		if (scope === 'commits') {
			// Commits search requires a repository slug
			if (!mergedOptions.repoSlug) {
				throw new Error('repoSlug is required for commits search');
			}
			return searchCommits(mergedOptions);
		}

		let repoResults: ControllerResponse = {
			content: '',
			pagination: { count: 0, hasMore: false },
		};
		let prResults: ControllerResponse = {
			content: '',
			pagination: { count: 0, hasMore: false },
		};

		// Search repositories if scope is 'all' or 'repositories'
		if (scope === 'all' || scope === 'repositories') {
			repoResults = await atlassianRepositoriesController.list({
				workspaceSlug,
				query,
				limit: mergedOptions.limit,
				cursor: mergedOptions.cursor,
			});
		}

		// Search pull requests if scope is 'all' or 'pullrequests' and a repository slug is provided
		if (
			(scope === 'all' || scope === 'pullrequests') &&
			mergedOptions.repoSlug
		) {
			prResults = await atlassianPullRequestsController.list({
				workspaceSlug,
				repoSlug: mergedOptions.repoSlug,
				query,
				limit: mergedOptions.limit,
				cursor: mergedOptions.cursor,
			});
		}

		// Combine results with headers
		let combinedContent = '';
		let totalCount = 0;
		let hasMore = false;

		if (scope === 'all' || scope === 'repositories') {
			combinedContent += `# Repository Search Results\n\n${repoResults.content}\n\n`;
			totalCount += repoResults.pagination?.count || 0;
			hasMore = hasMore || repoResults.pagination?.hasMore || false;
		}

		if (
			(scope === 'all' || scope === 'pullrequests') &&
			mergedOptions.repoSlug
		) {
			combinedContent += `# Pull Request Search Results\n\n${prResults.content}\n\n`;
			totalCount += prResults.pagination?.count || 0;
			hasMore = hasMore || prResults.pagination?.hasMore || false;
		}

		// Add a summary at the top
		const summaryContent = `## Search Summary\n\nFound ${totalCount} results for query "${query}" in workspace "${workspaceSlug}".\n\n${combinedContent}`;

		// Create pagination response
		const pagination: ResponsePagination = {
			count: totalCount,
			hasMore,
			// We don't have a proper way to combine cursors from both sources,
			// so we just use one of them if available (not ideal but functional)
			nextCursor:
				(repoResults.pagination as ResponsePagination | undefined)
					?.nextCursor ||
				(prResults.pagination as ResponsePagination | undefined)
					?.nextCursor,
		};

		methodLogger.debug(
			'Successfully retrieved and formatted search results',
			{ totalCount, hasMore },
		);

		return {
			content: summaryContent,
			pagination,
		};
	} catch (error) {
		return handleControllerError(error, {
			source: 'Bitbucket',
			operation: 'search',
			entityType: 'content',
			entityId: options.workspaceSlug,
		});
	}
}

export default {
	search,
	searchCode,
	searchCommits,
};
</file>

<file path="src/controllers/atlassian.search.formatter.ts">
import {
	CodeSearchResponse,
	CodeSearchResult,
	CommitsResponse,
	CommitResult,
} from '../services/vendor.atlassian.search.service.js';
import { formatDate } from '../utils/formatter.util.js';

/**
 * Format a single code search result into markdown
 *
 * @param result The code search result to format
 * @returns Formatted markdown string
 */
function formatCodeSearchResult(result: CodeSearchResult): string {
	// Format the file path with matches highlighted
	const pathFormatted = result.path_matches
		.map((part) => (part.match ? `**${part.text}**` : part.text))
		.join('');

	// Build markdown output
	let markdown = `### [${pathFormatted}](${result.file.links.self.href})\n\n`;

	// Add match summary
	markdown += `${result.content_match_count} ${
		result.content_match_count === 1 ? 'match' : 'matches'
	} found\n\n`;

	// Add code blocks with matched content
	markdown += '```\n';

	// Process each content match
	result.content_matches.forEach((contentMatch) => {
		// Process each line in the content match
		contentMatch.lines.forEach((line) => {
			// Add line number
			markdown += `${line.line}: `;

			// Process segments (some may be highlighted matches)
			if (line.segments.length) {
				line.segments.forEach((segment) => {
					// In a code block we can't use bold, so use a different
					// representation for matches (e.g., adding >>> <<< around matches)
					markdown += segment.match
						? `>>>${segment.text}<<<`
						: segment.text;
				});
			}

			markdown += '\n';
		});

		markdown += '\n';
	});

	markdown += '```\n\n';

	return markdown;
}

/**
 * Format code search results into markdown
 *
 * @param response The code search response from the API
 * @returns Markdown formatted string of code search results
 */
export function formatCodeSearchResults(response: CodeSearchResponse): string {
	if (!response.values || response.values.length === 0) {
		return '**No code matches found.**\n\n';
	}

	// Start with a summary
	let markdown = `## Code Search Results\n\nFound ${response.size} matches for the code search query.\n\n`;

	// Format each result
	response.values.forEach((result) => {
		markdown += formatCodeSearchResult(result);
	});

	return markdown;
}

/**
 * Format a single commit result into markdown
 *
 * @param commit The commit result to format
 * @returns Formatted markdown string
 */
function formatCommitResult(commit: CommitResult): string {
	let markdown = '';

	// Format commit hash and message as heading
	const shortHash = commit.hash.substring(0, 7);
	markdown += `### [${shortHash}: ${commit.message.split('\n')[0]}](${commit.links.html.href})\n\n`;

	// Add commit details
	markdown += `**Author**: ${commit.author.user?.display_name || commit.author.raw}\n`;
	markdown += `**Date**: ${formatDate(commit.date)}\n`;

	// Add repository info if available
	if (commit.repository) {
		markdown += `**Repository**: [${commit.repository.name}](${commit.repository.links.html.href})\n`;
	}

	// Add full hash
	markdown += `**Full Hash**: \`${commit.hash}\`\n\n`;

	// Add commit message if it has more than one line
	const messageLines = commit.message.split('\n');
	if (messageLines.length > 1) {
		markdown += '**Full Message**:\n```\n';
		markdown += commit.message;
		markdown += '\n```\n\n';
	}

	return markdown;
}

/**
 * Format commits search results into markdown
 *
 * @param response The commits response from the API
 * @param repoSlug The repository slug
 * @param workspaceSlug The workspace slug
 * @returns Markdown formatted string of commits search results
 */
export function formatCommitsResults(
	response: CommitsResponse,
	repoSlug: string,
	workspaceSlug: string,
): string {
	if (!response.values || response.values.length === 0) {
		return '**No commits found matching your query.**\n\n';
	}

	// Count the number of commits
	const commitCount = response.values.length;

	// Start with a header and summary
	let markdown = `# Commits in ${workspaceSlug}/${repoSlug}\n\n`;
	markdown += `## Search Results\n\nFound ${commitCount} commits matching your query.\n\n`;

	// Format each result
	response.values.forEach((commit) => {
		markdown += formatCommitResult(commit);
		markdown += '---\n\n';
	});

	return markdown;
}

export default {
	formatCodeSearchResults,
	formatCommitsResults,
};
</file>

<file path="src/controllers/atlassian.workspaces.controller.test.ts">
import atlassianWorkspacesController from './atlassian.workspaces.controller.js';
import { getAtlassianCredentials } from '../utils/transport.util.js';
import { config } from '../utils/config.util.js';
import { McpError } from '../utils/error.util.js';

describe('Atlassian Workspaces Controller', () => {
	// Load configuration and check for credentials before all tests
	beforeAll(() => {
		config.load(); // Ensure config is loaded
		const credentials = getAtlassianCredentials();
		if (!credentials) {
			console.warn(
				'Skipping Atlassian Workspaces Controller tests: No credentials available',
			);
		}
	});

	// Helper function to skip tests when credentials are missing
	const skipIfNoCredentials = () => !getAtlassianCredentials();

	describe('list', () => {
		it('should return a formatted list of workspaces in Markdown', async () => {
			if (skipIfNoCredentials()) return;

			const result = await atlassianWorkspacesController.list({});

			// Verify the response structure
			expect(result).toHaveProperty('content');
			expect(typeof result.content).toBe('string');
			expect(result).toHaveProperty('pagination');

			// Basic Markdown content checks
			if (result.content !== 'No Bitbucket workspaces found.') {
				expect(result.content).toMatch(/^# Bitbucket Workspaces/m);
				expect(result.content).toContain('**UUID**');
				expect(result.content).toContain('**Slug**');
				expect(result.content).toContain('**Permission Level**');
			}

			// Verify pagination structure
			expect(result.pagination).toBeDefined();
			expect(result.pagination).toHaveProperty('hasMore');
			expect(typeof result.pagination?.hasMore).toBe('boolean');
			// nextCursor might be undefined if hasMore is false
			if (result.pagination?.hasMore) {
				expect(result.pagination).toHaveProperty('nextCursor');
				expect(typeof result.pagination?.nextCursor).toBe('string');
			}
		}, 30000); // Increased timeout

		it('should handle pagination options (limit/cursor)', async () => {
			if (skipIfNoCredentials()) return;

			// Fetch first page
			const result1 = await atlassianWorkspacesController.list({
				limit: 1,
			});

			expect(result1.pagination?.count).toBeLessThanOrEqual(1);

			// If there's a next page, fetch it
			if (result1.pagination?.hasMore && result1.pagination.nextCursor) {
				const result2 = await atlassianWorkspacesController.list({
					limit: 1,
					cursor: result1.pagination.nextCursor,
				});
				expect(result2.pagination?.count).toBeLessThanOrEqual(1);
				// Ensure content is different (or handle case where only 1 item exists)
				if (
					result1.content !== 'No Bitbucket workspaces found.' &&
					result2.content !== 'No Bitbucket workspaces found.'
				) {
					// Only compare if we actually have multiple workspaces
					expect(result1.content).not.toEqual(result2.content);
				}
			} else {
				console.warn(
					'Skipping cursor part of pagination test: Only one page of workspaces found.',
				);
			}
		}, 30000);
	});

	describe('get', () => {
		// Helper to get a valid slug for testing 'get'
		async function getFirstWorkspaceSlugForController(): Promise<
			string | null
		> {
			if (skipIfNoCredentials()) return null;
			try {
				const listResult = await atlassianWorkspacesController.list({
					limit: 1,
				});
				if (listResult.content === 'No Bitbucket workspaces found.')
					return null;
				// Extract slug from Markdown content
				const slugMatch = listResult.content.match(
					/\*\*Slug\*\*:\s+([^\s\n]+)/,
				);
				return slugMatch ? slugMatch[1] : null;
			} catch (error) {
				console.warn(
					"Could not fetch workspace list for controller 'get' test setup:",
					error,
				);
				return null;
			}
		}

		it('should return formatted details for a valid workspace slug in Markdown', async () => {
			const workspaceSlug = await getFirstWorkspaceSlugForController();
			if (!workspaceSlug) {
				console.warn(
					'Skipping controller get test: No workspace slug found.',
				);
				return;
			}

			const result = await atlassianWorkspacesController.get({
				workspaceSlug,
			});

			// Verify the ControllerResponse structure
			expect(result).toHaveProperty('content');
			expect(typeof result.content).toBe('string');
			expect(result).not.toHaveProperty('pagination'); // 'get' shouldn't have pagination

			// Verify Markdown content
			expect(result.content).toMatch(/^# Workspace:/m);
			expect(result.content).toContain(`**Slug**: ${workspaceSlug}`);
			expect(result.content).toContain('## Basic Information');
			expect(result.content).toContain('## Links');
		}, 30000);

		it('should throw McpError for an invalid workspace slug', async () => {
			if (skipIfNoCredentials()) return;

			const invalidSlug = 'this-slug-definitely-does-not-exist-12345';

			// Expect the controller call to reject with an McpError
			await expect(
				atlassianWorkspacesController.get({
					workspaceSlug: invalidSlug,
				}),
			).rejects.toThrow(McpError);

			// Optionally check the status code via the error handler's behavior
			try {
				await atlassianWorkspacesController.get({
					workspaceSlug: invalidSlug,
				});
			} catch (e) {
				expect(e).toBeInstanceOf(McpError);
				// The controller error handler wraps the service error
				expect((e as McpError).statusCode).toBe(404); // Expecting Not Found
				expect((e as McpError).message).toContain('not found');
			}
		}, 30000);
	});
});
</file>

<file path="src/controllers/atlassian.workspaces.controller.ts">
import atlassianWorkspacesService from '../services/vendor.atlassian.workspaces.service.js';
import { Logger } from '../utils/logger.util.js';
import { handleControllerError } from '../utils/error-handler.util.js';
import {
	extractPaginationInfo,
	PaginationType,
} from '../utils/pagination.util.js';
import { ControllerResponse } from '../types/common.types.js';
import {
	ListWorkspacesOptions,
	GetWorkspaceOptions,
	WorkspaceIdentifier,
} from './atlassian.workspaces.types.js';
import {
	formatWorkspacesList,
	formatWorkspaceDetails,
} from './atlassian.workspaces.formatter.js';
import { ListWorkspacesParams } from '../services/vendor.atlassian.workspaces.types.js';
import { DEFAULT_PAGE_SIZE, applyDefaults } from '../utils/defaults.util.js';

// Create a contextualized logger for this file
const controllerLogger = Logger.forContext(
	'controllers/atlassian.workspaces.controller.ts',
);

// Log controller initialization
controllerLogger.debug('Bitbucket workspaces controller initialized');

/**
 * Controller for managing Bitbucket workspaces.
 * Provides functionality for listing workspaces and retrieving workspace details.
 */

/**
 * List Bitbucket workspaces with optional filtering
 * @param options - Options for listing workspaces
 * @param options.limit - Maximum number of workspaces to return
 * @param options.cursor - Pagination cursor for retrieving the next set of results
 * @returns Promise with formatted workspace list content and pagination information
 */
async function list(
	options: ListWorkspacesOptions,
): Promise<ControllerResponse> {
	const methodLogger = Logger.forContext(
		'controllers/atlassian.workspaces.controller.ts',
		'list',
	);
	methodLogger.debug('Listing Bitbucket workspaces...', options);

	try {
		// Create defaults object with proper typing
		const defaults: Partial<ListWorkspacesOptions> = {
			limit: DEFAULT_PAGE_SIZE,
		};

		// Apply defaults
		const mergedOptions = applyDefaults<ListWorkspacesOptions>(
			options,
			defaults,
		);

		// Map controller filters to service params
		const serviceParams: ListWorkspacesParams = {
			pagelen: mergedOptions.limit, // Default page length
			page: mergedOptions.cursor
				? parseInt(mergedOptions.cursor, 10)
				: undefined, // Use cursor value for page
			// NOTE: Sort parameter is not included as the Bitbucket API's /2.0/user/permissions/workspaces
			// endpoint does not support sorting on any field
		};

		methodLogger.debug('Using filters:', serviceParams);

		const workspacesData =
			await atlassianWorkspacesService.list(serviceParams);

		methodLogger.debug(
			`Retrieved ${workspacesData.values?.length || 0} workspaces`,
		);

		// Extract pagination information using the utility
		const pagination = extractPaginationInfo(
			workspacesData,
			PaginationType.PAGE,
		);

		// Format the workspaces data for display using the formatter
		const formattedWorkspaces = formatWorkspacesList(workspacesData);

		return {
			content: formattedWorkspaces,
			pagination,
		};
	} catch (error) {
		// Use the standardized error handler
		handleControllerError(error, {
			entityType: 'Workspaces',
			operation: 'listing',
			source: 'controllers/atlassian.workspaces.controller.ts@list',
			additionalInfo: { options },
		});
	}
}

/**
 * Get details of a specific Bitbucket workspace
 * @param identifier - Object containing the workspace slug
 * @param identifier.workspaceSlug - The slug of the workspace to retrieve
 * @param options - Options for retrieving the workspace (not currently used)
 * @returns Promise with formatted workspace details content
 * @throws Error if workspace retrieval fails
 */
async function get(
	identifier: WorkspaceIdentifier,
	options: GetWorkspaceOptions = {},
): Promise<ControllerResponse> {
	const { workspaceSlug } = identifier;
	const methodLogger = Logger.forContext(
		'controllers/atlassian.workspaces.controller.ts',
		'get',
	);

	methodLogger.debug(
		`Getting Bitbucket workspace with slug: ${workspaceSlug}...`,
	);

	try {
		const workspaceData =
			await atlassianWorkspacesService.get(workspaceSlug);
		methodLogger.debug(`Retrieved workspace: ${workspaceData.slug}`);

		// Since membership info isn't directly available, we'll use the workspace data only
		methodLogger.debug(
			'Membership info not available, using workspace data only',
		);

		// Format the workspace data for display using the formatter
		const formattedWorkspace = formatWorkspaceDetails(
			workspaceData,
			undefined, // Pass undefined instead of membership data
		);

		return {
			content: formattedWorkspace,
		};
	} catch (error) {
		// Use the standardized error handler
		handleControllerError(error, {
			entityType: 'Workspace',
			operation: 'retrieving',
			source: 'controllers/atlassian.workspaces.controller.ts@get',
			additionalInfo: { options },
		});
	}
}

export default { list, get };
</file>

<file path="src/controllers/atlassian.workspaces.formatter.ts">
import {
	WorkspaceDetailed,
	WorkspacePermissionsResponse,
	WorkspaceMembership,
} from '../services/vendor.atlassian.workspaces.types.js';
import {
	formatUrl,
	formatHeading,
	formatBulletList,
	formatSeparator,
	formatNumberedList,
	formatDate,
} from '../utils/formatter.util.js';

/**
 * Format a list of workspaces for display
 * @param workspacesData - Raw workspaces data from the API
 * @returns Formatted string with workspaces information in markdown format
 */
export function formatWorkspacesList(
	workspacesData: WorkspacePermissionsResponse,
): string {
	const workspaces = workspacesData.values || [];

	if (workspaces.length === 0) {
		return 'No workspaces found matching your criteria.';
	}

	const lines: string[] = [formatHeading('Bitbucket Workspaces', 1), ''];

	// Format each workspace with its details
	const formattedList = formatNumberedList(
		workspaces,
		(membership, index) => {
			const workspace = membership.workspace;
			const itemLines: string[] = [];
			itemLines.push(formatHeading(workspace.name, 2));

			// Basic information
			const properties: Record<string, unknown> = {
				UUID: workspace.uuid,
				Slug: workspace.slug,
				'Permission Level': membership.permission || 'Unknown',
				'Last Accessed': membership.last_accessed
					? formatDate(new Date(membership.last_accessed))
					: 'N/A',
				'Added On': membership.added_on
					? formatDate(new Date(membership.added_on))
					: 'N/A',
				'Web URL': workspace.links?.html?.href
					? formatUrl(workspace.links.html.href, workspace.slug)
					: formatUrl(
							`https://bitbucket.org/${workspace.slug}/`,
							workspace.slug,
						),
				User:
					membership.user?.display_name ||
					membership.user?.nickname ||
					'Unknown',
			};

			// Format as a bullet list
			itemLines.push(formatBulletList(properties, (key) => key));

			// Add separator between workspaces except for the last one
			if (index < workspaces.length - 1) {
				itemLines.push('');
				itemLines.push(formatSeparator());
			}

			return itemLines.join('\n');
		},
	);

	lines.push(formattedList);

	// Add timestamp for when this information was retrieved
	lines.push('');
	lines.push(
		`*Workspace information retrieved at ${formatDate(new Date())}*`,
	);

	return lines.join('\n');
}

/**
 * Format detailed workspace information for display
 * @param workspace - Raw workspace data from the API
 * @param membership - Optional membership information for the workspace
 * @returns Formatted string with workspace details in markdown format
 */
export function formatWorkspaceDetails(
	workspace: WorkspaceDetailed,
	membership?: WorkspaceMembership,
): string {
	const lines: string[] = [
		formatHeading(`Workspace: ${workspace.name}`, 1),
		'',
		formatHeading('Basic Information', 2),
	];

	// Format basic information as a bullet list
	const basicProperties: Record<string, unknown> = {
		UUID: workspace.uuid,
		Slug: workspace.slug,
		Type: workspace.type || 'Not specified',
		'Created On': workspace.created_on,
	};

	lines.push(formatBulletList(basicProperties, (key) => key));

	// Add membership information if available
	if (membership) {
		lines.push('');
		lines.push(formatHeading('Your Membership', 2));

		const membershipProperties: Record<string, unknown> = {
			Permission: membership.permission,
			'Last Accessed': membership.last_accessed,
			'Added On': membership.added_on,
		};

		lines.push(formatBulletList(membershipProperties, (key) => key));
	}

	// Add links
	lines.push('');
	lines.push(formatHeading('Links', 2));

	const links: string[] = [];

	if (workspace.links.html?.href) {
		links.push(
			`- ${formatUrl(workspace.links.html.href, 'View in Browser')}`,
		);
	}
	if (workspace.links.repositories?.href) {
		links.push(
			`- ${formatUrl(workspace.links.repositories.href, 'Repositories')}`,
		);
	}
	if (workspace.links.projects?.href) {
		links.push(`- ${formatUrl(workspace.links.projects.href, 'Projects')}`);
	}
	if (workspace.links.snippets?.href) {
		links.push(`- ${formatUrl(workspace.links.snippets.href, 'Snippets')}`);
	}

	lines.push(links.join('\n'));

	return lines.join('\n');
}
</file>

<file path="src/controllers/atlassian.workspaces.types.ts">
import { PaginationOptions, EntityIdentifier } from '../types/common.types.js';

/**
 * Workspace identifier for retrieving specific workspaces
 */
export interface WorkspaceIdentifier extends EntityIdentifier {
	/**
	 * The workspace slug to retrieve
	 */
	workspaceSlug: string;
}

/**
 * Options for listing Bitbucket workspaces
 * NOTE: Sorting is not supported by the Bitbucket API for the /2.0/user/permissions/workspaces endpoint
 */
export interface ListWorkspacesOptions extends PaginationOptions {
	// No additional options beyond pagination
	[key: string]: unknown;
}

/**
 * Options for getting workspace details
 * @remarks This is a placeholder for future extensions
 */
export type GetWorkspaceOptions = Record<string, never>;
</file>

<file path="src/services/vendor.atlassian.pullrequests.service.ts">
import { createAuthMissingError } from '../utils/error.util.js';
import { Logger } from '../utils/logger.util.js';
import {
	fetchAtlassian,
	getAtlassianCredentials,
} from '../utils/transport.util.js';
import {
	PullRequestDetailed,
	PullRequestsResponse,
	ListPullRequestsParams,
	GetPullRequestParams,
	GetPullRequestCommentsParams,
	PullRequestCommentsResponse,
	PullRequestComment,
	AddPullRequestCommentParams,
	CreatePullRequestParams,
	DiffstatResponse,
} from './vendor.atlassian.pullrequests.types.js';

/**
 * Base API path for Bitbucket REST API v2
 * @see https://developer.atlassian.com/cloud/bitbucket/rest/api-group-pullrequests/
 * @constant {string}
 */
const API_PATH = '/2.0';

/**
 * @namespace VendorAtlassianPullRequestsService
 * @description Service for interacting with Bitbucket Pull Requests API.
 * Provides methods for listing pull requests and retrieving pull request details.
 * All methods require valid Atlassian credentials configured in the environment.
 */

// Create a contextualized logger for this file
const serviceLogger = Logger.forContext(
	'services/vendor.atlassian.pullrequests.service.ts',
);

// Log service initialization
serviceLogger.debug('Bitbucket pull requests service initialized');

/**
 * List pull requests for a repository
 * @param {ListPullRequestsParams} params - Parameters for the request
 * @param {string} params.workspace - The workspace slug or UUID
 * @param {string} params.repo_slug - The repository slug or UUID
 * @param {PullRequestState | PullRequestState[]} [params.state] - Filter by pull request state (default: 'OPEN')
 * @param {string} [params.q] - Query string to filter pull requests
 * @param {string} [params.sort] - Property to sort by (e.g., 'created_on', '-updated_on')
 * @param {number} [params.page] - Page number for pagination
 * @param {number} [params.pagelen] - Number of items per page
 * @returns {Promise<PullRequestsResponse>} Response containing pull requests
 * @example
 * ```typescript
 * // List open pull requests in a repository, sorted by creation date
 * const response = await list({
 *   workspace: 'myworkspace',
 *   repo_slug: 'myrepo',
 *   sort: '-created_on',
 *   pagelen: 25
 * });
 * ```
 */
async function list(
	params: ListPullRequestsParams,
): Promise<PullRequestsResponse> {
	const methodLogger = Logger.forContext(
		'services/vendor.atlassian.pullrequests.service.ts',
		'list',
	);
	methodLogger.debug('Listing Bitbucket pull requests with params:', params);

	if (!params.workspace || !params.repo_slug) {
		throw new Error('Both workspace and repo_slug parameters are required');
	}

	const credentials = getAtlassianCredentials();
	if (!credentials) {
		throw createAuthMissingError(
			'Atlassian credentials are required for this operation',
		);
	}

	// Construct query parameters
	const queryParams = new URLSearchParams();

	// Add state parameter(s) - default to OPEN if not specified
	if (params.state) {
		if (Array.isArray(params.state)) {
			// For multiple states, repeat the parameter
			params.state.forEach((state) => {
				queryParams.append('state', state);
			});
		} else {
			queryParams.set('state', params.state);
		}
	}

	// Add optional query parameters
	if (params.q) {
		queryParams.set('q', params.q);
	}
	if (params.sort) {
		queryParams.set('sort', params.sort);
	}
	if (params.pagelen) {
		queryParams.set('pagelen', params.pagelen.toString());
	}
	if (params.page) {
		queryParams.set('page', params.page.toString());
	}

	const queryString = queryParams.toString()
		? `?${queryParams.toString()}`
		: '';
	const path = `${API_PATH}/repositories/${params.workspace}/${params.repo_slug}/pullrequests${queryString}`;

	methodLogger.debug(`Sending request to: ${path}`);
	return fetchAtlassian<PullRequestsResponse>(credentials, path);
}

/**
 * Get detailed information about a specific Bitbucket pull request
 *
 * Retrieves comprehensive details about a single pull request.
 *
 * @async
 * @memberof VendorAtlassianPullRequestsService
 * @param {GetPullRequestParams} params - Parameters for the request
 * @param {string} params.workspace - The workspace slug or UUID
 * @param {string} params.repo_slug - The repository slug or UUID
 * @param {number} params.pull_request_id - The ID of the pull request
 * @returns {Promise<PullRequestDetailed>} Promise containing the detailed pull request information
 * @throws {Error} If Atlassian credentials are missing or API request fails
 * @example
 * // Get pull request details
 * const pullRequest = await get({
 *   workspace: 'my-workspace',
 *   repo_slug: 'my-repo',
 *   pull_request_id: 123
 * });
 */
async function get(params: GetPullRequestParams): Promise<PullRequestDetailed> {
	const methodLogger = Logger.forContext(
		'services/vendor.atlassian.pullrequests.service.ts',
		'get',
	);
	methodLogger.debug(
		`Getting Bitbucket pull request: ${params.workspace}/${params.repo_slug}/${params.pull_request_id}`,
	);

	if (!params.workspace || !params.repo_slug || !params.pull_request_id) {
		throw new Error(
			'workspace, repo_slug, and pull_request_id parameters are all required',
		);
	}

	const credentials = getAtlassianCredentials();
	if (!credentials) {
		throw createAuthMissingError(
			'Atlassian credentials are required for this operation',
		);
	}

	const path = `${API_PATH}/repositories/${params.workspace}/${params.repo_slug}/pullrequests/${params.pull_request_id}`;

	methodLogger.debug(`Sending request to: ${path}`);
	return fetchAtlassian<PullRequestDetailed>(credentials, path);
}

/**
 * Get comments for a specific Bitbucket pull request
 *
 * Retrieves all comments on a specific pull request, including general comments and
 * inline code review comments. Supports pagination.
 *
 * @async
 * @memberof VendorAtlassianPullRequestsService
 * @param {GetPullRequestCommentsParams} params - Parameters for the request
 * @param {string} params.workspace - The workspace slug or UUID
 * @param {string} params.repo_slug - The repository slug or UUID
 * @param {number} params.pull_request_id - The ID of the pull request
 * @param {number} [params.page] - Page number for pagination
 * @param {number} [params.pagelen] - Number of items per page
 * @returns {Promise<PullRequestCommentsResponse>} Promise containing the pull request comments
 * @throws {Error} If Atlassian credentials are missing or API request fails
 * @example
 * // Get comments for a pull request
 * const comments = await getComments({
 *   workspace: 'my-workspace',
 *   repo_slug: 'my-repo',
 *   pull_request_id: 123,
 *   pagelen: 25
 * });
 */
async function getComments(
	params: GetPullRequestCommentsParams,
): Promise<PullRequestCommentsResponse> {
	const methodLogger = Logger.forContext(
		'services/vendor.atlassian.pullrequests.service.ts',
		'getComments',
	);
	methodLogger.debug(
		`Getting comments for Bitbucket pull request: ${params.workspace}/${params.repo_slug}/${params.pull_request_id}`,
	);

	if (!params.workspace || !params.repo_slug || !params.pull_request_id) {
		throw new Error(
			'workspace, repo_slug, and pull_request_id parameters are all required',
		);
	}

	const credentials = getAtlassianCredentials();
	if (!credentials) {
		throw createAuthMissingError(
			'Atlassian credentials are required for this operation',
		);
	}

	// Build query parameters
	const queryParams = new URLSearchParams();

	// Add pagination parameters if provided
	if (params.pagelen) {
		queryParams.set('pagelen', params.pagelen.toString());
	}
	if (params.page) {
		queryParams.set('page', params.page.toString());
	}
	// Add sort parameter if provided
	if (params.sort) {
		queryParams.set('sort', params.sort);
	}

	const queryString = queryParams.toString()
		? `?${queryParams.toString()}`
		: '';

	const path = `${API_PATH}/repositories/${params.workspace}/${params.repo_slug}/pullrequests/${params.pull_request_id}/comments${queryString}`;

	methodLogger.debug(`Sending request to: ${path}`);
	return fetchAtlassian<PullRequestCommentsResponse>(credentials, path);
}

/**
 * Add a comment to a specific Bitbucket pull request
 *
 * Creates a new comment on a pull request, either as a general comment or
 * as an inline code comment attached to a specific file and line.
 *
 * @async
 * @memberof VendorAtlassianPullRequestsService
 * @param {AddPullRequestCommentParams} params - Parameters for the request
 * @param {string} params.workspace - The workspace slug or UUID
 * @param {string} params.repo_slug - The repository slug or UUID
 * @param {number} params.pull_request_id - The ID of the pull request
 * @param {Object} params.content - The content of the comment
 * @param {string} params.content.raw - The raw text of the comment
 * @param {Object} [params.inline] - Optional inline comment location
 * @param {string} params.inline.path - The file path for the inline comment
 * @param {number} params.inline.to - The line number in the file
 * @returns {Promise<PullRequestComment>} Promise containing the created comment
 * @throws {Error} If Atlassian credentials are missing or API request fails
 * @example
 * // Add a general comment to a pull request
 * const comment = await addComment({
 *   workspace: 'my-workspace',
 *   repo_slug: 'my-repo',
 *   pull_request_id: 123,
 *   content: { raw: "This looks good to me!" }
 * });
 *
 * // Add an inline code comment
 * const comment = await addComment({
 *   workspace: 'my-workspace',
 *   repo_slug: 'my-repo',
 *   pull_request_id: 123,
 *   content: { raw: "Consider using a constant here instead." },
 *   inline: { path: "src/main.js", to: 42 }
 * });
 */
async function addComment(
	params: AddPullRequestCommentParams,
): Promise<PullRequestComment> {
	const methodLogger = Logger.forContext(
		'services/vendor.atlassian.pullrequests.service.ts',
		'addComment',
	);
	methodLogger.debug(
		`Adding comment to Bitbucket pull request: ${params.workspace}/${params.repo_slug}/${params.pull_request_id}`,
	);

	if (!params.workspace || !params.repo_slug || !params.pull_request_id) {
		throw new Error(
			'workspace, repo_slug, and pull_request_id parameters are all required',
		);
	}

	if (!params.content || !params.content.raw) {
		throw new Error('Comment content is required');
	}

	const credentials = getAtlassianCredentials();
	if (!credentials) {
		throw createAuthMissingError(
			'Atlassian credentials are required for this operation',
		);
	}

	const path = `${API_PATH}/repositories/${params.workspace}/${params.repo_slug}/pullrequests/${params.pull_request_id}/comments`;

	methodLogger.debug(`Sending POST request to: ${path}`);
	return fetchAtlassian<PullRequestComment>(credentials, path, {
		method: 'POST',
		body: {
			content: params.content,
			inline: params.inline,
		},
	});
}

/**
 * Create a new pull request
 * @param {CreatePullRequestParams} params - Parameters for the request
 * @param {string} params.workspace - The workspace slug or UUID
 * @param {string} params.repo_slug - The repository slug or UUID
 * @param {string} params.title - Title of the pull request
 * @param {string} params.source.branch.name - Source branch name
 * @param {string} params.destination.branch.name - Destination branch name (defaults to main/master)
 * @param {string} [params.description] - Optional description for the pull request
 * @param {boolean} [params.close_source_branch] - Whether to close the source branch after merge (default: false)
 * @returns {Promise<PullRequestDetailed>} Detailed information about the created pull request
 * @example
 * ```typescript
 * // Create a new pull request
 * const pullRequest = await create({
 *   workspace: 'myworkspace',
 *   repo_slug: 'myrepo',
 *   title: 'Add new feature',
 *   source: {
 *     branch: {
 *       name: 'feature/new-feature'
 *     }
 *   },
 *   destination: {
 *     branch: {
 *       name: 'main'
 *     }
 *   },
 *   description: 'This PR adds a new feature...',
 *   close_source_branch: true
 * });
 * ```
 */
async function create(
	params: CreatePullRequestParams,
): Promise<PullRequestDetailed> {
	const methodLogger = Logger.forContext(
		'services/vendor.atlassian.pullrequests.service.ts',
		'create',
	);
	methodLogger.debug(
		'Creating new Bitbucket pull request with params:',
		params,
	);

	if (!params.workspace || !params.repo_slug) {
		throw new Error('Both workspace and repo_slug parameters are required');
	}

	if (!params.title) {
		throw new Error('Pull request title is required');
	}

	if (!params.source || !params.source.branch || !params.source.branch.name) {
		throw new Error('Source branch name is required');
	}

	// Destination branch is required but may have a default
	if (
		!params.destination ||
		!params.destination.branch ||
		!params.destination.branch.name
	) {
		throw new Error('Destination branch name is required');
	}

	const credentials = getAtlassianCredentials();
	if (!credentials) {
		throw createAuthMissingError(
			'Atlassian credentials are required for this operation',
		);
	}

	const path = `${API_PATH}/repositories/${params.workspace}/${params.repo_slug}/pullrequests`;

	// Construct request body with only the fields needed by the API
	const requestBody = {
		title: params.title,
		source: {
			branch: {
				name: params.source.branch.name,
			},
		},
		destination: {
			branch: {
				name: params.destination.branch.name,
			},
		},
		description: params.description || '',
		close_source_branch: !!params.close_source_branch,
	};

	methodLogger.debug(`Sending POST request to: ${path}`);
	return fetchAtlassian<PullRequestDetailed>(credentials, path, {
		method: 'POST',
		body: requestBody,
	});
}

/**
 * Get raw diff content for a specific Bitbucket pull request
 *
 * Retrieves the raw diff content showing actual code changes in the pull request.
 * The diff is returned in a standard unified diff format.
 *
 * @async
 * @memberof VendorAtlassianPullRequestsService
 * @param {GetPullRequestParams} params - Parameters for the request
 * @param {string} params.workspace - The workspace slug or UUID
 * @param {string} params.repo_slug - The repository slug or UUID
 * @param {number} params.pull_request_id - The ID of the pull request
 * @returns {Promise<string>} Promise containing the raw diff content
 * @throws {Error} If Atlassian credentials are missing or API request fails
 * @example
 * // Get raw diff content for a pull request
 * const diffContent = await getRawDiff({
 *   workspace: 'my-workspace',
 *   repo_slug: 'my-repo',
 *   pull_request_id: 123
 * });
 */
async function getRawDiff(params: GetPullRequestParams): Promise<string> {
	const methodLogger = Logger.forContext(
		'services/vendor.atlassian.pullrequests.service.ts',
		'getRawDiff',
	);
	methodLogger.debug(
		`Getting raw diff for Bitbucket pull request: ${params.workspace}/${params.repo_slug}/${params.pull_request_id}`,
	);

	if (!params.workspace || !params.repo_slug || !params.pull_request_id) {
		throw new Error(
			'workspace, repo_slug, and pull_request_id parameters are all required',
		);
	}

	const credentials = getAtlassianCredentials();
	if (!credentials) {
		throw createAuthMissingError(
			'Atlassian credentials are required for this operation',
		);
	}

	// Use the diff endpoint directly
	const path = `${API_PATH}/repositories/${params.workspace}/${params.repo_slug}/pullrequests/${params.pull_request_id}/diff`;

	methodLogger.debug(`Sending request to: ${path}`);

	// Override the Accept header to get raw diff content instead of JSON
	return fetchAtlassian<string>(credentials, path, {
		headers: {
			Accept: 'text/plain',
			'Content-Type': 'text/plain',
		},
	});
}

/**
 * Get the diffstat information for a pull request
 *
 * Returns summary statistics about the changes in a pull request,
 * including files changed, insertions, and deletions.
 *
 * @async
 * @memberof VendorAtlassianPullRequestsService
 * @param {GetPullRequestParams} params - Parameters for the request
 * @returns {Promise<DiffstatResponse>} Promise containing the diffstat response
 */
async function getDiffstat(
	params: GetPullRequestParams,
): Promise<DiffstatResponse> {
	const methodLogger = Logger.forContext(
		'services/vendor.atlassian.pullrequests.service.ts',
		'getDiffstat',
	);
	methodLogger.debug(
		`Getting diffstat for Bitbucket pull request: ${params.workspace}/${params.repo_slug}/${params.pull_request_id}`,
	);

	if (!params.workspace || !params.repo_slug || !params.pull_request_id) {
		throw new Error(
			'workspace, repo_slug, and pull_request_id parameters are all required',
		);
	}

	const credentials = getAtlassianCredentials();
	if (!credentials) {
		throw createAuthMissingError(
			'Atlassian credentials are required for this operation',
		);
	}

	const path = `${API_PATH}/repositories/${params.workspace}/${params.repo_slug}/pullrequests/${params.pull_request_id}/diffstat`;

	methodLogger.debug(`Sending request to: ${path}`);
	return fetchAtlassian<DiffstatResponse>(credentials, path);
}

export default {
	list,
	get,
	getComments,
	addComment,
	create,
	getRawDiff,
	getDiffstat,
};
</file>

<file path="src/services/vendor.atlassian.pullrequests.test.ts">
import atlassianPullRequestsService from './vendor.atlassian.pullrequests.service.js';
import atlassianWorkspacesService from './vendor.atlassian.workspaces.service.js';
import atlassianRepositoriesService from './vendor.atlassian.repositories.service.js';
import { getAtlassianCredentials } from '../utils/transport.util.js';
import { config } from '../utils/config.util.js';

describe('Vendor Atlassian Pull Requests Service', () => {
	// Variables to store valid test data
	let validWorkspace: string | null = null;
	let validRepo: string | null = null;
	let validPrId: string | null = null;

	// Load configuration and skip all tests if Atlassian credentials are not available
	beforeAll(async () => {
		// Load configuration from all sources
		config.load();

		const credentials = getAtlassianCredentials();
		if (!credentials) {
			console.warn(
				'Skipping Atlassian Pull Requests tests: No credentials available',
			);
			return;
		}

		// Try to find a valid workspace, repository, and PR for tests
		try {
			// Get available workspaces
			const workspaces = await atlassianWorkspacesService.list();
			if (workspaces.values.length > 0) {
				validWorkspace = workspaces.values[0].workspace.slug;

				// Find repositories in this workspace
				const repositories = await atlassianRepositoriesService.list({
					workspace: validWorkspace,
				});

				if (repositories && repositories.values.length > 0) {
					validRepo = repositories.values[0].name.toLowerCase();

					// Try to find a PR in this repository
					try {
						const pullRequests =
							await atlassianPullRequestsService.list({
								workspace: validWorkspace,
								repo_slug: validRepo,
								pagelen: 1,
							});

						if (pullRequests.values.length > 0) {
							validPrId = String(pullRequests.values[0].id);
							console.log(
								`Found valid PR for testing: ${validWorkspace}/${validRepo}/${validPrId}`,
							);
						}
					} catch (error) {
						console.warn('Could not find a valid PR for testing');
					}
				}
			}
		} catch (error) {
			console.warn('Error setting up test data:', error);
		}
	});

	describe('listPullRequests', () => {
		it('should return a list of pull requests', async () => {
			// Check if credentials are available
			const credentials = getAtlassianCredentials();
			if (!credentials) {
				return; // Skip this test if no credentials
			}

			// First get available workspaces
			const workspaces = await atlassianWorkspacesService.list();

			// Skip if no workspaces are available
			if (workspaces.values.length === 0) {
				console.warn('Skipping test: No workspaces available');
				return;
			}

			// Get the first workspace
			const workspace = workspaces.values[0].workspace.slug;
			console.log(`Using workspace: ${workspace}`);

			// Find repositories in this workspace
			let repositories;
			try {
				repositories = await atlassianRepositoriesService.list({
					workspace,
				});
			} catch (error) {
				console.warn(
					`Error fetching repositories for workspace ${workspace}: ${error instanceof Error ? error.message : String(error)}`,
				);
				return; // Skip this test if repositories can't be fetched
			}

			// Skip if no repositories are available
			if (!repositories || repositories.values.length === 0) {
				console.warn(
					`Skipping test: No repositories found in workspace ${workspace}`,
				);
				return;
			}

			// Get the first repository
			const repo_slug = repositories.values[0].name.toLowerCase();
			console.log(`Using repository: ${workspace}/${repo_slug}`);

			try {
				// Call the function with the real API
				const result = await atlassianPullRequestsService.list({
					workspace,
					repo_slug,
				});

				// Verify the response structure
				expect(result).toHaveProperty('values');
				expect(Array.isArray(result.values)).toBe(true);
				expect(result).toHaveProperty('pagelen');
				expect(result).toHaveProperty('page');
				expect(result).toHaveProperty('size');

				// If pull requests are returned, verify their structure
				if (result.values.length > 0) {
					const pullRequest = result.values[0];
					expect(pullRequest).toHaveProperty('type', 'pullrequest');
					expect(pullRequest).toHaveProperty('id');
					expect(pullRequest).toHaveProperty('title');
					expect(pullRequest).toHaveProperty('state');
					expect(pullRequest).toHaveProperty('author');
					expect(pullRequest).toHaveProperty('source');
					expect(pullRequest).toHaveProperty('destination');
					expect(pullRequest).toHaveProperty('links');
				} else {
					console.log(
						`Repository ${workspace}/${repo_slug} doesn't have any pull requests`,
					);
				}
			} catch (error) {
				// Allow test to pass if repository doesn't exist or has no PRs
				if (
					error instanceof Error &&
					(error.message.includes('Not Found') ||
						error.message.includes('No such repository'))
				) {
					console.warn(
						`Repository ${workspace}/${repo_slug} not found or no access to pull requests. Skipping test.`,
					);
					return;
				}
				throw error; // Re-throw if it's some other error
			}
		}, 15000); // Increase timeout for API call

		it('should support pagination', async () => {
			// Check if credentials are available
			const credentials = getAtlassianCredentials();
			if (!credentials) {
				return; // Skip this test if no credentials
			}

			// First get available workspaces
			const workspaces = await atlassianWorkspacesService.list();

			// Skip if no workspaces are available
			if (workspaces.values.length === 0) {
				console.warn('Skipping test: No workspaces available');
				return;
			}

			// Get the first workspace
			const workspace = workspaces.values[0].workspace.slug;

			// Find repositories in this workspace
			let repositories;
			try {
				repositories = await atlassianRepositoriesService.list({
					workspace,
				});
			} catch (error) {
				console.warn(
					`Error fetching repositories for workspace ${workspace}: ${error instanceof Error ? error.message : String(error)}`,
				);
				return; // Skip this test if repositories can't be fetched
			}

			// Skip if no repositories are available
			if (!repositories || repositories.values.length === 0) {
				console.warn(
					`Skipping test: No repositories found in workspace ${workspace}`,
				);
				return;
			}

			// Get the first repository
			const repo_slug = repositories.values[0].name.toLowerCase();

			try {
				// Call the function with the real API and limit results
				const result = await atlassianPullRequestsService.list({
					workspace,
					repo_slug,
					pagelen: 2,
				});

				// Verify the pagination parameters
				expect(result).toHaveProperty('pagelen', 2);
				expect(result.values.length).toBeLessThanOrEqual(2);
				console.log(
					`Found ${result.values.length} pull requests with pagination`,
				);
			} catch (error) {
				// Allow test to pass if repository doesn't exist or has no PRs
				if (
					error instanceof Error &&
					(error.message.includes('Not Found') ||
						error.message.includes('No such repository'))
				) {
					console.warn(
						`Repository ${workspace}/${repo_slug} not found or no access to pull requests. Skipping test.`,
					);
					return;
				}
				throw error; // Re-throw if it's some other error
			}
		}, 15000); // Increase timeout for API call

		it('should filter by state', async () => {
			// Check if credentials are available
			const credentials = getAtlassianCredentials();
			if (!credentials) {
				return; // Skip this test if no credentials
			}

			// First get available workspaces
			const workspaces = await atlassianWorkspacesService.list();

			// Skip if no workspaces are available
			if (workspaces.values.length === 0) {
				console.warn('Skipping test: No workspaces available');
				return;
			}

			// Get the first workspace
			const workspace = workspaces.values[0].workspace.slug;

			// Find repositories in this workspace
			let repositories;
			try {
				repositories = await atlassianRepositoriesService.list({
					workspace,
				});
			} catch (error) {
				console.warn(
					`Error fetching repositories for workspace ${workspace}: ${error instanceof Error ? error.message : String(error)}`,
				);
				return; // Skip this test if repositories can't be fetched
			}

			// Skip if no repositories are available
			if (!repositories || repositories.values.length === 0) {
				console.warn(
					`Skipping test: No repositories found in workspace ${workspace}`,
				);
				return;
			}

			// Get the first repository
			const repo_slug = repositories.values[0].name.toLowerCase();

			try {
				// Call the function with the real API and filter by state
				const result = await atlassianPullRequestsService.list({
					workspace,
					repo_slug,
					state: ['OPEN', 'MERGED'],
				});

				// Verify the states are as expected
				expect(result).toHaveProperty('values');

				// If pull requests are returned, verify they have the correct state
				if (result.values.length > 0) {
					result.values.forEach((pr) => {
						expect(['OPEN', 'MERGED']).toContain(pr.state);
					});
					console.log(
						`Found ${result.values.length} pull requests with states OPEN or MERGED`,
					);
				} else {
					console.log(
						`No pull requests found with states OPEN or MERGED`,
					);
				}
			} catch (error) {
				// Allow test to pass if repository doesn't exist or has no PRs
				if (
					error instanceof Error &&
					(error.message.includes('Not Found') ||
						error.message.includes('No such repository'))
				) {
					console.warn(
						`Repository ${workspace}/${repo_slug} not found or no access to pull requests. Skipping test.`,
					);
					return;
				}
				throw error; // Re-throw if it's some other error
			}
		}, 15000); // Increase timeout for API call
	});

	describe('getPullRequest', () => {
		it('should return details for a valid pull request ID', async () => {
			// Check if credentials are available
			const credentials = getAtlassianCredentials();
			if (!credentials) {
				return; // Skip this test if no credentials
			}

			// First get available workspaces
			const workspaces = await atlassianWorkspacesService.list();

			// Skip if no workspaces are available
			if (workspaces.values.length === 0) {
				console.warn('Skipping test: No workspaces available');
				return;
			}

			// Get the first workspace
			const workspace = workspaces.values[0].workspace.slug;

			// Find repositories in this workspace
			let repositories;
			try {
				repositories = await atlassianRepositoriesService.list({
					workspace,
				});
			} catch (error) {
				console.warn(
					`Error fetching repositories for workspace ${workspace}: ${error instanceof Error ? error.message : String(error)}`,
				);
				return; // Skip this test if repositories can't be fetched
			}

			// Skip if no repositories are available
			if (!repositories || repositories.values.length === 0) {
				console.warn(
					`Skipping test: No repositories found in workspace ${workspace}`,
				);
				return;
			}

			// Get the first repository
			const repo_slug = repositories.values[0].name.toLowerCase();

			try {
				// First, check if we can get a list of PRs to find a valid ID
				const prs = await atlassianPullRequestsService.list({
					workspace,
					repo_slug,
				});

				// Skip if no pull requests are available
				if (!prs.values.length) {
					console.warn(
						`Skipping test: No pull requests found in repository ${workspace}/${repo_slug}`,
					);
					return;
				}

				// Use the first PR's ID
				const prId = prs.values[0].id;
				console.log(`Testing pull request ID: ${prId}`);

				// Get the specific pull request
				const result = await atlassianPullRequestsService.get({
					workspace,
					repo_slug,
					pull_request_id: prId,
				});

				// Verify the response contains expected fields
				expect(result).toHaveProperty('id', prId);
				expect(result).toHaveProperty('type', 'pullrequest');
				expect(result).toHaveProperty('title');
				expect(result).toHaveProperty('state');
				expect(result).toHaveProperty('author');
				expect(result).toHaveProperty('source');
				expect(result).toHaveProperty('destination');
				expect(result).toHaveProperty('links');
			} catch (error) {
				// Allow test to pass if repository or PR doesn't exist
				if (
					error instanceof Error &&
					(error.message.includes('Not Found') ||
						error.message.includes('No such repository') ||
						error.message.includes('Pull request not found'))
				) {
					console.warn(
						`Repository ${workspace}/${repo_slug} or its pull requests not found. Skipping test.`,
					);
					return;
				}
				throw error; // Re-throw if it's some other error
			}
		}, 15000); // Increase timeout for API call

		it('should handle invalid pull request IDs', async () => {
			// Check if credentials are available
			const credentials = getAtlassianCredentials();
			if (!credentials) {
				return; // Skip this test if no credentials
			}

			// First get available workspaces
			const workspaces = await atlassianWorkspacesService.list();

			// Skip if no workspaces are available
			if (workspaces.values.length === 0) {
				console.warn('Skipping test: No workspaces available');
				return;
			}

			// Get the first workspace
			const workspace = workspaces.values[0].workspace.slug;

			// Find repositories in this workspace
			let repositories;
			try {
				repositories = await atlassianRepositoriesService.list({
					workspace,
				});
			} catch (error) {
				console.warn(
					`Error fetching repositories for workspace ${workspace}: ${error instanceof Error ? error.message : String(error)}`,
				);
				return; // Skip this test if repositories can't be fetched
			}

			// Skip if no repositories are available
			if (!repositories || repositories.values.length === 0) {
				console.warn(
					`Skipping test: No repositories found in workspace ${workspace}`,
				);
				return;
			}

			// Get the first repository
			const repo_slug = repositories.values[0].name.toLowerCase();

			try {
				// Use an invalid pull request ID (very large number unlikely to exist)
				const invalidId = 999999;
				console.log(`Testing invalid pull request ID: ${invalidId}`);

				// Call the function with the real API and expect it to throw
				await expect(
					atlassianPullRequestsService.get({
						workspace,
						repo_slug,
						pull_request_id: invalidId,
					}),
				).rejects.toThrow();
			} catch (error) {
				// If repo doesn't exist, just skip the test
				if (
					error instanceof Error &&
					(error.message.includes('Not Found') ||
						error.message.includes('No such repository'))
				) {
					console.warn(
						`Repository ${workspace}/${repo_slug} not found. Skipping test.`,
					);
					return;
				}
				// Otherwise, we should have caught the expected rejection
			}
		}, 15000); // Increase timeout for API call
	});

	// Note: addComment test suite has been removed to avoid creating comments on real PRs during tests
});
</file>

<file path="src/services/vendor.atlassian.pullrequests.types.ts">
/**
 * Types for Atlassian Bitbucket Pull Requests API
 */

import { Repository } from './vendor.atlassian.repositories.types.js';

/**
 * Pull request state
 */
export type PullRequestState = 'OPEN' | 'MERGED' | 'DECLINED' | 'SUPERSEDED';

/**
 * Pull request author or user reference
 */
export interface PullRequestUser {
	type: 'user' | 'team';
	uuid?: string;
	display_name?: string;
	nickname?: string;
	account_id?: string;
	links?: {
		self?: { href: string };
		html?: { href: string };
		avatar?: { href: string };
	};
}

/**
 * Content representation for rendering
 */
export interface ContentRepresentation {
	raw: string;
	markup: string;
	html: string;
}

/**
 * Rendered content fields
 */
export interface RenderedContent {
	title?: ContentRepresentation;
	description?: ContentRepresentation;
	reason?: ContentRepresentation;
}

/**
 * Pull request summary
 */
export interface PullRequestSummary {
	raw: string;
	markup: string;
	html: string;
}

/**
 * Pull request links object
 */
export interface PullRequestLinks {
	self?: { href: string; name?: string };
	html?: { href: string; name?: string };
	commits?: { href: string; name?: string };
	approve?: { href: string; name?: string };
	diff?: { href: string; name?: string };
	diffstat?: { href: string; name?: string };
	comments?: { href: string; name?: string };
	activity?: { href: string; name?: string };
	merge?: { href: string; name?: string };
	decline?: { href: string; name?: string };
}

/**
 * Pull request branch reference
 */
export interface PullRequestBranchRef {
	repository: Partial<Repository>;
	branch: {
		name: string;
		merge_strategies?: string[];
		default_merge_strategy?: string;
	};
	commit?: {
		hash: string;
	};
}

/**
 * Pull request object returned from the API
 */
export interface PullRequest {
	type: 'pullrequest';
	id: number;
	title: string;
	rendered?: RenderedContent;
	summary?: PullRequestSummary;
	state: PullRequestState;
	author: PullRequestUser;
	source: PullRequestBranchRef;
	destination: PullRequestBranchRef;
	merge_commit?: {
		hash: string;
	};
	comment_count?: number;
	task_count?: number;
	close_source_branch?: boolean;
	closed_by?: PullRequestUser;
	reason?: string;
	created_on: string;
	updated_on: string;
	reviewers?: PullRequestUser[];
	participants?: PullRequestUser[];
	links: PullRequestLinks;
}

/**
 * Extended pull request object with optional fields
 * @remarks Currently identical to PullRequest, but allows for future extension
 */
export type PullRequestDetailed = PullRequest;

/**
 * Parameters for listing pull requests
 */
export interface ListPullRequestsParams {
	workspace: string;
	repo_slug: string;
	state?: PullRequestState | PullRequestState[];
	q?: string;
	sort?: string;
	page?: number;
	pagelen?: number;
}

/**
 * Parameters for getting a pull request by ID
 */
export interface GetPullRequestParams {
	workspace: string;
	repo_slug: string;
	pull_request_id: number;
}

/**
 * API response for listing pull requests
 */
export interface PullRequestsResponse {
	pagelen: number;
	page: number;
	size: number;
	next?: string;
	previous?: string;
	values: PullRequest[];
}

/**
 * Parameters for getting pull request comments
 */
export interface GetPullRequestCommentsParams {
	/**
	 * The workspace slug or UUID
	 */
	workspace: string;

	/**
	 * The repository slug or UUID
	 */
	repo_slug: string;

	/**
	 * The pull request ID
	 */
	pull_request_id: number;

	/**
	 * Page number for pagination
	 */
	page?: number;

	/**
	 * Number of items per page
	 */
	pagelen?: number;

	/**
	 * Property to sort by (e.g., 'created_on', '-updated_on')
	 */
	sort?: string;
}

/**
 * Parameters for adding a comment to a pull request
 */
export interface AddPullRequestCommentParams {
	/**
	 * The workspace slug or UUID
	 */
	workspace: string;

	/**
	 * The repository slug or UUID
	 */
	repo_slug: string;

	/**
	 * The pull request ID
	 */
	pull_request_id: number;

	/**
	 * The content of the comment
	 */
	content: {
		/**
		 * Raw comment text (can contain markdown)
		 */
		raw: string;
	};

	/**
	 * Optional inline comment location
	 */
	inline?: {
		/**
		 * The file path for the inline comment
		 */
		path: string;

		/**
		 * The line number in the file
		 */
		to?: number;
	};
}

/**
 * Inline comment position information
 */
export interface InlineCommentPosition {
	/**
	 * The file path the comment is on
	 */
	path: string;

	/**
	 * The original file path if renamed/moved
	 */
	from_path?: string;

	/**
	 * Line number in the "from" file
	 */
	from?: number;

	/**
	 * Line number in the "to" file
	 */
	to?: number;
}

/**
 * Pull request comment object
 */
export interface PullRequestComment {
	/**
	 * Comment ID
	 */
	id: number;

	/**
	 * Comment content
	 */
	content: {
		raw: string;
		markup?: string;
		html?: string;
		type?: string;
	};

	/**
	 * User who created the comment
	 */
	user: PullRequestUser;

	/**
	 * When the comment was created
	 */
	created_on: string;

	/**
	 * When the comment was last updated
	 */
	updated_on: string;

	/**
	 * Whether the comment has been deleted
	 */
	deleted?: boolean;

	/**
	 * For inline comments, contains file and line information
	 */
	inline?: InlineCommentPosition;

	/**
	 * For threaded comments, ID of the parent comment
	 */
	parent?: {
		id: number;
	};

	/**
	 * Links related to this comment
	 */
	links?: {
		self?: { href: string };
		html?: { href: string };
		code?: { href: string };
	};

	/**
	 * Type of the object
	 */
	type: 'pullrequest_comment';
}

/**
 * API response for listing pull request comments
 */
export interface PullRequestCommentsResponse {
	/**
	 * Number of items per page
	 */
	pagelen: number;

	/**
	 * Current page number
	 */
	page: number;

	/**
	 * Total number of items
	 */
	size: number;

	/**
	 * URL for the next page, if available
	 */
	next?: string;

	/**
	 * URL for the previous page, if available
	 */
	previous?: string;

	/**
	 * Array of comment objects
	 */
	values: PullRequestComment[];

	/**
	 * Reference to the pull request these comments belong to
	 */
	pullrequest?: {
		id: number;
		title?: string;
	};
}

/**
 * Parameters for creating a pull request
 */
export interface CreatePullRequestParams {
	/**
	 * The workspace slug or UUID
	 */
	workspace: string;

	/**
	 * The repository slug or UUID
	 */
	repo_slug: string;

	/**
	 * Title of the pull request
	 */
	title: string;

	/**
	 * Source branch information
	 */
	source: {
		branch: {
			name: string;
		};
	};

	/**
	 * Destination branch information
	 */
	destination: {
		branch: {
			name: string;
		};
	};

	/**
	 * Optional description for the pull request
	 */
	description?: string;

	/**
	 * Whether to close the source branch after merge
	 */
	close_source_branch?: boolean;
}

/**
 * Diffstat response representing changes in a pull request
 */
export interface DiffstatResponse {
	pagelen?: number;
	values: DiffstatFileChange[];
	page?: number;
	size?: number;
}

/**
 * Individual file change in a diffstat
 */
export interface DiffstatFileChange {
	status: string;
	old?: {
		path: string;
		type?: string;
	};
	new?: {
		path: string;
		type?: string;
	};
	lines_added?: number;
	lines_removed?: number;
}
</file>

<file path="src/services/vendor.atlassian.repositories.service.test.ts">
import atlassianRepositoriesService from './vendor.atlassian.repositories.service.js';
import { getAtlassianCredentials } from '../utils/transport.util.js';
import { config } from '../utils/config.util.js';
import { McpError } from '../utils/error.util.js';
import atlassianWorkspacesService from './vendor.atlassian.workspaces.service.js';

describe('Vendor Atlassian Repositories Service', () => {
	// Load configuration and check for credentials before all tests
	beforeAll(() => {
		config.load(); // Ensure config is loaded
		const credentials = getAtlassianCredentials();
		if (!credentials) {
			console.warn(
				'Skipping Atlassian Repositories Service tests: No credentials available',
			);
		}
	});

	// Helper function to skip tests when credentials are missing
	const skipIfNoCredentials = () => !getAtlassianCredentials();

	// Helper to get a valid workspace slug for testing
	async function getFirstWorkspaceSlug(): Promise<string | null> {
		if (skipIfNoCredentials()) return null;

		try {
			const listResult = await atlassianWorkspacesService.list({
				pagelen: 1,
			});
			return listResult.values.length > 0
				? listResult.values[0].workspace.slug
				: null;
		} catch (error) {
			console.warn(
				'Could not fetch workspace list for repository tests:',
				error,
			);
			return null;
		}
	}

	describe('list', () => {
		it('should return a list of repositories for a valid workspace', async () => {
			if (skipIfNoCredentials()) return;

			const workspaceSlug = await getFirstWorkspaceSlug();
			if (!workspaceSlug) {
				console.warn('Skipping test: No workspace slug found.');
				return;
			}

			const result = await atlassianRepositoriesService.list({
				workspace: workspaceSlug,
			});

			// Verify the response structure based on RepositoriesResponse
			expect(result).toHaveProperty('values');
			expect(Array.isArray(result.values)).toBe(true);
			expect(result).toHaveProperty('pagelen'); // Bitbucket uses pagelen
			expect(result).toHaveProperty('page');
			expect(result).toHaveProperty('size');

			if (result.values.length > 0) {
				const repo = result.values[0];
				expect(repo).toHaveProperty('type', 'repository');
				expect(repo).toHaveProperty('uuid');
				expect(repo).toHaveProperty('name');
				expect(repo).toHaveProperty('full_name');
				expect(repo).toHaveProperty('is_private');
				expect(repo).toHaveProperty('links');
				expect(repo).toHaveProperty('owner');
			}
		}, 30000); // Increased timeout

		it('should support pagination with pagelen and page', async () => {
			if (skipIfNoCredentials()) return;

			const workspaceSlug = await getFirstWorkspaceSlug();
			if (!workspaceSlug) {
				console.warn('Skipping test: No workspace slug found.');
				return;
			}

			// Get first page with limited results
			const result = await atlassianRepositoriesService.list({
				workspace: workspaceSlug,
				pagelen: 1,
			});

			expect(result).toHaveProperty('pagelen');
			// Allow pagelen to be greater than requested if API enforces minimum
			expect(result.pagelen).toBeGreaterThanOrEqual(1);
			expect(result.values.length).toBeLessThanOrEqual(result.pagelen);

			// If there are more items than the page size, expect pagination links
			if (result.size > result.pagelen) {
				expect(result).toHaveProperty('next');

				// Test requesting page 2 if available
				// Extract page parameter from next link if available
				if (result.next) {
					const nextPageUrl = new URL(result.next);
					const pageParam = nextPageUrl.searchParams.get('page');

					if (pageParam) {
						const page2 = parseInt(pageParam, 10);
						const page2Result =
							await atlassianRepositoriesService.list({
								workspace: workspaceSlug,
								pagelen: 1,
								page: page2,
							});

						expect(page2Result).toHaveProperty('page', page2);

						// If both pages have values, verify they're different repositories
						if (
							result.values.length > 0 &&
							page2Result.values.length > 0
						) {
							expect(result.values[0].uuid).not.toBe(
								page2Result.values[0].uuid,
							);
						}
					}
				}
			}
		}, 30000);

		it('should support filtering with q parameter', async () => {
			if (skipIfNoCredentials()) return;

			const workspaceSlug = await getFirstWorkspaceSlug();
			if (!workspaceSlug) {
				console.warn('Skipping test: No workspace slug found.');
				return;
			}

			// First get all repositories to find a potential query term
			const allRepos = await atlassianRepositoriesService.list({
				workspace: workspaceSlug,
			});

			// Skip if no repositories available
			if (allRepos.values.length === 0) {
				console.warn(
					'Skipping query filtering test: No repositories available',
				);
				return;
			}

			// Use the first repo's name as a query term
			const firstRepo = allRepos.values[0];
			// Take just the first word or first few characters to make filter less restrictive
			const queryTerm = firstRepo.name.split(' ')[0];

			// Test the query filter
			try {
				const result = await atlassianRepositoriesService.list({
					workspace: workspaceSlug,
					q: `name~"${queryTerm}"`,
				});

				// Verify basic response structure
				expect(result).toHaveProperty('values');

				// All returned repos should contain the query term in their name
				if (result.values.length > 0) {
					const nameMatches = result.values.some((repo) =>
						repo.name
							.toLowerCase()
							.includes(queryTerm.toLowerCase()),
					);
					expect(nameMatches).toBe(true);
				}
			} catch (error) {
				// If filtering isn't fully supported, we just log it
				console.warn(
					'Query filtering test encountered an error:',
					error instanceof Error ? error.message : String(error),
				);
			}
		}, 30000);

		it('should support sorting with sort parameter', async () => {
			if (skipIfNoCredentials()) return;

			const workspaceSlug = await getFirstWorkspaceSlug();
			if (!workspaceSlug) {
				console.warn('Skipping test: No workspace slug found.');
				return;
			}

			// Skip this test if fewer than 2 repositories (can't verify sort order)
			const checkResult = await atlassianRepositoriesService.list({
				workspace: workspaceSlug,
				pagelen: 2,
			});

			if (checkResult.values.length < 2) {
				console.warn(
					'Skipping sort test: Need at least 2 repositories to verify sort order',
				);
				return;
			}

			// Test sorting by name ascending
			const resultAsc = await atlassianRepositoriesService.list({
				workspace: workspaceSlug,
				sort: 'name',
				pagelen: 2,
			});

			// Test sorting by name descending
			const resultDesc = await atlassianRepositoriesService.list({
				workspace: workspaceSlug,
				sort: '-name',
				pagelen: 2,
			});

			// Verify basic response structure
			expect(resultAsc).toHaveProperty('values');
			expect(resultDesc).toHaveProperty('values');

			// Ensure both responses have at least 2 items to compare
			if (resultAsc.values.length >= 2 && resultDesc.values.length >= 2) {
				// For ascending order, first item should come before second alphabetically
				const ascNameComparison =
					resultAsc.values[0].name.localeCompare(
						resultAsc.values[1].name,
					);
				// For descending order, first item should come after second alphabetically
				const descNameComparison =
					resultDesc.values[0].name.localeCompare(
						resultDesc.values[1].name,
					);

				// Ascending should be ≤ 0 (first before or equal to second)
				expect(ascNameComparison).toBeLessThanOrEqual(0);
				// Descending should be ≥ 0 (first after or equal to second)
				expect(descNameComparison).toBeGreaterThanOrEqual(0);
			}
		}, 30000);

		it('should throw an error for an invalid workspace', async () => {
			if (skipIfNoCredentials()) return;

			const invalidWorkspace =
				'this-workspace-definitely-does-not-exist-12345';

			// Expect the service call to reject with an McpError (likely 404)
			await expect(
				atlassianRepositoriesService.list({
					workspace: invalidWorkspace,
				}),
			).rejects.toThrow();

			// Check for specific error properties
			try {
				await atlassianRepositoriesService.list({
					workspace: invalidWorkspace,
				});
			} catch (e) {
				expect(e).toBeInstanceOf(McpError);
				expect((e as McpError).statusCode).toBe(404); // Expecting Not Found
			}
		}, 30000);
	});

	describe('get', () => {
		// Helper to get a valid repo for testing 'get'
		async function getFirstRepositoryInfo(): Promise<{
			workspace: string;
			repoSlug: string;
		} | null> {
			if (skipIfNoCredentials()) return null;

			const workspaceSlug = await getFirstWorkspaceSlug();
			if (!workspaceSlug) return null;

			try {
				const listResult = await atlassianRepositoriesService.list({
					workspace: workspaceSlug,
					pagelen: 1,
				});

				if (listResult.values.length === 0) return null;

				const fullName = listResult.values[0].full_name;
				// full_name is in format "workspace/repo_slug"
				const [workspace, repoSlug] = fullName.split('/');

				return { workspace, repoSlug };
			} catch (error) {
				console.warn(
					"Could not fetch repository list for 'get' test setup:",
					error,
				);
				return null;
			}
		}

		it('should return details for a valid workspace and repo_slug', async () => {
			const repoInfo = await getFirstRepositoryInfo();
			if (!repoInfo) {
				console.warn('Skipping get test: No repository found.');
				return;
			}

			const result = await atlassianRepositoriesService.get({
				workspace: repoInfo.workspace,
				repo_slug: repoInfo.repoSlug,
			});

			// Verify the response structure based on RepositoryDetailed
			expect(result).toHaveProperty('uuid');
			expect(result).toHaveProperty(
				'full_name',
				`${repoInfo.workspace}/${repoInfo.repoSlug}`,
			);
			expect(result).toHaveProperty('name');
			expect(result).toHaveProperty('type', 'repository');
			expect(result).toHaveProperty('is_private');
			expect(result).toHaveProperty('links');
			expect(result.links).toHaveProperty('html');
			expect(result).toHaveProperty('owner');
			expect(result.owner).toHaveProperty('type');
		}, 30000);

		it('should throw an McpError for a non-existent repo_slug', async () => {
			const workspaceSlug = await getFirstWorkspaceSlug();
			if (!workspaceSlug) {
				console.warn('Skipping test: No workspace slug found.');
				return;
			}

			const invalidRepoSlug = 'this-repo-definitely-does-not-exist-12345';

			// Expect the service call to reject with an McpError (likely 404)
			await expect(
				atlassianRepositoriesService.get({
					workspace: workspaceSlug,
					repo_slug: invalidRepoSlug,
				}),
			).rejects.toThrow(McpError);

			// Check for specific error properties
			try {
				await atlassianRepositoriesService.get({
					workspace: workspaceSlug,
					repo_slug: invalidRepoSlug,
				});
			} catch (e) {
				expect(e).toBeInstanceOf(McpError);
				expect((e as McpError).statusCode).toBe(404); // Expecting Not Found
			}
		}, 30000);

		it('should throw an McpError for a non-existent workspace', async () => {
			if (skipIfNoCredentials()) return;

			const invalidWorkspace =
				'this-workspace-definitely-does-not-exist-12345';
			const invalidRepoSlug = 'some-repo';

			// Expect the service call to reject with an McpError (likely 404)
			await expect(
				atlassianRepositoriesService.get({
					workspace: invalidWorkspace,
					repo_slug: invalidRepoSlug,
				}),
			).rejects.toThrow(McpError);

			// Check for specific error properties
			try {
				await atlassianRepositoriesService.get({
					workspace: invalidWorkspace,
					repo_slug: invalidRepoSlug,
				});
			} catch (e) {
				expect(e).toBeInstanceOf(McpError);
				expect((e as McpError).statusCode).toBe(404); // Expecting Not Found
			}
		}, 30000);
	});
});
</file>

<file path="src/services/vendor.atlassian.repositories.service.ts">
import { createAuthMissingError } from '../utils/error.util.js';
import { Logger } from '../utils/logger.util.js';
import {
	fetchAtlassian,
	getAtlassianCredentials,
} from '../utils/transport.util.js';
import {
	RepositoryDetailed,
	RepositoriesResponse,
	ListRepositoriesParams,
	GetRepositoryParams,
} from './vendor.atlassian.repositories.types.js';

/**
 * Base API path for Bitbucket REST API v2
 * @see https://developer.atlassian.com/cloud/bitbucket/rest/api-group-repositories/
 * @constant {string}
 */
const API_PATH = '/2.0';

/**
 * @namespace VendorAtlassianRepositoriesService
 * @description Service for interacting with Bitbucket Repositories API.
 * Provides methods for listing repositories and retrieving repository details.
 * All methods require valid Atlassian credentials configured in the environment.
 */

// Create a contextualized logger for this file
const serviceLogger = Logger.forContext(
	'services/vendor.atlassian.repositories.service.ts',
);

// Log service initialization
serviceLogger.debug('Bitbucket repositories service initialized');

/**
 * List repositories for a workspace
 * @param {string} workspace - Workspace name or UUID
 * @param {ListRepositoriesParams} [params={}] - Optional parameters
 * @param {string} [params.q] - Query string to filter repositories
 * @param {string} [params.sort] - Property to sort by (e.g., 'name', '-created_on')
 * @param {number} [params.page] - Page number for pagination
 * @param {number} [params.pagelen] - Number of items per page
 * @returns {Promise<RepositoriesResponse>} Response containing repositories
 * @example
 * ```typescript
 * // List repositories in a workspace, filtered and sorted
 * const response = await listRepositories('myworkspace', {
 *   q: 'name~"api"',
 *   sort: 'name',
 *   pagelen: 25
 * });
 * ```
 */
async function list(
	params: ListRepositoriesParams,
): Promise<RepositoriesResponse> {
	const methodLogger = Logger.forContext(
		'services/vendor.atlassian.repositories.service.ts',
		'list',
	);
	methodLogger.debug('Listing Bitbucket repositories with params:', params);

	if (!params.workspace) {
		throw new Error('Workspace parameter is required');
	}

	const credentials = getAtlassianCredentials();
	if (!credentials) {
		throw createAuthMissingError(
			'Atlassian credentials are required for this operation',
		);
	}

	// Construct query parameters
	const queryParams = new URLSearchParams();

	// Add optional query parameters
	if (params.q) {
		queryParams.set('q', params.q);
	}
	if (params.sort) {
		queryParams.set('sort', params.sort);
	}
	if (params.pagelen) {
		queryParams.set('pagelen', params.pagelen.toString());
	}
	if (params.page) {
		queryParams.set('page', params.page.toString());
	}

	const queryString = queryParams.toString()
		? `?${queryParams.toString()}`
		: '';
	const path = `${API_PATH}/repositories/${params.workspace}${queryString}`;

	methodLogger.debug(`Sending request to: ${path}`);
	return fetchAtlassian<RepositoriesResponse>(credentials, path);
}

/**
 * Get detailed information about a specific Bitbucket repository
 *
 * Retrieves comprehensive details about a single repository.
 *
 * @async
 * @memberof VendorAtlassianRepositoriesService
 * @param {GetRepositoryParams} params - Parameters for the request
 * @param {string} params.workspace - The workspace slug
 * @param {string} params.repo_slug - The repository slug
 * @returns {Promise<RepositoryDetailed>} Promise containing the detailed repository information
 * @throws {Error} If Atlassian credentials are missing or API request fails
 * @example
 * // Get repository details
 * const repository = await get({
 *   workspace: 'my-workspace',
 *   repo_slug: 'my-repo'
 * });
 */
async function get(params: GetRepositoryParams): Promise<RepositoryDetailed> {
	const methodLogger = Logger.forContext(
		'services/vendor.atlassian.repositories.service.ts',
		'get',
	);
	methodLogger.debug(
		`Getting Bitbucket repository: ${params.workspace}/${params.repo_slug}`,
	);

	if (!params.workspace || !params.repo_slug) {
		throw new Error('Both workspace and repo_slug parameters are required');
	}

	const credentials = getAtlassianCredentials();
	if (!credentials) {
		throw createAuthMissingError(
			'Atlassian credentials are required for this operation',
		);
	}

	const path = `${API_PATH}/repositories/${params.workspace}/${params.repo_slug}`;

	methodLogger.debug(`Sending request to: ${path}`);
	return fetchAtlassian<RepositoryDetailed>(credentials, path);
}

export default { list, get };
</file>

<file path="src/services/vendor.atlassian.repositories.types.ts">
/**
 * Types for Atlassian Bitbucket Repositories API
 */

/**
 * Repository SCM type
 */
export type RepositorySCM = 'git' | 'hg';

/**
 * Repository fork policy
 */
export type RepositoryForkPolicy =
	| 'allow_forks'
	| 'no_public_forks'
	| 'no_forks';

/**
 * Repository links object
 */
export interface RepositoryLinks {
	self?: { href: string; name?: string };
	html?: { href: string; name?: string };
	avatar?: { href: string; name?: string };
	pullrequests?: { href: string; name?: string };
	commits?: { href: string; name?: string };
	forks?: { href: string; name?: string };
	watchers?: { href: string; name?: string };
	downloads?: { href: string; name?: string };
	clone?: Array<{ href: string; name?: string }>;
	hooks?: { href: string; name?: string };
	issues?: { href: string; name?: string };
}

/**
 * Repository owner object
 */
export interface RepositoryOwner {
	type: 'user' | 'team';
	username?: string;
	display_name?: string;
	uuid?: string;
	links?: {
		self?: { href: string };
		html?: { href: string };
		avatar?: { href: string };
	};
}

/**
 * Repository branch object
 */
export interface RepositoryBranch {
	type: 'branch';
	name: string;
}

/**
 * Repository project object
 */
export interface RepositoryProject {
	type: 'project';
	key: string;
	uuid: string;
	name: string;
	links?: {
		self?: { href: string };
		html?: { href: string };
	};
}

/**
 * Repository object returned from the API
 */
export interface Repository {
	type: 'repository';
	uuid: string;
	full_name: string;
	name: string;
	description?: string;
	is_private: boolean;
	fork_policy?: RepositoryForkPolicy;
	created_on?: string;
	updated_on?: string;
	size?: number;
	language?: string;
	has_issues?: boolean;
	has_wiki?: boolean;
	scm: RepositorySCM;
	owner: RepositoryOwner;
	mainbranch?: RepositoryBranch;
	project?: RepositoryProject;
	links: RepositoryLinks;
}

/**
 * Extended repository object with optional fields
 * @remarks Currently identical to Repository, but allows for future extension
 */
export type RepositoryDetailed = Repository;

/**
 * Parameters for listing repositories
 */
export interface ListRepositoriesParams {
	workspace: string;
	q?: string;
	sort?: string;
	page?: number;
	pagelen?: number;
}

/**
 * Parameters for getting a repository by identifier
 */
export interface GetRepositoryParams {
	workspace: string;
	repo_slug: string;
}

/**
 * API response for listing repositories
 */
export interface RepositoriesResponse {
	pagelen: number;
	page: number;
	size: number;
	next?: string;
	previous?: string;
	values: Repository[];
}
</file>

<file path="src/services/vendor.atlassian.search.service.ts">
import { fetchAtlassian } from '../utils/transport.util.js';
import { Logger } from '../utils/logger.util.js';
import { URLSearchParams } from 'url';
import { getAtlassianCredentials } from '../utils/transport.util.js';

const logger = Logger.forContext('services/vendor.atlassian.search.service.ts');

/**
 * Search options for code search in a workspace
 */
export interface SearchCodeParams {
	workspaceSlug: string;
	searchQuery: string;
	page?: number;
	pageLen?: number;
	repoSlug?: string;
	fields?: string;
}

/**
 * Search options for commit search in a repository
 */
export interface SearchCommitsParams {
	workspaceSlug: string;
	repoSlug: string;
	searchQuery: string;
	page?: number;
	pageLen?: number;
	fields?: string;
}

/**
 * Response type for code search API
 */
export interface CodeSearchResponse {
	size: number;
	page: number;
	pagelen: number;
	query_substituted: boolean;
	values: CodeSearchResult[];
}

/**
 * Response type for commits API
 */
export interface CommitsResponse {
	size: number;
	page: number;
	pagelen: number;
	next?: string;
	previous?: string;
	values: CommitResult[];
}

/**
 * Commit result type
 */
export interface CommitResult {
	hash: string;
	date: string;
	message: string;
	type: string;
	author: {
		raw: string;
		type: string;
		user?: {
			display_name: string;
			account_id: string;
			links: {
				self: { href: string };
				avatar: { href: string };
			};
		};
	};
	links: {
		self: { href: string };
		html: { href: string };
	};
	repository?: {
		name: string;
		full_name: string;
		links: {
			self: { href: string };
			html: { href: string };
		};
	};
}

/**
 * Code search result type
 */
export interface CodeSearchResult {
	type: string;
	content_match_count: number;
	content_matches: ContentMatch[];
	path_matches: PathMatch[];
	file: {
		path: string;
		type: string;
		links: {
			self: {
				href: string;
			};
		};
	};
}

/**
 * Content match type
 */
export interface ContentMatch {
	lines: {
		line: number;
		segments: {
			text: string;
			match?: boolean;
		}[];
	}[];
}

/**
 * Path match type
 */
export interface PathMatch {
	text: string;
	match?: boolean;
}

/**
 * Search for commits in a repository using the Bitbucket API
 *
 * @param {SearchCommitsParams} params - Parameters for the commit search
 * @returns {Promise<CommitsResponse>} The search results from the Bitbucket API
 */
export async function searchCommits(
	params: SearchCommitsParams,
): Promise<CommitsResponse> {
	// Build the query parameters - the Bitbucket API allows searching commits by message
	const queryParams = new URLSearchParams();

	// If search query is provided, add it as a q parameter
	if (params.searchQuery) {
		queryParams.append('q', `message ~ "${params.searchQuery}"`);
	}

	// Add optional pagination parameters
	if (params.page) {
		queryParams.append('page', params.page.toString());
	}

	if (params.pageLen) {
		queryParams.append('pagelen', params.pageLen.toString());
	}

	// Add optional fields parameter for enhanced responses
	if (params.fields) {
		queryParams.append('fields', params.fields);
	}

	// Get credentials for API call
	const credentials = getAtlassianCredentials();
	if (!credentials) {
		throw new Error('No Atlassian credentials available');
	}

	// Set useBitbucketAuth to true since we're calling the Bitbucket API
	credentials.useBitbucketAuth = true;

	// Create API path for Bitbucket commits
	const path = `/2.0/repositories/${params.workspaceSlug}/${params.repoSlug}/commits${
		queryParams.toString() ? '?' + queryParams.toString() : ''
	}`;

	// Track searching commits in repository
	logger.debug(
		`Searching commits in repository: ${params.workspaceSlug}/${params.repoSlug}`,
		{
			searchQuery: params.searchQuery,
			path,
		},
	);

	// Call Bitbucket API with credentials and path
	return fetchAtlassian(credentials, path);
}

/**
 * Search for code in a workspace using the Bitbucket API
 *
 * @param {SearchCodeParams} params - Parameters for the code search
 * @returns {Promise<CodeSearchResponse>} The search results from the Bitbucket API
 */
export async function searchCode(
	params: SearchCodeParams,
): Promise<CodeSearchResponse> {
	// If repoSlug is provided, enhance the search query with repo: syntax
	const searchQuery = params.repoSlug
		? `${params.searchQuery} repo:${params.repoSlug}`
		: params.searchQuery;

	// Build the query parameters
	const queryParams = new URLSearchParams({
		search_query: searchQuery,
	});

	// Add optional pagination parameters
	if (params.page) {
		queryParams.append('page', params.page.toString());
	}

	if (params.pageLen) {
		queryParams.append('pagelen', params.pageLen.toString());
	}

	// Add optional fields parameter for enhanced responses
	if (params.fields) {
		queryParams.append('fields', params.fields);
	}

	// Get credentials for API call
	const credentials = getAtlassianCredentials();
	if (!credentials) {
		throw new Error('No Atlassian credentials available');
	}

	// Set useBitbucketAuth to true since we're calling the Bitbucket API
	credentials.useBitbucketAuth = true;

	// Create API path for Bitbucket code search
	const path = `/2.0/workspaces/${params.workspaceSlug}/search/code?${queryParams.toString()}`;

	// Track searching code in workspace
	logger.debug(`Searching code in workspace: ${params.workspaceSlug}`, {
		searchQuery,
		path,
	});

	// Call Bitbucket API with credentials and path
	return fetchAtlassian(credentials, path);
}

export default {
	searchCode,
	searchCommits,
};
</file>

<file path="src/services/vendor.atlassian.types.ts">
/**
 * Common types for Atlassian Bitbucket API
 */

/**
 * Label object
 */
export interface Label {
	id: string;
	name: string;
	prefix?: string;
}

/**
 * Operation object
 */
export interface Operation {
	operation: string;
	targetType: string;
}

/**
 * Optional field metadata
 */
export interface OptionalFieldMeta {
	hasMore: boolean;
}

/**
 * Optional field links
 */
export interface OptionalFieldLinks {
	next?: string;
}

/**
 * Common response links
 */
export interface ResponseLinks {
	next?: string;
	base?: string;
	self?: string;
	context?: string;
}

/**
 * Generic paginated response structure
 */
export interface PaginatedResponse<T> {
	results: T[];
	_links: ResponseLinks;
}

/**
 * Version object
 */
export interface Version {
	createdAt: string;
	message?: string;
	number: number;
	minorEdit?: boolean;
	authorId: string;
}

/**
 * Content property object
 */
export interface ContentProperty {
	id: string;
	key: string;
	value: string;
}

/**
 * Common description format types
 */
export type DescriptionFormat = 'plain' | 'view';

/**
 * Generic content representation
 */
export interface ContentRepresentation {
	value: string;
	representation: string;
}

/**
 * Common search excerpt strategy
 */
export type ExcerptStrategy =
	| 'highlight'
	| 'indexed'
	| 'none'
	| 'highlight_unescaped'
	| 'indexed_unescaped';

export interface ApiErrorDetail {
	/**
	 * The error message
	 */
	message: string;
}

export interface ApiError {
	/**
	 * Array of error details
	 */
	errorMessages: string[];
	/**
	 * Object with error details as key-value pairs
	 */
	errors: Record<string, string>;
	/**
	 * HTTP status code
	 */
	status?: number;
	/**
	 * Original error object (for debugging)
	 */
	originalError?: unknown;
}

export interface ApiPagination {
	/**
	 * Maximum number of items to return per page
	 */
	maxResults?: number;
	/**
	 * Index of the first item to return (0-based)
	 */
	startAt?: number;
}

export interface ApiResponse<T> {
	/**
	 * The response data
	 */
	data: T;
	/**
	 * The HTTP status code
	 */
	status: number;
	/**
	 * The HTTP status text
	 */
	statusText: string;
	/**
	 * The response headers
	 */
	headers: Record<string, string>;
}

export interface PaginatedResult<T> {
	/**
	 * The array of results
	 */
	values: T[];
	/**
	 * The index of the first item returned (0-based)
	 */
	startAt: number;
	/**
	 * The maximum number of items that could be returned
	 */
	maxResults: number;
	/**
	 * The total number of items
	 */
	total: number;
	/**
	 * Whether the maximum number of items has been reached
	 */
	isLast: boolean;
}

export interface FormattedResult {
	/**
	 * The formatted content as Markdown
	 */
	content: string;
}
</file>

<file path="src/services/vendor.atlassian.workspaces.service.ts">
import { createAuthMissingError } from '../utils/error.util.js';
import { Logger } from '../utils/logger.util.js';
import {
	fetchAtlassian,
	getAtlassianCredentials,
} from '../utils/transport.util.js';
import {
	WorkspaceDetailed,
	WorkspacePermissionsResponse,
	ListWorkspacesParams,
} from './vendor.atlassian.workspaces.types.js';

/**
 * Base API path for Bitbucket REST API v2
 * @see https://developer.atlassian.com/cloud/bitbucket/rest/api-group-workspaces/
 * @constant {string}
 */
const API_PATH = '/2.0';

/**
 * @namespace VendorAtlassianWorkspacesService
 * @description Service for interacting with Bitbucket Workspaces API.
 * Provides methods for listing workspaces and retrieving workspace details.
 * All methods require valid Atlassian credentials configured in the environment.
 */

// Create a contextualized logger for this file
const serviceLogger = Logger.forContext(
	'services/vendor.atlassian.workspaces.service.ts',
);

// Log service initialization
serviceLogger.debug('Bitbucket workspaces service initialized');

/**
 * List Bitbucket workspaces with optional filtering and pagination
 *
 * Retrieves a list of workspaces from Bitbucket with support for various filters
 * and pagination options.
 *
 * NOTE: The /2.0/user/permissions/workspaces endpoint does not support sorting,
 * despite the ListWorkspacesParams type including a sort parameter.
 *
 * @async
 * @memberof VendorAtlassianWorkspacesService
 * @param {ListWorkspacesParams} [params={}] - Optional parameters for customizing the request
 * @param {string} [params.q] - Filter by workspace name
 * @param {number} [params.page] - Page number
 * @param {number} [params.pagelen] - Number of items per page
 * @returns {Promise<WorkspacePermissionsResponse>} Promise containing the workspaces response with results and pagination info
 * @throws {Error} If Atlassian credentials are missing or API request fails
 * @example
 * // List workspaces with pagination
 * const response = await list({
 *   pagelen: 10
 * });
 */
async function list(
	params: ListWorkspacesParams = {},
): Promise<WorkspacePermissionsResponse> {
	const methodLogger = Logger.forContext(
		'services/vendor.atlassian.workspaces.service.ts',
		'list',
	);
	methodLogger.debug('Listing Bitbucket workspaces with params:', params);

	const credentials = getAtlassianCredentials();
	if (!credentials) {
		throw createAuthMissingError(
			'Atlassian credentials are required for this operation',
		);
	}

	// Build query parameters
	const queryParams = new URLSearchParams();

	// Add optional query parameters if provided
	// NOTE: Sort is intentionally not included as the /2.0/user/permissions/workspaces endpoint
	// does not support sorting on any field
	if (params.q) {
		queryParams.set('q', params.q);
	}
	if (params.pagelen) {
		queryParams.set('pagelen', params.pagelen.toString());
	}
	if (params.page) {
		queryParams.set('page', params.page.toString());
	}

	const queryString = queryParams.toString()
		? `?${queryParams.toString()}`
		: '';
	const path = `${API_PATH}/user/permissions/workspaces${queryString}`;

	methodLogger.debug(`Sending request to: ${path}`);
	return fetchAtlassian<WorkspacePermissionsResponse>(credentials, path);
}

/**
 * Get detailed information about a specific Bitbucket workspace
 *
 * Retrieves comprehensive details about a single workspace.
 *
 * @async
 * @memberof VendorAtlassianWorkspacesService
 * @param {string} workspace - The workspace slug
 * @returns {Promise<WorkspaceDetailed>} Promise containing the detailed workspace information
 * @throws {Error} If Atlassian credentials are missing or API request fails
 * @example
 * // Get workspace details
 * const workspace = await get('my-workspace');
 */
async function get(workspace: string): Promise<WorkspaceDetailed> {
	const methodLogger = Logger.forContext(
		'services/vendor.atlassian.workspaces.service.ts',
		'get',
	);
	methodLogger.debug(`Getting Bitbucket workspace with slug: ${workspace}`);

	const credentials = getAtlassianCredentials();
	if (!credentials) {
		throw createAuthMissingError(
			'Atlassian credentials are required for this operation',
		);
	}

	// Currently no query parameters for workspace details API
	const path = `${API_PATH}/workspaces/${workspace}`;

	methodLogger.debug(`Sending request to: ${path}`);
	return fetchAtlassian<WorkspaceDetailed>(credentials, path);
}

export default { list, get };
</file>

<file path="src/services/vendor.atlassian.workspaces.test.ts">
import atlassianWorkspacesService from './vendor.atlassian.workspaces.service.js';
import { getAtlassianCredentials } from '../utils/transport.util.js';
import { config } from '../utils/config.util.js';
import { McpError } from '../utils/error.util.js';

describe('Vendor Atlassian Workspaces Service', () => {
	// Load configuration and check for credentials before all tests
	beforeAll(() => {
		config.load(); // Ensure config is loaded
		const credentials = getAtlassianCredentials();
		if (!credentials) {
			console.warn(
				'Skipping Atlassian Workspaces Service tests: No credentials available',
			);
		}
	});

	// Helper function to skip tests when credentials are missing
	const skipIfNoCredentials = () => !getAtlassianCredentials();

	describe('list', () => {
		it('should return a list of workspaces (permissions)', async () => {
			if (skipIfNoCredentials()) return;

			const result = await atlassianWorkspacesService.list();

			// Verify the response structure based on WorkspacePermissionsResponse
			expect(result).toHaveProperty('values');
			expect(Array.isArray(result.values)).toBe(true);
			expect(result).toHaveProperty('pagelen'); // Bitbucket uses pagelen
			expect(result).toHaveProperty('page');
			expect(result).toHaveProperty('size');

			if (result.values.length > 0) {
				const membership = result.values[0];
				expect(membership).toHaveProperty(
					'type',
					'workspace_membership',
				);
				expect(membership).toHaveProperty('permission');
				expect(membership).toHaveProperty('user');
				expect(membership).toHaveProperty('workspace');
				expect(membership.workspace).toHaveProperty('slug');
				expect(membership.workspace).toHaveProperty('uuid');
			}
		}, 30000); // Increased timeout

		it('should support pagination with pagelen', async () => {
			if (skipIfNoCredentials()) return;

			const result = await atlassianWorkspacesService.list({
				pagelen: 1,
			});

			expect(result).toHaveProperty('pagelen');
			// Allow pagelen to be greater than requested if API enforces minimum
			expect(result.pagelen).toBeGreaterThanOrEqual(1);
			expect(result.values.length).toBeLessThanOrEqual(result.pagelen); // Items should not exceed pagelen

			if (result.size > result.pagelen) {
				// If there are more items than the page size, expect pagination links
				expect(result).toHaveProperty('next');
			}
		}, 30000);

		it('should handle query filtering if supported by the API', async () => {
			if (skipIfNoCredentials()) return;

			// First get all workspaces to find a potential query term
			const allWorkspaces = await atlassianWorkspacesService.list();

			// Skip if no workspaces available
			if (allWorkspaces.values.length === 0) {
				console.warn(
					'Skipping query filtering test: No workspaces available',
				);
				return;
			}

			// Try to search using a workspace name - note that this might not work if
			// the API doesn't fully support 'q' parameter for this endpoint
			// This test basically checks that the request doesn't fail
			const firstWorkspace = allWorkspaces.values[0].workspace;
			try {
				const result = await atlassianWorkspacesService.list({
					q: `workspace.name="${firstWorkspace.name}"`,
				});

				// We're mostly testing that this request completes without error
				expect(result).toHaveProperty('values');

				// The result might be empty if filtering isn't supported,
				// so we don't assert on the number of results returned
			} catch (error) {
				// If filtering isn't supported, the API might return an error
				// This is acceptable, so we just log it
				console.warn(
					'Query filtering test encountered an error:',
					error instanceof Error ? error.message : String(error),
				);
			}
		}, 30000);
	});

	describe('get', () => {
		// Helper to get a valid slug for testing 'get'
		async function getFirstWorkspaceSlug(): Promise<string | null> {
			if (skipIfNoCredentials()) return null;
			try {
				const listResult = await atlassianWorkspacesService.list({
					pagelen: 1,
				});
				return listResult.values.length > 0
					? listResult.values[0].workspace.slug
					: null;
			} catch (error) {
				console.warn(
					"Could not fetch workspace list for 'get' test setup:",
					error,
				);
				return null;
			}
		}

		it('should return details for a valid workspace slug', async () => {
			const workspaceSlug = await getFirstWorkspaceSlug();
			if (!workspaceSlug) {
				console.warn('Skipping get test: No workspace slug found.');
				return;
			}

			const result = await atlassianWorkspacesService.get(workspaceSlug);

			// Verify the response structure based on WorkspaceDetailed
			expect(result).toHaveProperty('uuid');
			expect(result).toHaveProperty('slug', workspaceSlug);
			expect(result).toHaveProperty('name');
			expect(result).toHaveProperty('type', 'workspace');
			expect(result).toHaveProperty('links');
			expect(result.links).toHaveProperty('html');
		}, 30000);

		it('should throw an McpError for an invalid workspace slug', async () => {
			if (skipIfNoCredentials()) return;

			const invalidSlug = 'this-slug-definitely-does-not-exist-12345';

			// Expect the service call to reject with an McpError (likely 404)
			await expect(
				atlassianWorkspacesService.get(invalidSlug),
			).rejects.toThrow(McpError);

			// Optionally check the status code if needed
			try {
				await atlassianWorkspacesService.get(invalidSlug);
			} catch (e) {
				expect(e).toBeInstanceOf(McpError);
				expect((e as McpError).statusCode).toBe(404); // Expecting Not Found
			}
		}, 30000);
	});
});
</file>

<file path="src/services/vendor.atlassian.workspaces.types.ts">
/**
 * Types for Atlassian Bitbucket Workspaces API
 */

/**
 * Workspace type (basic object)
 */
export type WorkspaceType = 'workspace';

/**
 * Workspace user object
 */
export interface WorkspaceUser {
	type: 'user';
	uuid: string;
	nickname: string;
	display_name: string;
}

/**
 * Workspace permission type
 */
export type WorkspacePermission = 'owner' | 'collaborator' | 'member';

/**
 * Workspace membership object
 */
export interface WorkspaceMembership {
	type: 'workspace_membership';
	permission: WorkspacePermission;
	last_accessed?: string;
	added_on?: string;
	user: WorkspaceUser;
	workspace: Workspace;
}

/**
 * Workspace links object
 */
export interface WorkspaceLinks {
	avatar?: { href: string; name?: string };
	html?: { href: string; name?: string };
	members?: { href: string; name?: string };
	owners?: { href: string; name?: string };
	projects?: { href: string; name?: string };
	repositories?: { href: string; name?: string };
	snippets?: { href: string; name?: string };
	self?: { href: string; name?: string };
}

/**
 * Workspace forking mode
 */
export type WorkspaceForkingMode =
	| 'allow_forks'
	| 'no_public_forks'
	| 'no_forks';

/**
 * Workspace object returned from the API
 */
export interface Workspace {
	type: WorkspaceType;
	uuid: string;
	name: string;
	slug: string;
	is_private?: boolean;
	is_privacy_enforced?: boolean;
	forking_mode?: WorkspaceForkingMode;
	created_on?: string;
	updated_on?: string;
	links: WorkspaceLinks;
}

/**
 * Extended workspace object with optional fields
 * @remarks Currently identical to Workspace, but allows for future extension
 */
export type WorkspaceDetailed = Workspace;

/**
 * Parameters for listing workspaces
 */
export interface ListWorkspacesParams {
	/**
	 * Sort parameter
	 * @deprecated The /2.0/user/permissions/workspaces endpoint does not support sorting,
	 * despite this parameter being included in the type. Any value provided will be ignored.
	 */
	sort?: string;
	q?: string;
	page?: number;
	pagelen?: number;
}

/**
 * Parameters for getting a workspace by ID
 * @remarks This is intentionally left as a Record<string, never> for future extensibility
 */
export type GetWorkspaceByIdParams = Record<string, never>;

/**
 * API response for listing workspaces
 */
export interface WorkspacesResponse {
	pagelen: number;
	page: number;
	size: number;
	values: WorkspaceMembership[];
}

/**
 * API response for user permissions on workspaces
 */
export interface WorkspacePermissionsResponse {
	pagelen: number;
	page: number;
	size: number;
	next?: string;
	previous?: string;
	values: WorkspaceMembership[];
}
</file>

<file path="src/tools/atlassian.pullrequests.tool.ts">
import { McpServer } from '@modelcontextprotocol/sdk/server/mcp.js';
import { Logger } from '../utils/logger.util.js';
import { formatErrorForMcpTool } from '../utils/error.util.js';
import {
	ListPullRequestsToolArgs,
	ListPullRequestsToolArgsType,
	GetPullRequestToolArgs,
	GetPullRequestToolArgsType,
	ListPullRequestCommentsToolArgs,
	ListPullRequestCommentsToolArgsType,
	AddPullRequestCommentToolArgs,
	AddPullRequestCommentToolArgsType,
	CreatePullRequestToolArgs,
	CreatePullRequestToolArgsType,
} from './atlassian.pullrequests.types.js';

import atlassianPullRequestsController from '../controllers/atlassian.pullrequests.controller.js';

// Create a contextualized logger for this file
const toolLogger = Logger.forContext('tools/atlassian.pullrequests.tool.ts');

// Log tool initialization
toolLogger.debug('Bitbucket pull requests tool initialized');

/**
 * MCP Tool: List Bitbucket Pull Requests
 *
 * Lists pull requests for a specific repository with optional filtering.
 * Returns a formatted markdown response with pull request details.
 *
 * @param args - Tool arguments for filtering pull requests
 * @returns MCP response with formatted pull requests list
 * @throws Will return error message if pull request listing fails
 */
async function listPullRequests(args: ListPullRequestsToolArgsType) {
	const methodLogger = Logger.forContext(
		'tools/atlassian.pullrequests.tool.ts',
		'listPullRequests',
	);
	methodLogger.debug('Listing Bitbucket pull requests with filters:', args);

	try {
		// Pass the filter options to the controller
		const message = await atlassianPullRequestsController.list({
			workspaceSlug: args.workspaceSlug,
			repoSlug: args.repoSlug,
			state: args.state,
			query: args.query,
			limit: args.limit,
			cursor: args.cursor,
		});

		methodLogger.debug(
			'Successfully retrieved pull requests from controller',
			message,
		);

		return {
			content: [
				{
					type: 'text' as const,
					text: message.content,
				},
			],
		};
	} catch (error) {
		methodLogger.error('Failed to list pull requests', error);
		return formatErrorForMcpTool(error);
	}
}

/**
 * MCP Tool: Get Bitbucket Pull Request Details
 *
 * Retrieves detailed information about a specific Bitbucket pull request.
 * Returns a formatted markdown response with pull request metadata.
 *
 * @param args - Tool arguments containing workspace, repository, and PR identifiers
 * @returns MCP response with formatted pull request details
 * @throws Will return error message if pull request retrieval fails
 */
async function getPullRequest(args: GetPullRequestToolArgsType) {
	const methodLogger = Logger.forContext(
		'tools/atlassian.pullrequests.tool.ts',
		'getPullRequest',
	);

	methodLogger.debug(
		`Retrieving pull request details for ${args.workspaceSlug}/${args.repoSlug}/${args.prId}`,
		args,
	);

	try {
		const message = await atlassianPullRequestsController.get({
			workspaceSlug: args.workspaceSlug,
			repoSlug: args.repoSlug,
			prId: args.prId,
		});

		methodLogger.debug(
			'Successfully retrieved pull request details from controller',
			message,
		);

		return {
			content: [
				{
					type: 'text' as const,
					text: message.content,
				},
			],
		};
	} catch (error) {
		methodLogger.error('Failed to get pull request details', error);
		return formatErrorForMcpTool(error);
	}
}

/**
 * MCP Tool: List Bitbucket Pull Request Comments
 *
 * Lists comments for a specific pull request, including general comments and inline code comments.
 * Returns a formatted markdown response with comment details.
 *
 * @param args - Tool arguments containing workspace, repository, and PR identifiers
 * @returns MCP response with formatted pull request comments
 * @throws Will return error message if comment retrieval fails
 */
async function listPullRequestComments(
	args: ListPullRequestCommentsToolArgsType,
) {
	const methodLogger = Logger.forContext(
		'tools/atlassian.pullrequests.tool.ts',
		'listPullRequestComments',
	);

	methodLogger.debug(
		`Retrieving comments for pull request ${args.workspaceSlug}/${args.repoSlug}/${args.prId}`,
		args,
	);

	try {
		const message = await atlassianPullRequestsController.listComments({
			workspaceSlug: args.workspaceSlug,
			repoSlug: args.repoSlug,
			prId: args.prId,
			limit: args.limit,
			cursor: args.cursor,
		});

		methodLogger.debug(
			'Successfully retrieved pull request comments from controller',
			message,
		);

		return {
			content: [
				{
					type: 'text' as const,
					text: message.content,
				},
			],
		};
	} catch (error) {
		methodLogger.error('Failed to get pull request comments', error);
		return formatErrorForMcpTool(error);
	}
}

/**
 * MCP Tool: Add Comment to Bitbucket Pull Request
 *
 * Adds a new comment to a specific Bitbucket pull request.
 * The comment can be either a general comment or an inline code comment.
 *
 * @param args - Tool arguments containing workspace, repository, PR identifiers, and comment content
 * @returns MCP response confirming the comment was added
 * @throws Will return error message if comment addition fails
 */
async function addPullRequestComment(args: AddPullRequestCommentToolArgsType) {
	const methodLogger = Logger.forContext(
		'tools/atlassian.pullrequests.tool.ts',
		'addPullRequestComment',
	);

	methodLogger.debug(
		`Adding comment to pull request ${args.workspaceSlug}/${args.repoSlug}/${args.prId}`,
		args,
	);

	try {
		const message = await atlassianPullRequestsController.addComment({
			workspaceSlug: args.workspaceSlug,
			repoSlug: args.repoSlug,
			prId: args.prId,
			content: args.content,
			inline: args.inline,
		});

		methodLogger.debug('Successfully added pull request comment', message);

		return {
			content: [
				{
					type: 'text' as const,
					text: message.content,
				},
			],
		};
	} catch (error) {
		methodLogger.error('Failed to add pull request comment', error);
		return formatErrorForMcpTool(error);
	}
}

/**
 * MCP Tool: Create a new Bitbucket Pull Request
 *
 * Creates a new pull request between two branches in a repository.
 * Returns a formatted markdown response with the created pull request details.
 *
 * @param args - Tool arguments for creating a pull request
 * @returns MCP response with formatted pull request details
 * @throws Will return error message if pull request creation fails
 */
async function createPullRequest(args: CreatePullRequestToolArgsType) {
	const methodLogger = Logger.forContext(
		'tools/atlassian.pullrequests.tool.ts',
		'createPullRequest',
	);
	methodLogger.debug(
		`Creating pull request in ${args.workspaceSlug}/${args.repoSlug} from ${args.sourceBranch}`,
		args,
	);

	try {
		const message = await atlassianPullRequestsController.create({
			workspaceSlug: args.workspaceSlug,
			repoSlug: args.repoSlug,
			title: args.title,
			sourceBranch: args.sourceBranch,
			destinationBranch: args.destinationBranch,
			description: args.description,
			closeSourceBranch: args.closeSourceBranch,
		});

		methodLogger.debug('Successfully created pull request', message);

		return {
			content: [
				{
					type: 'text' as const,
					text: message.content,
				},
			],
		};
	} catch (error) {
		methodLogger.error('Failed to create pull request', error);
		return formatErrorForMcpTool(error);
	}
}

/**
 * Register Atlassian Pull Requests MCP Tools
 *
 * Registers the pull requests-related tools with the MCP server.
 * Each tool is registered with its schema, description, and handler function.
 *
 * @param server - The MCP server instance to register tools with
 */
function registerTools(server: McpServer) {
	const methodLogger = Logger.forContext(
		'tools/atlassian.pullrequests.tool.ts',
		'registerTools',
	);
	methodLogger.debug('Registering Atlassian Pull Requests tools...');

	// Register the list pull requests tool
	server.tool(
		'list_pull_requests',
		`List pull requests for a specific Bitbucket repository, with optional filtering by state or query text. Requires 'workspaceSlug' and 'repoSlug'.

        PURPOSE: Discover pull requests within a given repository and retrieve their IDs, titles, states, authors, and branches. Essential for finding the 'prId' needed for the 'get_pull_request' tool.

        WHEN TO USE:
        - To find open, merged, declined, or superseded pull requests within a specific repository.
        - To get a list of recent PR activity for a repository.
        - To search for PRs containing specific text in their title or description ('query' parameter).
        - To obtain 'prId' values for use with 'get_pull_request'.
        - Requires known 'workspaceSlug' and 'repoSlug'.

        WHEN NOT TO USE:
        - When you don't know the 'workspaceSlug' or 'repoSlug' (use workspace/repository listing tools first).
        - When you already have the 'prId' and need full details (use 'get_pull_request').
        - When you need repository information (use repository tools).

        RETURNS: Formatted list of pull requests including ID, title, state, author, source/destination branches, a snippet of the description, and URL. Includes pagination details if applicable.

        EXAMPLES:
        - List open PRs: { workspaceSlug: "my-team", repoSlug: "backend-api", state: "OPEN" }
        - List merged PRs: { workspaceSlug: "my-team", repoSlug: "backend-api", state: "MERGED" }
        - Search PR titles/descriptions: { workspaceSlug: "my-team", repoSlug: "backend-api", query: "bugfix" }
        - Paginate results: { workspaceSlug: "my-team", repoSlug: "backend-api", limit: 10, cursor: "next-page-token" }

        ERRORS:
        - Repository not found: Verify 'workspaceSlug' and 'repoSlug'.
        - Permission errors: Ensure access to the repository's pull requests.
        - Invalid state: Ensure 'state' is one of OPEN, MERGED, DECLINED, SUPERSEDED.`,
		ListPullRequestsToolArgs.shape,
		listPullRequests,
	);

	// Register the get pull request details tool
	server.tool(
		'get_pull_request',
		`Get detailed information about a specific Bitbucket pull request using its workspace slug, repository slug, and pull request ID. Requires 'workspaceSlug', 'repoSlug', and 'prId'.

        PURPOSE: Retrieves comprehensive details for a *known* pull request, including its full description, state, author, reviewers, source/destination branches, and links to related resources like commits and diffs.

        WHEN TO USE:
        - When you need the full context, description, or reviewer list for a *specific* pull request.
        - After using 'list_pull_requests' to identify the target 'prId'.
        - To get links to view the PR diff, commits, or comments in the browser.
        - Requires known 'workspaceSlug', 'repoSlug', and 'prId'.

        WHEN NOT TO USE:
        - When you don't know the 'prId' (use 'list_pull_requests' first).
        - When you only need a list of pull requests (use 'list_pull_requests').
        - When you need repository information (use repository tools).

        RETURNS: Detailed pull request information including title, full description, state, author, reviewers, branches, and links. Fetches all available details by default.

        EXAMPLES:
        - Get details for a specific PR: { workspaceSlug: "my-team", repoSlug: "backend-api", prId: "42" }

        ERRORS:
        - Pull Request not found: Verify 'workspaceSlug', 'repoSlug', and 'prId' are correct.
        - Repository not found: Verify 'workspaceSlug' and 'repoSlug'.
        - Permission errors: Ensure access to view the specified pull request.`,
		GetPullRequestToolArgs.shape,
		getPullRequest,
	);

	// Register the list pull request comments tool
	server.tool(
		'list_pr_comments',
		`List comments on a specific Bitbucket pull request using its workspace slug, repository slug, and pull request ID. Requires 'workspaceSlug', 'repoSlug', and 'prId'.

        PURPOSE: View all review feedback, discussions, and task comments on a pull request to understand code review context without accessing the web UI.

        WHEN TO USE:
        - To see what reviewers have said about a pull request.
        - To find inline code comments and their context (file, line number).
        - After identifying a PR of interest via 'list_pull_requests'.
        - When you need to understand review history, discussions, and decisions.
        - Requires known 'workspaceSlug', 'repoSlug', and 'prId'.

        WHEN NOT TO USE:
        - When you don't know the pull request ID (use 'list_pull_requests' first).
        - When you need the PR's metadata but not comments (use 'get_pull_request').
        - When you need to post new comments (not supported).

        RETURNS: Formatted list of comments with author, date, content, and for inline comments: the file path and line numbers. General and inline comments are included.

        EXAMPLES:
        - List all comments on a PR: { workspaceSlug: "my-team", repoSlug: "backend-api", prId: "42" }
        - Paginate results: { workspaceSlug: "my-team", repoSlug: "backend-api", prId: "42", limit: 25, cursor: "next-page-token" }

        ERRORS:
        - Pull Request not found: Verify 'workspaceSlug', 'repoSlug', and 'prId' are correct.
        - Repository not found: Verify 'workspaceSlug' and 'repoSlug'.
        - Permission errors: Ensure access to view the specified pull request comments.`,
		ListPullRequestCommentsToolArgs.shape,
		listPullRequestComments,
	);

	// Register the add pull request comment tool
	server.tool(
		'add_pr_comment',
		`Add a comment to a specific Bitbucket pull request. Requires 'workspaceSlug', 'repoSlug', 'prId', and 'content'.

        PURPOSE: Create comments on a pull request to provide feedback, ask questions, or communicate with other reviewers/developers. Supports both general PR comments and inline code comments.

        WHEN TO USE:
        - To provide feedback on a specific pull request.
        - To add inline comments on specific lines of code.
        - To respond to review feedback or discussions.
        - When you need to add comments programmatically through the API.
        - Requires known 'workspaceSlug', 'repoSlug', and 'prId'.

        WHEN NOT TO USE:
        - When you don't know the pull request ID (use 'list_pull_requests' first).
        - When you need to read existing comments (use 'list_pr_comments').
        - When you need to modify or delete existing comments (not supported).

        RETURNS: Confirmation message indicating the comment was added successfully.

        EXAMPLES:
        - Add a general comment: { workspaceSlug: "my-team", repoSlug: "backend-api", prId: "42", content: "This looks good! Ready to merge." }
        - Add an inline code comment: { workspaceSlug: "my-team", repoSlug: "backend-api", prId: "42", content: "Consider using a constant here.", inline: { path: "src/main.js", line: 42 } }

        ERRORS:
        - Pull Request not found: Verify 'workspaceSlug', 'repoSlug', and 'prId' are correct.
        - Repository not found: Verify 'workspaceSlug' and 'repoSlug'.
        - Permission errors: Ensure access to comment on the specified pull request.`,
		AddPullRequestCommentToolArgs.shape,
		addPullRequestComment,
	);

	// Register the tool for creating pull requests
	server.tool(
		'pull_requests_create',
		`Create a new pull request in a Bitbucket repository.

    PURPOSE: Create a new pull request from one branch to another within a repository.

    WHEN TO USE:
    - When you need to initiate a code review for a completed feature or bug fix.
    - When you want to merge changes from a feature branch into a main branch.
    - When you've completed work in your branch and want to propose the changes.

    RETURNS: Formatted details of the newly created pull request including ID, title, source/destination branches, and URL.

    EXAMPLES:
    - Create a basic PR: { workspaceSlug: "my-team", repoSlug: "backend-api", title: "Add user authentication", sourceBranch: "feature/auth" }
    - Create PR with description: { workspaceSlug: "my-team", repoSlug: "backend-api", title: "Fix login bug", sourceBranch: "bugfix/login", description: "This fixes the login issue #123" }
    - Close source branch after merge: { workspaceSlug: "my-team", repoSlug: "backend-api", title: "Update docs", sourceBranch: "docs/update", destinationBranch: "develop", closeSourceBranch: true }

    ERRORS:
    - Repository not found: Verify 'workspaceSlug' and 'repoSlug'.
    - Branch not found: Verify the source and destination branches exist.
    - Permission errors: Ensure you have permission to create pull requests in the repository.`,
		CreatePullRequestToolArgs.shape,
		createPullRequest,
	);

	methodLogger.debug('Successfully registered Atlassian Pull Requests tools');
}

export default { registerTools };
</file>

<file path="src/tools/atlassian.pullrequests.types.ts">
import { z } from 'zod';

/**
 * Base pagination arguments for all tools
 */
const PaginationArgs = {
	limit: z
		.number()
		.int()
		.positive()
		.max(100)
		.optional()
		.describe(
			'Maximum number of items to return (1-100). Controls the response size. Defaults to 25 if omitted.',
		),

	cursor: z
		.string()
		.optional()
		.describe(
			'Pagination cursor for retrieving the next set of results. Obtained from previous response when more results are available.',
		),
};

/**
 * Schema for list-pull-requests tool arguments
 */
export const ListPullRequestsToolArgs = z.object({
	/**
	 * Workspace slug containing the repository
	 */
	workspaceSlug: z
		.string()
		.min(1, 'Workspace slug is required')
		.describe(
			'Workspace slug containing the repository. Must be a valid workspace slug from your Bitbucket account. Example: "myteam"',
		),

	/**
	 * Repository slug containing the pull requests
	 */
	repoSlug: z
		.string()
		.min(1, 'Repository slug is required')
		.describe(
			'Repository slug containing the pull requests. This must be a valid repository in the specified workspace. Example: "project-api"',
		),

	/**
	 * Filter by pull request state
	 */
	state: z
		.enum(['OPEN', 'MERGED', 'DECLINED', 'SUPERSEDED'])
		.optional()
		.describe(
			'Filter pull requests by state. Options: "OPEN" (active PRs), "MERGED" (completed PRs), "DECLINED" (rejected PRs), or "SUPERSEDED" (replaced PRs). If omitted, defaults to showing all states.',
		),

	/**
	 * Filter query for pull requests
	 */
	query: z
		.string()
		.optional()
		.describe(
			'Filter pull requests by title, description, or author (text search). Uses Bitbucket query syntax.',
		),

	/**
	 * Maximum number of pull requests to return (default: 50)
	 */
	...PaginationArgs,
});

export type ListPullRequestsToolArgsType = z.infer<
	typeof ListPullRequestsToolArgs
>;

/**
 * Schema for get-pull-request tool arguments
 */
export const GetPullRequestToolArgs = z.object({
	/**
	 * Workspace slug containing the repository
	 */
	workspaceSlug: z
		.string()
		.min(1, 'Workspace slug is required')
		.describe(
			'Workspace slug containing the repository. Must be a valid workspace slug from your Bitbucket account. Example: "myteam"',
		),

	/**
	 * Repository slug containing the pull request
	 */
	repoSlug: z
		.string()
		.min(1, 'Repository slug is required')
		.describe(
			'Repository slug containing the pull request. This must be a valid repository in the specified workspace. Example: "project-api"',
		),

	/**
	 * Pull request identifier
	 */
	prId: z
		.string()
		.min(1, 'Pull request ID is required')
		.describe(
			'Numeric ID of the pull request to retrieve as a string. Must be a valid pull request ID in the specified repository. Example: "42"',
		),
});

export type GetPullRequestToolArgsType = z.infer<typeof GetPullRequestToolArgs>;

/**
 * Schema for list-pr-comments tool arguments
 */
export const ListPullRequestCommentsToolArgs = z.object({
	/**
	 * Workspace slug containing the repository
	 */
	workspaceSlug: z
		.string()
		.min(1, 'Workspace slug is required')
		.describe(
			'Workspace slug containing the repository. Must be a valid workspace slug from your Bitbucket account. Example: "myteam"',
		),

	/**
	 * Repository slug containing the pull request
	 */
	repoSlug: z
		.string()
		.min(1, 'Repository slug is required')
		.describe(
			'Repository slug containing the pull request. This must be a valid repository in the specified workspace. Example: "project-api"',
		),

	/**
	 * Pull request identifier
	 */
	prId: z
		.string()
		.min(1, 'Pull request ID is required')
		.describe(
			'Numeric ID of the pull request to retrieve comments from as a string. Must be a valid pull request ID in the specified repository. Example: "42"',
		),

	/**
	 * Pagination parameters
	 */
	...PaginationArgs,
});

export type ListPullRequestCommentsToolArgsType = z.infer<
	typeof ListPullRequestCommentsToolArgs
>;

/**
 * Schema for add-pr-comment tool arguments
 */
export const AddPullRequestCommentToolArgs = z.object({
	/**
	 * Workspace slug containing the repository
	 */
	workspaceSlug: z
		.string()
		.min(1, 'Workspace slug is required')
		.describe(
			'Workspace slug containing the repository. Must be a valid workspace slug from your Bitbucket account. Example: "myteam"',
		),

	/**
	 * Repository slug containing the pull request
	 */
	repoSlug: z
		.string()
		.min(1, 'Repository slug is required')
		.describe(
			'Repository slug containing the pull request. This must be a valid repository in the specified workspace. Example: "project-api"',
		),

	/**
	 * Pull request identifier
	 */
	prId: z
		.string()
		.min(1, 'Pull request ID is required')
		.describe(
			'Numeric ID of the pull request to add a comment to as a string. Must be a valid pull request ID in the specified repository. Example: "42"',
		),

	/**
	 * Comment content
	 */
	content: z
		.string()
		.min(1, 'Comment content is required')
		.describe(
			'The content of the comment to add to the pull request. Can include markdown formatting.',
		),

	/**
	 * Optional inline location for the comment
	 */
	inline: z
		.object({
			path: z
				.string()
				.min(1, 'File path is required for inline comments')
				.describe('The file path to add the comment to.'),
			line: z
				.number()
				.int()
				.positive()
				.describe('The line number to add the comment to.'),
		})
		.optional()
		.describe(
			'Optional inline location for the comment. If provided, this will create a comment on a specific line in a file.',
		),
});

export type AddPullRequestCommentToolArgsType = z.infer<
	typeof AddPullRequestCommentToolArgs
>;

/**
 * Arguments schema for the pull_requests_create tool
 */
export const CreatePullRequestToolArgs = z.object({
	/**
	 * Workspace slug containing the repository
	 */
	workspaceSlug: z
		.string()
		.min(1, 'Workspace slug is required')
		.describe(
			'Workspace slug containing the repository. Must be a valid workspace slug from your Bitbucket account. Example: "myteam"',
		),

	/**
	 * Repository slug to create the pull request in
	 */
	repoSlug: z
		.string()
		.min(1, 'Repository slug is required')
		.describe(
			'Repository slug to create the pull request in. This must be a valid repository in the specified workspace. Example: "project-api"',
		),

	/**
	 * Title of the pull request
	 */
	title: z
		.string()
		.min(1, 'Pull request title is required')
		.describe('Title for the pull request. Example: "Add new feature"'),

	/**
	 * Source branch name
	 */
	sourceBranch: z
		.string()
		.min(1, 'Source branch name is required')
		.describe(
			'Source branch name (the branch containing your changes). Example: "feature/new-login"',
		),

	/**
	 * Destination branch name
	 */
	destinationBranch: z
		.string()
		.optional()
		.describe(
			'Destination branch name (the branch you want to merge into, defaults to main). Example: "develop"',
		),

	/**
	 * Description for the pull request
	 */
	description: z
		.string()
		.optional()
		.describe('Optional description for the pull request.'),

	/**
	 * Whether to close the source branch after merge
	 */
	closeSourceBranch: z
		.boolean()
		.optional()
		.describe(
			'Whether to close the source branch after the pull request is merged. Default: false',
		),
});

export type CreatePullRequestToolArgsType = z.infer<
	typeof CreatePullRequestToolArgs
>;
</file>

<file path="src/tools/atlassian.repositories.tool.ts">
import { McpServer } from '@modelcontextprotocol/sdk/server/mcp.js';
import { Logger } from '../utils/logger.util.js';
import { formatErrorForMcpTool } from '../utils/error.util.js';
import {
	ListRepositoriesToolArgs,
	ListRepositoriesToolArgsType,
	GetRepositoryToolArgs,
	GetRepositoryToolArgsType,
} from './atlassian.repositories.types.js';

import atlassianRepositoriesController from '../controllers/atlassian.repositories.controller.js';

// Create a contextualized logger for this file
const toolLogger = Logger.forContext('tools/atlassian.repositories.tool.ts');

// Log tool initialization
toolLogger.debug('Bitbucket repositories tool initialized');

/**
 * MCP Tool: List Bitbucket Repositories
 *
 * Lists Bitbucket repositories within a workspace with optional filtering.
 * Returns a formatted markdown response with repository details.
 *
 * @param args - Tool arguments for filtering repositories
 * @returns MCP response with formatted repositories list
 * @throws Will return error message if repository listing fails
 */
async function listRepositories(args: ListRepositoriesToolArgsType) {
	const methodLogger = Logger.forContext(
		'tools/atlassian.repositories.tool.ts',
		'listRepositories',
	);
	methodLogger.debug('Listing Bitbucket repositories with filters:', args);

	try {
		// Pass the options to the controller
		const message = await atlassianRepositoriesController.list({
			workspaceSlug: args.workspaceSlug,
			query: args.query,
			role: args.role,
			sort: args.sort,
			limit: args.limit,
			cursor: args.cursor,
		});

		methodLogger.debug(
			'Successfully retrieved repositories from controller',
			message,
		);

		return {
			content: [
				{
					type: 'text' as const,
					text: message.content,
				},
			],
		};
	} catch (error) {
		methodLogger.error('Failed to list repositories', error);
		return formatErrorForMcpTool(error);
	}
}

/**
 * MCP Tool: Get Bitbucket Repository Details
 *
 * Retrieves detailed information about a specific Bitbucket repository.
 * Returns a formatted markdown response with repository metadata.
 *
 * @param args - Tool arguments containing the workspace and repository slug
 * @returns MCP response with formatted repository details
 * @throws Will return error message if repository retrieval fails
 */
async function getRepository(args: GetRepositoryToolArgsType) {
	const methodLogger = Logger.forContext(
		'tools/atlassian.repositories.tool.ts',
		'getRepository',
	);

	methodLogger.debug(
		`Retrieving repository details for ${args.workspaceSlug}/${args.repoSlug}`,
		args,
	);

	try {
		const message = await atlassianRepositoriesController.get({
			workspaceSlug: args.workspaceSlug,
			repoSlug: args.repoSlug,
		});

		methodLogger.debug(
			'Successfully retrieved repository details from controller',
			message,
		);

		return {
			content: [
				{
					type: 'text' as const,
					text: message.content,
				},
			],
		};
	} catch (error) {
		methodLogger.error('Failed to get repository details', error);
		return formatErrorForMcpTool(error);
	}
}

/**
 * Register Atlassian Repositories MCP Tools
 *
 * Registers the repositories-related tools with the MCP server.
 * Each tool is registered with its schema, description, and handler function.
 *
 * @param server - The MCP server instance to register tools with
 */
function registerTools(server: McpServer) {
	const methodLogger = Logger.forContext(
		'tools/atlassian.repositories.tool.ts',
		'registerTools',
	);
	methodLogger.debug('Registering Atlassian Repositories tools...');

	// Register the list repositories tool
	server.tool(
		'list_repositories',
		`List repositories within a specific Bitbucket workspace, with optional filtering and pagination. Requires 'workspaceSlug'.

        PURPOSE: Discover repositories within a given workspace and retrieve their slugs, names, owners, and basic metadata. Essential for finding the 'repoSlug' needed for repository or pull request details tools.

        WHEN TO USE:
        - To find the 'repoSlug' for a known repository name within a specific workspace.
        - To explore all repositories within a known workspace ('workspaceSlug' is required).
        - To filter repositories based on name ('query'), your role ('role'), or sort them ('sort').
        - Before using 'get_repository' or pull request tools if the 'repoSlug' is unknown.

        WHEN NOT TO USE:
        - When you don't know the 'workspaceSlug' (use 'list_workspaces' first).
        - When you already have the 'repoSlug' and need full details (use 'get_repository').
        - When you need pull request information (use pull request tools).

        RETURNS: Formatted list of repositories including name, full name, owner, description, privacy status, dates, and URL. Includes pagination details if applicable.

        EXAMPLES:
        - List repositories in a workspace: { workspaceSlug: "my-team" }
        - Filter by name fragment: { workspaceSlug: "my-team", query: "backend-api" }
        - Filter by your role: { workspaceSlug: "my-team", role: "contributor" }
        - Sort by last update (descending): { workspaceSlug: "my-team", sort: "-updated_on" }
        - Paginate results: { workspaceSlug: "my-team", limit: 10, cursor: "next-page-token" }

        ERRORS:
        - Workspace not found: Verify the 'workspaceSlug' is correct.
        - Authentication failures: Check Bitbucket credentials.
        - No repositories found: Workspace might be empty, filters too restrictive, or permissions lacking.`,
		ListRepositoriesToolArgs.shape,
		listRepositories,
	);

	// Register the get repository details tool
	server.tool(
		'get_repository',
		`Get detailed information about a specific Bitbucket repository using its workspace and repository slugs. Requires 'workspaceSlug' and 'repoSlug'.

        PURPOSE: Retrieves comprehensive metadata for a *known* repository, including UUID, owner, description, language, size, creation/update dates, and links.

        WHEN TO USE:
        - When you need full details about a *specific* repository and you know its 'workspaceSlug' and 'repoSlug'.
        - After using 'list_repositories' to identify the target repository slugs.
        - To get repository metadata before analyzing its pull requests or content.

        WHEN NOT TO USE:
        - When you don't know the 'workspaceSlug' or 'repoSlug' (use 'list_workspaces' and/or 'list_repositories' first).
        - When you only need a list of repositories (use 'list_repositories').
        - When you need pull request information (use pull request tools).

        RETURNS: Detailed repository information including name, full name, UUID, description, language, size, owner, dates, and links. Fetches all available details by default.

        EXAMPLES:
        - Get details for a repository: { workspaceSlug: "my-team", repoSlug: "backend-api" }

        ERRORS:
        - Repository not found: Verify the 'workspaceSlug' and 'repoSlug' are correct and the repository exists.
        - Permission errors: Ensure you have access to view the specified repository.`,
		GetRepositoryToolArgs.shape,
		getRepository,
	);

	methodLogger.debug('Successfully registered Atlassian Repositories tools');
}

export default { registerTools };
</file>

<file path="src/tools/atlassian.repositories.types.ts">
import { z } from 'zod';

/**
 * Base pagination arguments for all tools
 */
const PaginationArgs = {
	limit: z
		.number()
		.int()
		.positive()
		.max(100)
		.optional()
		.describe(
			'Maximum number of items to return (1-100). Controls the response size. Defaults to 25 if omitted.',
		),

	cursor: z
		.string()
		.optional()
		.describe(
			'Pagination cursor for retrieving the next set of results. Obtained from previous response when more results are available.',
		),
};

/**
 * Schema for list-repositories tool arguments
 */
export const ListRepositoriesToolArgs = z.object({
	/**
	 * Workspace slug containing the repositories
	 */
	workspaceSlug: z
		.string()
		.min(1, 'Workspace slug is required')
		.describe(
			'Workspace slug containing the repositories. Must be a valid workspace slug from your Bitbucket account. Example: "myteam"',
		),

	/**
	 * Optional query to filter repositories
	 */
	query: z
		.string()
		.optional()
		.describe(
			'Query string to filter repositories by name or other properties (text search). Example: "api" for repositories with "api" in the name/description. If omitted, returns all repositories.',
		),

	/**
	 * Optional sort parameter
	 */
	sort: z
		.string()
		.optional()
		.describe(
			'Field to sort results by. Common values: "name", "created_on", "updated_on". Prefix with "-" for descending order. Example: "-updated_on" for most recently updated first.',
		),

	/**
	 * Optional role filter
	 */
	role: z
		.string()
		.optional()
		.describe(
			'Filter repositories by the authenticated user\'s role. Common values: "owner", "admin", "contributor", "member". If omitted, returns repositories of all roles.',
		),

	/**
	 * Maximum number of repositories to return (default: 25)
	 */
	...PaginationArgs,
});

export type ListRepositoriesToolArgsType = z.infer<
	typeof ListRepositoriesToolArgs
>;

/**
 * Schema for get-repository tool arguments
 */
export const GetRepositoryToolArgs = z.object({
	/**
	 * Workspace slug containing the repository
	 */
	workspaceSlug: z
		.string()
		.min(1, 'Workspace slug is required')
		.describe(
			'Workspace slug containing the repository. Must be a valid workspace slug from your Bitbucket account. Example: "myteam"',
		),

	/**
	 * Repository slug to retrieve
	 */
	repoSlug: z
		.string()
		.min(1, 'Repository slug is required')
		.describe(
			'Repository slug to retrieve. This must be a valid repository in the specified workspace. Example: "project-api"',
		),
});

export type GetRepositoryToolArgsType = z.infer<typeof GetRepositoryToolArgs>;
</file>

<file path="src/tools/atlassian.search.tool.ts">
import { McpServer } from '@modelcontextprotocol/sdk/server/mcp.js';
import { Logger } from '../utils/logger.util.js';
import { formatErrorForMcpTool } from '../utils/error.util.js';
import {
	SearchToolArgsType,
	SearchToolArgs,
} from './atlassian.search.types.js';

import atlassianSearchController from '../controllers/atlassian.search.controller.js';

const toolLogger = Logger.forContext('tools/atlassian.search.tool.ts');

/**
 * MCP Tool: Search Bitbucket
 *
 * Searches Bitbucket content across repositories and pull requests.
 * Returns a formatted markdown response with search results.
 *
 * @param {SearchToolArgsType} args - Tool arguments for the search query
 * @returns {Promise<{ content: Array<{ type: 'text', text: string }> }>} MCP response with formatted search results
 * @throws Will return error message if search fails
 */
async function search(args: SearchToolArgsType) {
	const methodLogger = toolLogger.forMethod('search');
	methodLogger.debug('Searching Bitbucket with query:', args);

	try {
		// Map args to controller options
		const controllerOptions = {
			workspaceSlug: args.workspaceSlug,
			repoSlug: args.repoSlug,
			query: args.query,
			scope: args.scope || 'all',
			limit: args.limit,
			cursor: args.cursor,
			// For code search pagination
			page:
				args.scope === 'code' && args.cursor
					? parseInt(args.cursor, 10)
					: undefined,
		};

		// Call the controller search method
		const result =
			await atlassianSearchController.search(controllerOptions);

		methodLogger.debug('Search completed successfully');

		return {
			content: [
				{
					type: 'text' as const,
					text: result.content,
				},
			],
		};
	} catch (error) {
		methodLogger.error('Failed to search Bitbucket', error);
		return formatErrorForMcpTool(error);
	}
}

/**
 * Register Atlassian Search MCP Tools
 *
 * Registers the search-related tools with the MCP server.
 * Each tool is registered with its schema, description, and handler function.
 *
 * @param server - The MCP server instance to register tools with
 */
function registerTools(server: McpServer) {
	const methodLogger = toolLogger.forMethod('registerTools');
	methodLogger.debug('Registering Atlassian Search tools...');

	// Register the search tool
	server.tool(
		'search',
		`Search Bitbucket content across repositories, pull requests, commits, and code.

        PURPOSE: Provides a unified search interface for Bitbucket workspaces, searching across repository names/descriptions, pull request titles/descriptions, commit messages, and code content to help locate resources.

        WHEN TO USE:
        - When you need to find repositories containing specific text in their name or description.
        - When you need to find pull requests containing specific text in their title or description.
        - When you need to find commits containing specific text in their message.
        - When you need to search for specific code patterns or text within repository files.
        - When you want to search across multiple types of Bitbucket content in a single operation.
        - When you need to quickly locate resources within a workspace.

        WHEN NOT TO USE:
        - When you already know the exact repository and need its details (use 'get_repository' instead).
        - When you already know the exact pull request and need its details (use 'get_pull_request' instead).
        - When you need to list all repositories or pull requests without filtering (use respective list tools).

        RETURNS: Formatted search results including:
        - Repository results with name, description, and update information
        - Pull request results with title, state, and branch information
        - Commit results with hash, author, date, and message
        - Code search results with file path, line numbers, and matching snippets
        - Summary information and links to relevant resources
        
        Results can be paginated using the 'limit' and 'cursor' parameters.

        EXAMPLES:
        - Search repositories in a workspace: { workspaceSlug: "my-team", query: "api", scope: "repositories" }
        - Search pull requests in a repository: { workspaceSlug: "my-team", repoSlug: "backend", query: "fix", scope: "pullrequests" }
        - Search commits in a repository: { workspaceSlug: "my-team", repoSlug: "backend", query: "update", scope: "commits" }
        - Search code in a workspace: { workspaceSlug: "my-team", query: "function getUser", scope: "code" }
        - Search code in a specific repo: { workspaceSlug: "my-team", repoSlug: "backend", query: "class User", scope: "code" }
        - Search both repositories and pull requests: { workspaceSlug: "my-team", repoSlug: "backend", query: "feature", scope: "all" }
        
        LIMITATIONS:
        - Pull request search requires both workspace and repository slugs
        - Commit search requires both workspace and repository slugs
        - The repository and pull request search is limited to text matching in metadata, not semantic search
        - Code search results are presented with line context but may not show the full file
        - Pagination mechanisms differ between metadata search (cursor-based) and code search (page-based)

        ERRORS:
        - Missing workspace slug: The workspaceSlug parameter is required.
        - Missing repository slug: The repoSlug parameter is required when scope is "pullrequests" or "commits".
        - Missing query for code search: The query parameter is required when scope is "code".
        - Repository not found: When searching pull requests or commits with an invalid repoSlug.
        - Authentication failures: Check Bitbucket credentials.
        - No results: Try broadening search criteria or different search terms.`,
		SearchToolArgs.shape,
		search,
	);

	methodLogger.debug('Successfully registered Atlassian Search tools');
}

export default { registerTools };
</file>

<file path="src/tools/atlassian.search.types.ts">
import { z } from 'zod';

/**
 * Pagination arguments
 * Used for pagination of search results
 */
const PaginationArgs = z.object({
	/**
	 * Maximum number of items to return (1-100).
	 * Use this to control the response size.
	 * Useful for pagination or when you only need a few results.
	 */
	limit: z
		.number()
		.min(1)
		.max(100)
		.optional()
		.describe(
			'Maximum number of items to return (1-100). Use this to control the response size. Useful for pagination or when you only need a few results.',
		),

	/**
	 * Pagination cursor for retrieving the next set of results.
	 * For repositories and pull requests, this is a cursor string.
	 * For code search, this is a page number.
	 * Use this to navigate through large result sets.
	 */
	cursor: z
		.string()
		.optional()
		.describe(
			'Pagination cursor for retrieving the next set of results. For repositories and pull requests, this is a cursor string. For code search, this is a page number. Use this to navigate through large result sets.',
		),
});

/**
 * Bitbucket search tool arguments
 * Specifies what to search for and how to filter results
 */
export const SearchToolArgs = z
	.object({
		/**
		 * Workspace slug containing the content to search.
		 * Must be a valid workspace slug from your Bitbucket account.
		 * Example: "myteam"
		 */
		workspaceSlug: z
			.string()
			.min(1)
			.describe(
				'Workspace slug containing the content to search. Must be a valid workspace slug from your Bitbucket account. Example: "myteam"',
			),

		/**
		 * Repository slug to search within.
		 * This is required when searching for pull requests.
		 * Optional for code search; if provided, limits code search to the specified repo.
		 * Example: "backend-api"
		 */
		repoSlug: z
			.string()
			.optional()
			.describe(
				'Repository slug to search within. Required for pull requests search. Optional for code search (limits search to the specified repo). Example: "backend-api"',
			),

		/**
		 * Search query to filter results by name, description, or code content.
		 * Required for code search.
		 * Use this to find specific content matching certain terms.
		 */
		query: z
			.string()
			.optional()
			.describe(
				'Search query to filter results by name, description, or code content. Required for code search. Use this to find specific content matching certain terms.',
			),

		/**
		 * Scope of the search. Options include:
		 * - "repositories" (search only repositories)
		 * - "pullrequests" (search only pull requests)
		 * - "commits" (search only commits)
		 * - "code" (search file content)
		 * - "all" (search repositories and pull requests)
		 * Defaults to "all" if not specified.
		 */
		scope: z
			.enum(['repositories', 'pullrequests', 'commits', 'code', 'all'])
			.optional()
			.describe(
				'Scope of the search. Options include: "repositories" (search only repositories), "pullrequests" (search only pull requests), "commits" (search only commits), "code" (search file content), or "all" (search both repositories and pull requests). Defaults to "all" if not specified.',
			),
	})
	.merge(PaginationArgs);

export type SearchToolArgsType = z.infer<typeof SearchToolArgs>;
</file>

<file path="src/tools/atlassian.workspaces.tool.ts">
import { McpServer } from '@modelcontextprotocol/sdk/server/mcp.js';
import { Logger } from '../utils/logger.util.js';
import { formatErrorForMcpTool } from '../utils/error.util.js';
import {
	ListWorkspacesToolArgs,
	ListWorkspacesToolArgsType,
	GetWorkspaceToolArgsType,
	GetWorkspaceToolArgs,
} from './atlassian.workspaces.types.js';

import atlassianWorkspacesController from '../controllers/atlassian.workspaces.controller.js';

// Create a contextualized logger for this file
const toolLogger = Logger.forContext('tools/atlassian.workspaces.tool.ts');

// Log tool initialization
toolLogger.debug('Bitbucket workspaces tool initialized');

/**
 * MCP Tool: List Bitbucket Workspaces
 *
 * Lists Bitbucket workspaces available to the authenticated user with optional filtering.
 * Returns a formatted markdown response with workspace details.
 *
 * @param args - Tool arguments for filtering workspaces
 * @returns MCP response with formatted workspaces list
 * @throws Will return error message if workspace listing fails
 */
async function listWorkspaces(args: ListWorkspacesToolArgsType) {
	const methodLogger = Logger.forContext(
		'tools/atlassian.workspaces.tool.ts',
		'listWorkspaces',
	);
	methodLogger.debug('Listing Bitbucket workspaces with filters:', args);

	try {
		// Pass the filter options to the controller
		const message = await atlassianWorkspacesController.list({
			limit: args.limit,
			cursor: args.cursor,
		});

		methodLogger.debug(
			'Successfully retrieved workspaces from controller',
			message,
		);

		return {
			content: [
				{
					type: 'text' as const,
					text: message.content,
				},
			],
		};
	} catch (error) {
		methodLogger.error('Failed to list workspaces', error);
		return formatErrorForMcpTool(error);
	}
}

/**
 * MCP Tool: Get Bitbucket Workspace Details
 *
 * Retrieves detailed information about a specific Bitbucket workspace.
 * Returns a formatted markdown response with workspace metadata.
 *
 * @param args - Tool arguments containing the workspace slug
 * @returns MCP response with formatted workspace details
 * @throws Will return error message if workspace retrieval fails
 */
async function getWorkspace(args: GetWorkspaceToolArgsType) {
	const methodLogger = Logger.forContext(
		'tools/atlassian.workspaces.tool.ts',
		'getWorkspace',
	);

	methodLogger.debug(
		`Retrieving workspace details for ${args.workspaceSlug}`,
		args,
	);

	try {
		const message = await atlassianWorkspacesController.get({
			workspaceSlug: args.workspaceSlug,
		});
		methodLogger.debug(
			'Successfully retrieved workspace details from controller',
			message,
		);

		return {
			content: [
				{
					type: 'text' as const,
					text: message.content,
				},
			],
		};
	} catch (error) {
		methodLogger.error('Failed to get workspace details', error);
		return formatErrorForMcpTool(error);
	}
}

/**
 * Register Atlassian Workspaces MCP Tools
 *
 * Registers the list-workspaces and get-workspace tools with the MCP server.
 * Each tool is registered with its schema, description, and handler function.
 *
 * @param server - The MCP server instance to register tools with
 */
function registerTools(server: McpServer) {
	const methodLogger = Logger.forContext(
		'tools/atlassian.workspaces.tool.ts',
		'registerTools',
	);
	methodLogger.debug('Registering Atlassian Workspaces tools...');

	// Register the list workspaces tool
	server.tool(
		'list_workspaces',
		`List Bitbucket workspaces accessible to the authenticated user, with optional pagination.

        PURPOSE: Discover available workspaces and retrieve their slugs, names, and basic metadata. Essential for finding the correct 'workspaceSlug' needed as input for repository-related tools (list_repositories, get_repository, list_pull_requests, get_pull_request).

        WHEN TO USE:
        - To find the 'workspaceSlug' for a known workspace name.
        - To explore all workspaces you have access to.
        - To get a high-level overview before diving into specific repositories.
        - When you don't know the exact slug required by other tools.

        WHEN NOT TO USE:
        - When you already have the 'workspaceSlug'.
        - When you need detailed information about a *single* workspace (use 'get_workspace').
        - When you need repository or pull request information (use repository/pull_request tools with a known 'workspaceSlug').

        RETURNS: Formatted list of workspace memberships, including workspace name, slug, UUID, your permission level, and access dates. Includes pagination details if applicable.

        EXAMPLES:
        - List all accessible workspaces: {}
        - Paginate results: { limit: 10, cursor: "some-cursor-value" }

        ERRORS:
        - Authentication failures: Check Bitbucket credentials.
        - No workspaces found: You may not have access to any workspaces.`,
		ListWorkspacesToolArgs.shape,
		listWorkspaces,
	);

	// Register the get workspace details tool
	server.tool(
		'get_workspace',
		`Get detailed information about a specific Bitbucket workspace using its slug.

        PURPOSE: Retrieves comprehensive metadata for a *known* workspace, including UUID, name, type, creation date, and links to related resources like repositories and projects.

        WHEN TO USE:
        - When you need full details about a *specific* workspace and you already know its 'workspaceSlug'.
        - After using 'list_workspaces' to identify the target workspace slug.
        - To get quick links to a workspace's repositories, projects, or members page.

        WHEN NOT TO USE:
        - When you don't know the workspace slug (use 'list_workspaces' first).
        - When you only need a list of workspaces (use 'list_workspaces').
        - When you need information about repositories *within* the workspace (use repository tools).

        RETURNS: Detailed workspace information including slug, name, UUID, type, creation date, and links. Fetches all available details by default.

        EXAMPLES:
        - Get details for a workspace: { workspaceSlug: "my-dev-team" }

        ERRORS:
        - Workspace not found: Verify the 'workspaceSlug' is correct and exists.
        - Permission errors: Ensure you have access to view the specified workspace.`,
		GetWorkspaceToolArgs.shape,
		getWorkspace,
	);

	methodLogger.debug('Successfully registered Atlassian Workspaces tools');
}

export default { registerTools };
</file>

<file path="src/tools/atlassian.workspaces.types.ts">
import { z } from 'zod';

/**
 * Base pagination arguments for all tools
 */
const PaginationArgs = {
	limit: z
		.number()
		.int()
		.positive()
		.max(100)
		.optional()
		.describe(
			'Maximum number of items to return (1-100). Controls the response size. Defaults to 25 if omitted.',
		),

	cursor: z
		.string()
		.optional()
		.describe(
			'Pagination cursor for retrieving the next set of results. Obtained from previous response when more results are available.',
		),
};

/**
 * Schema for list-workspaces tool arguments
 */
export const ListWorkspacesToolArgs = z.object({
	/**
	 * Maximum number of workspaces to return and pagination
	 */
	...PaginationArgs,
});

export type ListWorkspacesToolArgsType = z.infer<typeof ListWorkspacesToolArgs>;

/**
 * Schema for get-workspace tool arguments
 */
export const GetWorkspaceToolArgs = z.object({
	/**
	 * Workspace slug to retrieve
	 */
	workspaceSlug: z
		.string()
		.min(1, 'Workspace slug is required')
		.describe(
			'Workspace slug to retrieve detailed information for. Must be a valid workspace slug from your Bitbucket account. Example: "myteam"',
		),
});

export type GetWorkspaceToolArgsType = z.infer<typeof GetWorkspaceToolArgs>;
</file>

<file path="src/types/common.types.ts">
/**
 * Common type definitions shared across controllers.
 * These types provide a standard interface for controller interactions.
 * Centralized here to ensure consistency across the codebase.
 */

/**
 * Common pagination information for API responses.
 * This is used for providing consistent pagination details to clients.
 */
export interface ResponsePagination {
	/**
	 * Cursor for the next page of results, if available.
	 * This should be passed to subsequent requests to retrieve the next page.
	 */
	nextCursor?: string;

	/**
	 * Whether more results are available beyond the current page.
	 * When true, clients should use the nextCursor to retrieve more results.
	 */
	hasMore: boolean;

	/**
	 * The number of items in the current result set.
	 * This helps clients track how many items they've received.
	 */
	count?: number;
}

/**
 * Common pagination options for API requests.
 * These options control how many results are returned and which page is retrieved.
 */
export interface PaginationOptions {
	/**
	 * Maximum number of results to return per page.
	 * Valid range: 1-100
	 * If not specified, the default page size (typically 25) will be used.
	 */
	limit?: number;

	/**
	 * Pagination cursor for retrieving a specific page of results.
	 * Obtain this value from the previous response's pagination information.
	 */
	cursor?: string;
}

/**
 * Base interface for entity identifiers.
 * Used to standardize parameter patterns across controllers.
 * Each entity-specific identifier should extend this interface.
 */
export interface EntityIdentifier {
	/**
	 * Allows for dynamic keys with string values.
	 * Entity-specific identifiers will add strongly-typed properties.
	 */
	[key: string]: string;
}

/**
 * Common response structure for controller operations.
 * All controller methods should return this structure.
 */
export interface ControllerResponse {
	/**
	 * Formatted content to be displayed to the user.
	 * Usually a Markdown-formatted string.
	 */
	content: string;

	/**
	 * Optional pagination information for list operations.
	 * If present, indicates that more results are available.
	 */
	pagination?: ResponsePagination;
}
</file>

<file path="src/utils/adf.util.test.ts">
import { adfToMarkdown } from './adf.util.js';

describe('ADF Utility', () => {
	describe('adfToMarkdown', () => {
		it('should handle empty or undefined input', () => {
			expect(adfToMarkdown(null)).toBe('');
			expect(adfToMarkdown(undefined)).toBe('');
			expect(adfToMarkdown('')).toBe('');
		});

		it('should handle non-ADF string input', () => {
			expect(adfToMarkdown('plain text')).toBe('plain text');
		});

		it('should convert basic paragraph', () => {
			const adf = {
				type: 'doc',
				version: 1,
				content: [
					{
						type: 'paragraph',
						content: [
							{
								type: 'text',
								text: 'This is a paragraph',
							},
						],
					},
				],
			};

			expect(adfToMarkdown(adf)).toBe('This is a paragraph');
		});

		it('should convert multiple paragraphs', () => {
			const adf = {
				type: 'doc',
				version: 1,
				content: [
					{
						type: 'paragraph',
						content: [
							{
								type: 'text',
								text: 'First paragraph',
							},
						],
					},
					{
						type: 'paragraph',
						content: [
							{
								type: 'text',
								text: 'Second paragraph',
							},
						],
					},
				],
			};

			expect(adfToMarkdown(adf)).toBe(
				'First paragraph\n\nSecond paragraph',
			);
		});

		it('should convert headings', () => {
			const adf = {
				type: 'doc',
				version: 1,
				content: [
					{
						type: 'heading',
						attrs: { level: 1 },
						content: [
							{
								type: 'text',
								text: 'Heading 1',
							},
						],
					},
					{
						type: 'heading',
						attrs: { level: 2 },
						content: [
							{
								type: 'text',
								text: 'Heading 2',
							},
						],
					},
				],
			};

			expect(adfToMarkdown(adf)).toBe('# Heading 1\n\n## Heading 2');
		});

		it('should convert text with marks', () => {
			const adf = {
				type: 'doc',
				version: 1,
				content: [
					{
						type: 'paragraph',
						content: [
							{
								type: 'text',
								text: 'Bold',
								marks: [{ type: 'strong' }],
							},
							{
								type: 'text',
								text: ' and ',
							},
							{
								type: 'text',
								text: 'italic',
								marks: [{ type: 'em' }],
							},
							{
								type: 'text',
								text: ' and ',
							},
							{
								type: 'text',
								text: 'code',
								marks: [{ type: 'code' }],
							},
						],
					},
				],
			};

			expect(adfToMarkdown(adf)).toBe('**Bold** and *italic* and `code`');
		});

		it('should convert bullet lists', () => {
			const adf = {
				type: 'doc',
				version: 1,
				content: [
					{
						type: 'bulletList',
						content: [
							{
								type: 'listItem',
								content: [
									{
										type: 'paragraph',
										content: [
											{
												type: 'text',
												text: 'Item 1',
											},
										],
									},
								],
							},
							{
								type: 'listItem',
								content: [
									{
										type: 'paragraph',
										content: [
											{
												type: 'text',
												text: 'Item 2',
											},
										],
									},
								],
							},
						],
					},
				],
			};

			expect(adfToMarkdown(adf)).toBe('- Item 1\n- Item 2');
		});

		it('should convert code blocks', () => {
			const adf = {
				type: 'doc',
				version: 1,
				content: [
					{
						type: 'codeBlock',
						attrs: { language: 'javascript' },
						content: [
							{
								type: 'text',
								text: 'const x = 1;',
							},
						],
					},
				],
			};

			expect(adfToMarkdown(adf)).toBe('```javascript\nconst x = 1;\n```');
		});

		it('should convert links', () => {
			const adf = {
				type: 'doc',
				version: 1,
				content: [
					{
						type: 'paragraph',
						content: [
							{
								type: 'text',
								text: 'Visit',
							},
							{
								type: 'text',
								text: ' Atlassian',
								marks: [
									{
										type: 'link',
										attrs: {
											href: 'https://atlassian.com',
										},
									},
								],
							},
						],
					},
				],
			};

			expect(adfToMarkdown(adf)).toBe(
				'Visit[ Atlassian](https://atlassian.com)',
			);
		});
	});
});
</file>

<file path="src/utils/adf.util.ts">
/**
 * Utility functions for converting Atlassian Document Format (ADF) to Markdown
 */

import { Logger } from './logger.util.js';

// Create a file-level logger for the module
const adfLogger = Logger.forContext('utils/adf.util.ts');

/**
 * Interface for ADF node
 */
interface AdfNode {
	type: string;
	text?: string;
	content?: AdfNode[];
	attrs?: Record<string, unknown>;
	marks?: Array<{ type: string; attrs?: Record<string, unknown> }>;
}

/**
 * Interface for ADF document
 */
interface AdfDocument {
	type: 'doc';
	version: number;
	content?: AdfNode[];
}

/**
 * Convert Atlassian Document Format (ADF) to Markdown
 *
 * @param adf - The ADF content to convert (can be string or object)
 * @returns The converted Markdown content
 */
export function adfToMarkdown(adf: unknown): string {
	try {
		// Handle empty or undefined input
		if (!adf) {
			return '';
		}

		// Parse ADF if it's a string
		let adfDoc: AdfDocument;
		if (typeof adf === 'string') {
			try {
				adfDoc = JSON.parse(adf);
			} catch {
				return adf; // Return as-is if not valid JSON
			}
		} else if (typeof adf === 'object') {
			adfDoc = adf as AdfDocument;
		} else {
			return String(adf);
		}

		// Check if it's a valid ADF document
		if (!adfDoc.content || !Array.isArray(adfDoc.content)) {
			return '';
		}

		// Process the document
		return processAdfContent(adfDoc.content);
	} catch (error) {
		adfLogger.error('Error converting ADF to Markdown:', error);
		return '*Error converting description format*';
	}
}

/**
 * Process ADF content nodes
 */
function processAdfContent(content: AdfNode[]): string {
	if (!content || !Array.isArray(content)) {
		return '';
	}

	return content.map((node) => processAdfNode(node)).join('\n\n');
}

/**
 * Process mention node
 */
function processMention(node: AdfNode): string {
	if (!node.attrs) {
		return '';
	}

	const text = node.attrs.text || node.attrs.displayName || '';
	if (!text) {
		return '';
	}

	// Format as @username to preserve the mention format
	// Remove any existing @ symbol to avoid double @@ in the output
	const cleanText =
		typeof text === 'string' && text.startsWith('@')
			? text.substring(1)
			: text;
	return `@${cleanText}`;
}

/**
 * Process a single ADF node
 */
function processAdfNode(node: AdfNode): string {
	if (!node || !node.type) {
		return '';
	}

	switch (node.type) {
		case 'paragraph':
			return processParagraph(node);
		case 'heading':
			return processHeading(node);
		case 'bulletList':
			return processBulletList(node);
		case 'orderedList':
			return processOrderedList(node);
		case 'listItem':
			return processListItem(node);
		case 'codeBlock':
			return processCodeBlock(node);
		case 'blockquote':
			return processBlockquote(node);
		case 'rule':
			return '---';
		case 'mediaGroup':
			return processMediaGroup(node);
		case 'table':
			return processTable(node);
		case 'text':
			return processText(node);
		case 'mention':
			return processMention(node);
		default:
			// For unknown node types, try to process content if available
			if (node.content) {
				return processAdfContent(node.content);
			}
			return '';
	}
}

/**
 * Process paragraph node
 */
function processParagraph(node: AdfNode): string {
	if (!node.content) {
		return '';
	}

	// Process each child node and join them with proper spacing
	return node.content
		.map((childNode, index) => {
			// Add a space between text nodes if needed
			const needsSpace =
				index > 0 &&
				childNode.type === 'text' &&
				node.content![index - 1].type === 'text' &&
				!childNode.text?.startsWith(' ') &&
				!node.content![index - 1].text?.endsWith(' ');

			return (needsSpace ? ' ' : '') + processAdfNode(childNode);
		})
		.join('');
}

/**
 * Process heading node
 */
function processHeading(node: AdfNode): string {
	if (!node.content || !node.attrs) {
		return '';
	}

	const level = typeof node.attrs.level === 'number' ? node.attrs.level : 1;
	const headingMarker = '#'.repeat(level);
	const content = node.content
		.map((childNode) => processAdfNode(childNode))
		.join('');

	return `${headingMarker} ${content}`;
}

/**
 * Process bullet list node
 */
function processBulletList(node: AdfNode): string {
	if (!node.content) {
		return '';
	}

	return node.content.map((item) => processAdfNode(item)).join('\n');
}

/**
 * Process ordered list node
 */
function processOrderedList(node: AdfNode): string {
	if (!node.content) {
		return '';
	}

	return node.content
		.map((item, index) => {
			const processedItem = processAdfNode(item);
			// Replace the first "- " with "1. ", "2. ", etc.
			return processedItem.replace(/^- /, `${index + 1}. `);
		})
		.join('\n');
}

/**
 * Process list item node
 */
function processListItem(node: AdfNode): string {
	if (!node.content) {
		return '';
	}

	const content = node.content
		.map((childNode) => {
			const processed = processAdfNode(childNode);
			// For nested lists, add indentation
			if (
				childNode.type === 'bulletList' ||
				childNode.type === 'orderedList'
			) {
				return processed
					.split('\n')
					.map((line) => `  ${line}`)
					.join('\n');
			}
			return processed;
		})
		.join('\n');

	return `- ${content}`;
}

/**
 * Process code block node
 */
function processCodeBlock(node: AdfNode): string {
	if (!node.content) {
		return '```\n```';
	}

	const language = node.attrs?.language || '';
	const code = node.content
		.map((childNode) => processAdfNode(childNode))
		.join('');

	return `\`\`\`${language}\n${code}\n\`\`\``;
}

/**
 * Process blockquote node
 */
function processBlockquote(node: AdfNode): string {
	if (!node.content) {
		return '';
	}

	const content = node.content
		.map((childNode) => processAdfNode(childNode))
		.join('\n\n');

	// Add > to each line
	return content
		.split('\n')
		.map((line) => `> ${line}`)
		.join('\n');
}

/**
 * Process media group node
 */
function processMediaGroup(node: AdfNode): string {
	if (!node.content) {
		return '';
	}

	return node.content
		.map((mediaNode) => {
			if (mediaNode.type === 'media' && mediaNode.attrs) {
				const { id, type } = mediaNode.attrs;
				if (type === 'file') {
					return `[Attachment: ${id}]`;
				} else if (type === 'link') {
					return `[External Link]`;
				}
			}
			return '';
		})
		.filter(Boolean)
		.join('\n');
}

/**
 * Process table node
 */
function processTable(node: AdfNode): string {
	if (!node.content) {
		return '';
	}

	const rows: string[][] = [];

	// Process table rows
	node.content.forEach((row) => {
		if (row.type === 'tableRow' && row.content) {
			const cells: string[] = [];

			row.content.forEach((cell) => {
				if (
					(cell.type === 'tableCell' ||
						cell.type === 'tableHeader') &&
					cell.content
				) {
					const cellContent = cell.content
						.map((cellNode) => processAdfNode(cellNode))
						.join('');
					cells.push(cellContent.trim());
				}
			});

			if (cells.length > 0) {
				rows.push(cells);
			}
		}
	});

	if (rows.length === 0) {
		return '';
	}

	// Create markdown table
	const columnCount = Math.max(...rows.map((row) => row.length));

	// Ensure all rows have the same number of columns
	const normalizedRows = rows.map((row) => {
		while (row.length < columnCount) {
			row.push('');
		}
		return row;
	});

	// Create header row
	const headerRow = normalizedRows[0].map((cell) => cell || '');

	// Create separator row
	const separatorRow = headerRow.map(() => '---');

	// Create content rows
	const contentRows = normalizedRows.slice(1);

	// Build the table
	const tableRows = [
		headerRow.join(' | '),
		separatorRow.join(' | '),
		...contentRows.map((row) => row.join(' | ')),
	];

	return tableRows.join('\n');
}

/**
 * Process text node
 */
function processText(node: AdfNode): string {
	if (!node.text) {
		return '';
	}

	let text = node.text;

	// Apply marks if available
	if (node.marks && node.marks.length > 0) {
		// Process link marks last to avoid issues with other formatting
		const linkMark = node.marks.find((mark) => mark.type === 'link');
		const otherMarks = node.marks.filter((mark) => mark.type !== 'link');

		// Apply non-link marks first
		otherMarks.forEach((mark) => {
			switch (mark.type) {
				case 'strong':
					text = `**${text}**`;
					break;
				case 'em':
					text = `*${text}*`;
					break;
				case 'code':
					text = `\`${text}\``;
					break;
				case 'strike':
					text = `~~${text}~~`;
					break;
				case 'underline':
					// Markdown doesn't support underline, use emphasis instead
					text = `_${text}_`;
					break;
			}
		});

		// Apply link mark last
		if (linkMark && linkMark.attrs && linkMark.attrs.href) {
			text = `[${text}](${linkMark.attrs.href})`;
		}
	}

	return text;
}
</file>

<file path="src/utils/cli.test.util.ts">
import { spawn } from 'child_process';
import { join } from 'path';

/**
 * Utility for testing CLI commands with real execution
 */
export class CliTestUtil {
	/**
	 * Executes a CLI command and returns the result
	 *
	 * @param args - CLI arguments to pass to the command
	 * @param options - Test options
	 * @returns Promise with stdout, stderr, and exit code
	 */
	static async runCommand(
		args: string[],
		options: {
			timeoutMs?: number;
			env?: Record<string, string>;
		} = {},
	): Promise<{
		stdout: string;
		stderr: string;
		exitCode: number;
	}> {
		// Default timeout of 30 seconds
		const timeoutMs = options.timeoutMs || 30000;

		// CLI execution path - points to the built CLI script
		const cliPath = join(process.cwd(), 'dist', 'index.js');

		return new Promise((resolve, reject) => {
			// Set up timeout handler
			const timeoutId = setTimeout(() => {
				child.kill();
				reject(new Error(`CLI command timed out after ${timeoutMs}ms`));
			}, timeoutMs);

			// Capture stdout and stderr
			let stdout = '';
			let stderr = '';

			// Spawn the process with given arguments
			const child = spawn('node', [cliPath, ...args], {
				env: {
					...process.env,
					...options.env,
				},
			});

			// Collect stdout data
			child.stdout.on('data', (data) => {
				stdout += data.toString();
			});

			// Collect stderr data
			child.stderr.on('data', (data) => {
				stderr += data.toString();
			});

			// Handle process completion
			child.on('close', (exitCode) => {
				clearTimeout(timeoutId);
				resolve({
					stdout,
					stderr,
					exitCode: exitCode ?? 0,
				});
			});

			// Handle process errors
			child.on('error', (err) => {
				clearTimeout(timeoutId);
				reject(err);
			});
		});
	}

	/**
	 * Validates that stdout contains expected strings/patterns
	 */
	static validateOutputContains(
		output: string,
		expectedPatterns: (string | RegExp)[],
	): void {
		for (const pattern of expectedPatterns) {
			if (typeof pattern === 'string') {
				expect(output).toContain(pattern);
			} else {
				expect(output).toMatch(pattern);
			}
		}
	}

	/**
	 * Validates Markdown output format
	 */
	static validateMarkdownOutput(output: string): void {
		// Check for Markdown heading
		expect(output).toMatch(/^#\s.+/m);

		// Check for markdown formatting elements like bold text, lists, etc.
		const markdownElements = [
			/\*\*.+\*\*/, // Bold text
			/-\s.+/, // List items
			/\|.+\|.+\|/, // Table rows
			/\[.+\]\(.+\)/, // Links
		];

		expect(markdownElements.some((pattern) => pattern.test(output))).toBe(
			true,
		);
	}
}
</file>

<file path="src/utils/config.util.test.ts">
import {
	ErrorType,
	McpError,
	createApiError,
	createAuthMissingError,
	createAuthInvalidError,
	createUnexpectedError,
	ensureMcpError,
	formatErrorForMcpTool,
	formatErrorForMcpResource,
} from './error.util.js';

describe('Error Utility', () => {
	describe('McpError', () => {
		it('should create an error with the correct properties', () => {
			const error = new McpError('Test error', ErrorType.API_ERROR, 404);

			expect(error).toBeInstanceOf(Error);
			expect(error).toBeInstanceOf(McpError);
			expect(error.message).toBe('Test error');
			expect(error.type).toBe(ErrorType.API_ERROR);
			expect(error.statusCode).toBe(404);
			expect(error.name).toBe('McpError');
		});
	});

	describe('Error Factory Functions', () => {
		it('should create auth missing error', () => {
			const error = createAuthMissingError();

			expect(error).toBeInstanceOf(McpError);
			expect(error.type).toBe(ErrorType.AUTH_MISSING);
			expect(error.message).toBe(
				'Authentication credentials are missing',
			);
		});

		it('should create auth invalid error', () => {
			const error = createAuthInvalidError('Invalid token');

			expect(error).toBeInstanceOf(McpError);
			expect(error.type).toBe(ErrorType.AUTH_INVALID);
			expect(error.statusCode).toBe(401);
			expect(error.message).toBe('Invalid token');
		});

		it('should create API error', () => {
			const originalError = new Error('Original error');
			const error = createApiError('API failed', 500, originalError);

			expect(error).toBeInstanceOf(McpError);
			expect(error.type).toBe(ErrorType.API_ERROR);
			expect(error.statusCode).toBe(500);
			expect(error.message).toBe('API failed');
			expect(error.originalError).toBe(originalError);
		});

		it('should create unexpected error', () => {
			const error = createUnexpectedError();

			expect(error).toBeInstanceOf(McpError);
			expect(error.type).toBe(ErrorType.UNEXPECTED_ERROR);
			expect(error.message).toBe('An unexpected error occurred');
		});
	});

	describe('ensureMcpError', () => {
		it('should return the same error if it is already an McpError', () => {
			const originalError = createApiError('Original error');
			const error = ensureMcpError(originalError);

			expect(error).toBe(originalError);
		});

		it('should wrap a standard Error', () => {
			const originalError = new Error('Standard error');
			const error = ensureMcpError(originalError);

			expect(error).toBeInstanceOf(McpError);
			expect(error.type).toBe(ErrorType.UNEXPECTED_ERROR);
			expect(error.message).toBe('Standard error');
			expect(error.originalError).toBe(originalError);
		});

		it('should handle non-Error objects', () => {
			const error = ensureMcpError('String error');

			expect(error).toBeInstanceOf(McpError);
			expect(error.type).toBe(ErrorType.UNEXPECTED_ERROR);
			expect(error.message).toBe('String error');
		});
	});

	describe('formatErrorForMcpTool', () => {
		it('should format an error for MCP tool response', () => {
			const error = createApiError('API error');
			const response = formatErrorForMcpTool(error);

			expect(response).toHaveProperty('content');
			expect(response.content).toHaveLength(1);
			expect(response.content[0]).toHaveProperty('type', 'text');
			expect(response.content[0]).toHaveProperty(
				'text',
				'Error: API error',
			);
		});
	});

	describe('formatErrorForMcpResource', () => {
		it('should format an error for MCP resource response', () => {
			const error = createApiError('API error');
			const response = formatErrorForMcpResource(error, 'test://uri');

			expect(response).toHaveProperty('contents');
			expect(response.contents).toHaveLength(1);
			expect(response.contents[0]).toHaveProperty('uri', 'test://uri');
			expect(response.contents[0]).toHaveProperty(
				'text',
				'Error: API error',
			);
			expect(response.contents[0]).toHaveProperty(
				'mimeType',
				'text/plain',
			);
			expect(response.contents[0]).toHaveProperty(
				'description',
				'Error: API_ERROR',
			);
		});
	});
});
</file>

<file path="src/utils/config.util.ts">
import fs from 'fs';
import path from 'path';
import { Logger } from './logger.util.js';
import dotenv from 'dotenv';
import os from 'os';

/**
 * Configuration loader that handles multiple sources with priority:
 * 1. Direct ENV pass (process.env)
 * 2. .env file in project root
 * 3. Global config file at $HOME/.mcp/configs.json
 */
class ConfigLoader {
	private packageName: string;
	private configLoaded: boolean = false;

	/**
	 * Create a new ConfigLoader instance
	 * @param packageName The package name to use for global config lookup
	 */
	constructor(packageName: string) {
		this.packageName = packageName;
	}

	/**
	 * Load configuration from all sources with proper priority
	 */
	load(): void {
		const methodLogger = Logger.forContext('utils/config.util.ts', 'load');
		if (this.configLoaded) {
			methodLogger.debug('Configuration already loaded, skipping');
			return;
		}

		methodLogger.debug('Loading configuration...');

		// Priority 3: Load from global config file
		this.loadFromGlobalConfig();

		// Priority 2: Load from .env file
		this.loadFromEnvFile();

		// Priority 1: Direct ENV pass is already in process.env
		// No need to do anything as it already has highest priority

		this.configLoaded = true;
		methodLogger.debug('Configuration loaded successfully');
	}

	/**
	 * Load configuration from .env file in project root
	 */
	private loadFromEnvFile(): void {
		const methodLogger = Logger.forContext(
			'utils/config.util.ts',
			'loadFromEnvFile',
		);
		try {
			const result = dotenv.config();
			if (result.error) {
				methodLogger.debug('No .env file found or error reading it');
				return;
			}
			methodLogger.debug('Loaded configuration from .env file');
		} catch (error) {
			methodLogger.error('Error loading .env file', error);
		}
	}

	/**
	 * Load configuration from global config file at $HOME/.mcp/configs.json
	 */
	private loadFromGlobalConfig(): void {
		const methodLogger = Logger.forContext(
			'utils/config.util.ts',
			'loadFromGlobalConfig',
		);
		try {
			const homedir = os.homedir();
			const globalConfigPath = path.join(homedir, '.mcp', 'configs.json');

			if (!fs.existsSync(globalConfigPath)) {
				methodLogger.debug('Global config file not found');
				return;
			}

			const configContent = fs.readFileSync(globalConfigPath, 'utf8');
			const config = JSON.parse(configContent);

			if (
				!config[this.packageName] ||
				!config[this.packageName].environments
			) {
				methodLogger.debug(
					`No configuration found for ${this.packageName}`,
				);
				return;
			}

			const environments = config[this.packageName].environments;
			for (const [key, value] of Object.entries(environments)) {
				// Only set if not already defined in process.env
				if (process.env[key] === undefined) {
					process.env[key] = String(value);
				}
			}

			methodLogger.debug('Loaded configuration from global config file');
		} catch (error) {
			methodLogger.error('Error loading global config file', error);
		}
	}

	/**
	 * Get a configuration value
	 * @param key The configuration key
	 * @param defaultValue The default value if the key is not found
	 * @returns The configuration value or the default value
	 */
	get(key: string, defaultValue?: string): string | undefined {
		return process.env[key] || defaultValue;
	}

	/**
	 * Get a boolean configuration value
	 * @param key The configuration key
	 * @param defaultValue The default value if the key is not found
	 * @returns The boolean configuration value or the default value
	 */
	getBoolean(key: string, defaultValue: boolean = false): boolean {
		const value = this.get(key);
		if (value === undefined) {
			return defaultValue;
		}
		return value.toLowerCase() === 'true';
	}
}

// Create and export a singleton instance with the package name from package.json
export const config = new ConfigLoader(
	'@aashari/mcp-server-atlassian-bitbucket',
);
</file>

<file path="src/utils/constants.util.ts">
/**
 * Application constants
 *
 * This file contains constants used throughout the application.
 * Centralizing these values makes them easier to maintain and update.
 */

/**
 * Current application version
 * This should match the version in package.json
 */
export const VERSION = '1.13.0';

/**
 * Package name with scope
 * Used for initialization and identification
 */
export const PACKAGE_NAME = '@aashari/mcp-server-atlassian-bitbucket';

/**
 * CLI command name
 * Used for binary name and CLI help text
 */
export const CLI_NAME = 'mcp-atlassian-bitbucket';
</file>

<file path="src/utils/defaults.util.ts">
/**
 * Default values for pagination across the application.
 * These values should be used consistently throughout the codebase.
 */

/**
 * Default page size for all list operations.
 * This value determines how many items are returned in a single page by default.
 */
export const DEFAULT_PAGE_SIZE = 25;

/**
 * Default values for repository operations
 */
export const REPOSITORY_DEFAULTS = {
	/**
	 * Whether to include branches in repository details by default
	 */
	INCLUDE_BRANCHES: false,

	/**
	 * Whether to include commits in repository details by default
	 */
	INCLUDE_COMMITS: false,

	/**
	 * Whether to include pull requests in repository details by default
	 */
	INCLUDE_PULL_REQUESTS: false,
};

/**
 * Default values for pull request operations
 */
export const PULL_REQUEST_DEFAULTS = {
	/**
	 * Whether to include participants in pull request details by default
	 */
	INCLUDE_PARTICIPANTS: true,

	/**
	 * Whether to include activities in pull request details by default
	 */
	INCLUDE_ACTIVITIES: false,

	/**
	 * Whether to include commits in pull request details by default
	 */
	INCLUDE_COMMITS: false,

	/**
	 * Whether to include comments in pull request details by default
	 */
	INCLUDE_COMMENTS: false,
};

/**
 * Apply default values to options object.
 * This utility ensures that default values are consistently applied.
 *
 * @param options Options object that may have some values undefined
 * @param defaults Default values to apply when options values are undefined
 * @returns Options object with default values applied
 *
 * @example
 * const options = applyDefaults({ limit: 10 }, { limit: DEFAULT_PAGE_SIZE, includeBranches: true });
 * // Result: { limit: 10, includeBranches: true }
 */
export function applyDefaults<T extends object>(
	options: Partial<T>,
	defaults: Partial<T>,
): T {
	return {
		...defaults,
		...Object.fromEntries(
			Object.entries(options).filter(([_, value]) => value !== undefined),
		),
	} as T;
}
</file>

<file path="src/utils/error-handler.util.ts">
import { createApiError } from './error.util.js';
import { Logger } from './logger.util.js';

/**
 * Standard error codes for consistent handling
 */
export enum ErrorCode {
	NOT_FOUND = 'NOT_FOUND',
	INVALID_CURSOR = 'INVALID_CURSOR',
	ACCESS_DENIED = 'ACCESS_DENIED',
	VALIDATION_ERROR = 'VALIDATION_ERROR',
	UNEXPECTED_ERROR = 'UNEXPECTED_ERROR',
}

/**
 * Context information for error handling
 */
export interface ErrorContext {
	/**
	 * Source of the error (e.g., file path and function)
	 */
	source?: string;

	/**
	 * Type of entity being processed (e.g., 'Repository', 'PullRequest')
	 */
	entityType?: string;

	/**
	 * Identifier of the entity being processed
	 */
	entityId?: string | Record<string, string>;

	/**
	 * Operation being performed (e.g., 'listing', 'creating')
	 */
	operation?: string;

	/**
	 * Additional information for debugging
	 */
	additionalInfo?: Record<string, unknown>;
}

/**
 * Detect specific error types from raw errors
 * @param error The error to analyze
 * @param context Context information for better error detection
 * @returns Object containing the error code and status code
 */
export function detectErrorType(
	error: unknown,
	context: ErrorContext = {},
): { code: ErrorCode; statusCode: number } {
	const methodLogger = Logger.forContext(
		'utils/error-handler.util.ts',
		'detectErrorType',
	);
	methodLogger.debug(`Detecting error type`, { error, context });

	const errorMessage = error instanceof Error ? error.message : String(error);
	const statusCode =
		error instanceof Error && 'statusCode' in error
			? (error as { statusCode: number }).statusCode
			: undefined;

	// Not Found detection
	if (
		errorMessage.includes('not found') ||
		errorMessage.includes('does not exist') ||
		statusCode === 404
	) {
		return { code: ErrorCode.NOT_FOUND, statusCode: 404 };
	}

	// Access Denied detection
	if (
		errorMessage.includes('access') ||
		errorMessage.includes('permission') ||
		errorMessage.includes('authorize') ||
		errorMessage.includes('authentication') ||
		statusCode === 401 ||
		statusCode === 403
	) {
		return { code: ErrorCode.ACCESS_DENIED, statusCode: statusCode || 403 };
	}

	// Invalid Cursor detection
	if (
		(errorMessage.includes('cursor') ||
			errorMessage.includes('startAt') ||
			errorMessage.includes('page')) &&
		(errorMessage.includes('invalid') || errorMessage.includes('not valid'))
	) {
		return { code: ErrorCode.INVALID_CURSOR, statusCode: 400 };
	}

	// Validation Error detection
	if (
		errorMessage.includes('validation') ||
		errorMessage.includes('invalid') ||
		errorMessage.includes('required') ||
		statusCode === 400 ||
		statusCode === 422
	) {
		return {
			code: ErrorCode.VALIDATION_ERROR,
			statusCode: statusCode || 400,
		};
	}

	// Default to unexpected error
	return {
		code: ErrorCode.UNEXPECTED_ERROR,
		statusCode: statusCode || 500,
	};
}

/**
 * Create user-friendly error messages based on error type and context
 * @param code The error code
 * @param context Context information for better error messages
 * @param originalMessage The original error message
 * @returns User-friendly error message
 */
export function createUserFriendlyErrorMessage(
	code: ErrorCode,
	context: ErrorContext = {},
	originalMessage?: string,
): string {
	const methodLogger = Logger.forContext(
		'utils/error-handler.util.ts',
		'createUserFriendlyErrorMessage',
	);
	const { entityType, entityId, operation } = context;

	// Format entity ID for display
	let entityIdStr = '';
	if (entityId) {
		if (typeof entityId === 'string') {
			entityIdStr = entityId;
		} else {
			// Handle object entityId (like ProjectIdentifier)
			entityIdStr = Object.values(entityId).join('/');
		}
	}

	// Determine entity display name
	const entity = entityType
		? `${entityType}${entityIdStr ? ` ${entityIdStr}` : ''}`
		: 'Resource';

	let message = '';

	switch (code) {
		case ErrorCode.NOT_FOUND:
			message = `${entity} not found${entityIdStr ? `: ${entityIdStr}` : ''}. Verify the ID is correct and that you have access to this ${entityType?.toLowerCase() || 'resource'}.`;
			break;

		case ErrorCode.ACCESS_DENIED:
			message = `Access denied for ${entity.toLowerCase()}${entityIdStr ? ` ${entityIdStr}` : ''}. Verify your credentials and permissions.`;
			break;

		case ErrorCode.INVALID_CURSOR:
			message = `Invalid pagination cursor. Use the exact cursor string returned from previous results.`;
			break;

		case ErrorCode.VALIDATION_ERROR:
			message =
				originalMessage ||
				`Invalid data provided for ${operation || 'operation'} ${entity.toLowerCase()}.`;
			break;

		default:
			message = `An unexpected error occurred while ${operation || 'processing'} ${entity.toLowerCase()}.`;
	}

	// Include original message details if available and appropriate
	if (
		originalMessage &&
		code !== ErrorCode.NOT_FOUND &&
		code !== ErrorCode.ACCESS_DENIED &&
		code !== ErrorCode.VALIDATION_ERROR
	) {
		message += ` Error details: ${originalMessage}`;
	}

	methodLogger.debug(`Created user-friendly message: ${message}`, {
		code,
		context,
	});
	return message;
}

/**
 * Handle controller errors consistently
 * @param error The error to handle
 * @param context Context information for better error messages
 * @returns Never returns, always throws an error
 */
export function handleControllerError(
	error: unknown,
	context: ErrorContext = {},
): never {
	const methodLogger = Logger.forContext(
		'utils/error-handler.util.ts',
		'handleControllerError',
	);

	// Extract error details
	const errorMessage = error instanceof Error ? error.message : String(error);
	const statusCode =
		error instanceof Error && 'statusCode' in error
			? (error as { statusCode: number }).statusCode
			: undefined;

	// Detect error type using utility
	const { code, statusCode: detectedStatus } = detectErrorType(
		error,
		context,
	);

	// Combine detected status with explicit status
	const finalStatusCode = statusCode || detectedStatus;

	// Format entity information for logging
	const { entityType, entityId, operation } = context;
	const entity = entityType || 'resource';
	const entityIdStr = entityId
		? typeof entityId === 'string'
			? entityId
			: JSON.stringify(entityId)
		: '';
	const actionStr = operation || 'processing';

	// Log detailed error information
	methodLogger.error(
		`Error ${actionStr} ${entity}${
			entityIdStr ? `: ${entityIdStr}` : ''
		}: ${errorMessage}`,
		error,
	);

	// Create user-friendly error message for the response
	const message =
		code === ErrorCode.VALIDATION_ERROR
			? errorMessage
			: createUserFriendlyErrorMessage(code, context, errorMessage);

	// Throw an appropriate API error with the user-friendly message
	throw createApiError(message, finalStatusCode, error);
}
</file>

<file path="src/utils/error.util.test.ts">
import {
	ErrorType,
	McpError,
	createApiError,
	createAuthMissingError,
	createAuthInvalidError,
	createUnexpectedError,
	ensureMcpError,
	formatErrorForMcpTool,
	formatErrorForMcpResource,
} from './error.util.js';

describe('Error Utility', () => {
	describe('McpError', () => {
		it('should create an error with the correct properties', () => {
			const error = new McpError('Test error', ErrorType.API_ERROR, 404);

			expect(error).toBeInstanceOf(Error);
			expect(error).toBeInstanceOf(McpError);
			expect(error.message).toBe('Test error');
			expect(error.type).toBe(ErrorType.API_ERROR);
			expect(error.statusCode).toBe(404);
			expect(error.name).toBe('McpError');
		});
	});

	describe('Error Factory Functions', () => {
		it('should create auth missing error', () => {
			const error = createAuthMissingError();

			expect(error).toBeInstanceOf(McpError);
			expect(error.type).toBe(ErrorType.AUTH_MISSING);
			expect(error.message).toBe(
				'Authentication credentials are missing',
			);
		});

		it('should create auth invalid error', () => {
			const error = createAuthInvalidError('Invalid token');

			expect(error).toBeInstanceOf(McpError);
			expect(error.type).toBe(ErrorType.AUTH_INVALID);
			expect(error.statusCode).toBe(401);
			expect(error.message).toBe('Invalid token');
		});

		it('should create API error', () => {
			const originalError = new Error('Original error');
			const error = createApiError('API failed', 500, originalError);

			expect(error).toBeInstanceOf(McpError);
			expect(error.type).toBe(ErrorType.API_ERROR);
			expect(error.statusCode).toBe(500);
			expect(error.message).toBe('API failed');
			expect(error.originalError).toBe(originalError);
		});

		it('should create unexpected error', () => {
			const error = createUnexpectedError();

			expect(error).toBeInstanceOf(McpError);
			expect(error.type).toBe(ErrorType.UNEXPECTED_ERROR);
			expect(error.message).toBe('An unexpected error occurred');
		});
	});

	describe('ensureMcpError', () => {
		it('should return the same error if it is already an McpError', () => {
			const originalError = createApiError('Original error');
			const error = ensureMcpError(originalError);

			expect(error).toBe(originalError);
		});

		it('should wrap a standard Error', () => {
			const originalError = new Error('Standard error');
			const error = ensureMcpError(originalError);

			expect(error).toBeInstanceOf(McpError);
			expect(error.type).toBe(ErrorType.UNEXPECTED_ERROR);
			expect(error.message).toBe('Standard error');
			expect(error.originalError).toBe(originalError);
		});

		it('should handle non-Error objects', () => {
			const error = ensureMcpError('String error');

			expect(error).toBeInstanceOf(McpError);
			expect(error.type).toBe(ErrorType.UNEXPECTED_ERROR);
			expect(error.message).toBe('String error');
		});
	});

	describe('formatErrorForMcpTool', () => {
		it('should format an error for MCP tool response', () => {
			const error = createApiError('API error');
			const response = formatErrorForMcpTool(error);

			expect(response).toHaveProperty('content');
			expect(response.content).toHaveLength(1);
			expect(response.content[0]).toHaveProperty('type', 'text');
			expect(response.content[0]).toHaveProperty(
				'text',
				'Error: API error',
			);
		});
	});

	describe('formatErrorForMcpResource', () => {
		it('should format an error for MCP resource response', () => {
			const error = createApiError('API error');
			const response = formatErrorForMcpResource(error, 'test://uri');

			expect(response).toHaveProperty('contents');
			expect(response.contents).toHaveLength(1);
			expect(response.contents[0]).toHaveProperty('uri', 'test://uri');
			expect(response.contents[0]).toHaveProperty(
				'text',
				'Error: API error',
			);
			expect(response.contents[0]).toHaveProperty(
				'mimeType',
				'text/plain',
			);
			expect(response.contents[0]).toHaveProperty(
				'description',
				'Error: API_ERROR',
			);
		});
	});
});
</file>

<file path="src/utils/error.util.ts">
import { Logger } from './logger.util.js';

/**
 * Error types for classification
 */
export enum ErrorType {
	AUTH_MISSING = 'AUTH_MISSING',
	AUTH_INVALID = 'AUTH_INVALID',
	API_ERROR = 'API_ERROR',
	UNEXPECTED_ERROR = 'UNEXPECTED_ERROR',
}

/**
 * Custom error class with type classification
 */
export class McpError extends Error {
	type: ErrorType;
	statusCode?: number;
	originalError?: unknown;

	constructor(
		message: string,
		type: ErrorType,
		statusCode?: number,
		originalError?: unknown,
	) {
		super(message);
		this.name = 'McpError';
		this.type = type;
		this.statusCode = statusCode;
		this.originalError = originalError;
	}
}

/**
 * Create an authentication missing error
 */
export function createAuthMissingError(
	message: string = 'Authentication credentials are missing',
): McpError {
	return new McpError(message, ErrorType.AUTH_MISSING);
}

/**
 * Create an authentication invalid error
 */
export function createAuthInvalidError(
	message: string = 'Authentication credentials are invalid',
): McpError {
	return new McpError(message, ErrorType.AUTH_INVALID, 401);
}

/**
 * Create an API error
 */
export function createApiError(
	message: string,
	statusCode?: number,
	originalError?: unknown,
): McpError {
	return new McpError(
		message,
		ErrorType.API_ERROR,
		statusCode,
		originalError,
	);
}

/**
 * Create an unexpected error
 */
export function createUnexpectedError(
	message: string = 'An unexpected error occurred',
	originalError?: unknown,
): McpError {
	return new McpError(
		message,
		ErrorType.UNEXPECTED_ERROR,
		undefined,
		originalError,
	);
}

/**
 * Ensure an error is an McpError
 */
export function ensureMcpError(error: unknown): McpError {
	if (error instanceof McpError) {
		return error;
	}

	if (error instanceof Error) {
		return createUnexpectedError(error.message, error);
	}

	return createUnexpectedError(String(error));
}

/**
 * Format error for MCP tool response
 */
export function formatErrorForMcpTool(error: unknown): {
	content: Array<{ type: 'text'; text: string }>;
} {
	const methodLogger = Logger.forContext(
		'utils/error.util.ts',
		'formatErrorForMcpTool',
	);
	const mcpError = ensureMcpError(error);

	methodLogger.error(`${mcpError.type} error`, mcpError);

	return {
		content: [
			{
				type: 'text' as const,
				text: `Error: ${mcpError.message}`,
			},
		],
	};
}

/**
 * Format error for MCP resource response
 */
export function formatErrorForMcpResource(
	error: unknown,
	uri: string,
): {
	contents: Array<{
		uri: string;
		text: string;
		mimeType: string;
		description?: string;
	}>;
} {
	const methodLogger = Logger.forContext(
		'utils/error.util.ts',
		'formatErrorForMcpResource',
	);
	const mcpError = ensureMcpError(error);

	methodLogger.error(`${mcpError.type} error`, mcpError);

	return {
		contents: [
			{
				uri,
				text: `Error: ${mcpError.message}`,
				mimeType: 'text/plain',
				description: `Error: ${mcpError.type}`,
			},
		],
	};
}

/**
 * Handle error in CLI context
 * @param error The error to handle
 * @param source Optional source information for better error messages
 */
export function handleCliError(error: unknown, source?: string): never {
	const methodLogger = Logger.forContext(
		'utils/error.util.ts',
		'handleCliError',
	);
	const mcpError = ensureMcpError(error);

	// Log detailed information at different levels based on error type
	if (mcpError.statusCode && mcpError.statusCode >= 500) {
		methodLogger.error(`${mcpError.type} error occurred`, {
			message: mcpError.message,
			statusCode: mcpError.statusCode,
			source,
			stack: mcpError.stack,
		});
	} else {
		methodLogger.warn(`${mcpError.type} error occurred`, {
			message: mcpError.message,
			statusCode: mcpError.statusCode,
			source,
		});
	}

	// Log additional debug information if DEBUG is enabled
	methodLogger.debug('Error details', {
		type: mcpError.type,
		statusCode: mcpError.statusCode,
		originalError: mcpError.originalError,
		stack: mcpError.stack,
	});

	// Display user-friendly message to console
	console.error(`Error: ${mcpError.message}`);
	process.exit(1);
}
</file>

<file path="src/utils/formatter.util.ts">
/**
 * Standardized formatting utilities for consistent output across all CLI and Tool interfaces.
 * These functions should be used by all formatters to ensure consistent formatting.
 */

/**
 * Format a date in a standardized way: YYYY-MM-DD HH:MM:SS UTC
 * @param dateString - ISO date string or Date object
 * @returns Formatted date string
 */
export function formatDate(dateString?: string | Date): string {
	if (!dateString) {
		return 'Not available';
	}

	try {
		const date =
			typeof dateString === 'string' ? new Date(dateString) : dateString;

		// Format: YYYY-MM-DD HH:MM:SS UTC
		return date
			.toISOString()
			.replace('T', ' ')
			.replace(/\.\d+Z$/, ' UTC');
	} catch {
		return 'Invalid date';
	}
}

/**
 * Format a relative time (e.g., "2 days ago")
 * @param dateString - ISO date string or Date object
 * @returns Relative time string
 */
export function formatRelativeTime(dateString?: string | Date): string {
	if (!dateString) {
		return 'Not available';
	}

	try {
		const date =
			typeof dateString === 'string' ? new Date(dateString) : dateString;

		const now = new Date();
		const diffMs = now.getTime() - date.getTime();
		const diffSec = Math.floor(diffMs / 1000);
		const diffMin = Math.floor(diffSec / 60);
		const diffHour = Math.floor(diffMin / 60);
		const diffDay = Math.floor(diffHour / 24);
		const diffMonth = Math.floor(diffDay / 30);
		const diffYear = Math.floor(diffMonth / 12);

		if (diffYear > 0) {
			return `${diffYear} year${diffYear === 1 ? '' : 's'} ago`;
		} else if (diffMonth > 0) {
			return `${diffMonth} month${diffMonth === 1 ? '' : 's'} ago`;
		} else if (diffDay > 0) {
			return `${diffDay} day${diffDay === 1 ? '' : 's'} ago`;
		} else if (diffHour > 0) {
			return `${diffHour} hour${diffHour === 1 ? '' : 's'} ago`;
		} else if (diffMin > 0) {
			return `${diffMin} minute${diffMin === 1 ? '' : 's'} ago`;
		} else {
			return `${diffSec} second${diffSec === 1 ? '' : 's'} ago`;
		}
	} catch {
		return 'Invalid date';
	}
}

/**
 * Format a URL as a markdown link
 * @param url - URL to format
 * @param title - Link title
 * @returns Formatted markdown link
 */
export function formatUrl(url?: string, title?: string): string {
	if (!url) {
		return 'Not available';
	}

	const linkTitle = title || url;
	return `[${linkTitle}](${url})`;
}

/**
 * Format pagination information in a standardized way
 * @param totalItems - Number of items in the current result set
 * @param hasMore - Whether there are more results available
 * @param nextCursor - Cursor for the next page of results
 * @returns Formatted pagination information
 */
export function formatPagination(
	totalItems: number,
	hasMore: boolean,
	nextCursor?: string,
): string {
	if (!hasMore) {
		return `*Showing ${totalItems} item${totalItems === 1 ? '' : 's'}.*`;
	}

	return `*Showing ${totalItems} item${totalItems === 1 ? '' : 's'}. More results are available.*\n\nTo see more results, use --cursor "${nextCursor}"`;
}

/**
 * Format a heading with consistent style
 * @param text - Heading text
 * @param level - Heading level (1-6)
 * @returns Formatted heading
 */
export function formatHeading(text: string, level: number = 1): string {
	const validLevel = Math.min(Math.max(level, 1), 6);
	const prefix = '#'.repeat(validLevel);
	return `${prefix} ${text}`;
}

/**
 * Format a list of key-value pairs as a bullet list
 * @param items - Object with key-value pairs
 * @param keyFormatter - Optional function to format keys
 * @returns Formatted bullet list
 */
export function formatBulletList(
	items: Record<string, unknown>,
	keyFormatter?: (key: string) => string,
): string {
	const lines: string[] = [];

	for (const [key, value] of Object.entries(items)) {
		if (value === undefined || value === null) {
			continue;
		}

		const formattedKey = keyFormatter ? keyFormatter(key) : key;
		const formattedValue = formatValue(value);
		lines.push(`- **${formattedKey}**: ${formattedValue}`);
	}

	return lines.join('\n');
}

/**
 * Format a value based on its type
 * @param value - Value to format
 * @returns Formatted value
 */
function formatValue(value: unknown): string {
	if (value === undefined || value === null) {
		return 'Not available';
	}

	if (value instanceof Date) {
		return formatDate(value);
	}

	// Handle URL objects with url and title properties
	if (typeof value === 'object' && value !== null && 'url' in value) {
		const urlObj = value as { url: string; title?: string };
		if (typeof urlObj.url === 'string') {
			return formatUrl(urlObj.url, urlObj.title);
		}
	}

	if (typeof value === 'string') {
		// Check if it's a URL
		if (value.startsWith('http://') || value.startsWith('https://')) {
			return formatUrl(value);
		}

		// Check if it might be a date
		if (/^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}/.test(value)) {
			return formatDate(value);
		}

		return value;
	}

	if (typeof value === 'boolean') {
		return value ? 'Yes' : 'No';
	}

	return String(value);
}

/**
 * Format a separator line
 * @returns Separator line
 */
export function formatSeparator(): string {
	return '---';
}

/**
 * Format a numbered list of items
 * @param items - Array of items to format
 * @param formatter - Function to format each item
 * @returns Formatted numbered list
 */
export function formatNumberedList<T>(
	items: T[],
	formatter: (item: T, index: number) => string,
): string {
	if (items.length === 0) {
		return 'No items.';
	}

	return items
		.map((item, index) => formatter(item, index))
		.join('\n\n' + formatSeparator() + '\n\n');
}

/**
 * Format a raw diff output for display
 *
 * Parses and formats a raw unified diff string into a Markdown
 * formatted display with proper code block syntax highlighting.
 *
 * @param {string} rawDiff - The raw diff content from the API
 * @param {number} maxFiles - Maximum number of files to display in detail (optional, default: 5)
 * @param {number} maxLinesPerFile - Maximum number of lines to display per file (optional, default: 100)
 * @returns {string} Markdown formatted diff content
 */
export function formatDiff(
	rawDiff: string,
	maxFiles: number = 5,
	maxLinesPerFile: number = 100,
): string {
	if (!rawDiff || rawDiff.trim() === '') {
		return '*No changes found in this pull request.*';
	}

	const lines = rawDiff.split('\n');
	const formattedLines: string[] = [];
	let currentFile = '';
	let fileCount = 0;
	let inFile = false;
	let truncated = false;
	let lineCount = 0;

	for (const line of lines) {
		// New file is marked by a line starting with "diff --git"
		if (line.startsWith('diff --git')) {
			if (inFile) {
				// Close previous file code block
				formattedLines.push('```');
				formattedLines.push('');
			}

			// Only process up to maxFiles
			fileCount++;
			if (fileCount > maxFiles) {
				truncated = true;
				break;
			}

			// Extract filename
			const filePath = line.match(/diff --git a\/(.*) b\/(.*)/);
			currentFile = filePath ? filePath[1] : 'unknown file';
			formattedLines.push(`### ${currentFile}`);
			formattedLines.push('');
			formattedLines.push('```diff');
			inFile = true;
			lineCount = 0;
		} else if (inFile) {
			lineCount++;

			// Truncate files that are too long
			if (lineCount > maxLinesPerFile) {
				formattedLines.push(
					'// ... more lines omitted for brevity ...',
				);
				formattedLines.push('```');
				formattedLines.push('');
				inFile = false;
				continue;
			}

			// Format diff lines with appropriate highlighting
			if (line.startsWith('+')) {
				formattedLines.push(line);
			} else if (line.startsWith('-')) {
				formattedLines.push(line);
			} else if (line.startsWith('@@')) {
				// Change section header
				formattedLines.push(line);
			} else {
				// Context line
				formattedLines.push(line);
			}
		}
	}

	// Close the last code block if necessary
	if (inFile) {
		formattedLines.push('```');
	}

	// Add truncation notice if we limited the output
	if (truncated) {
		formattedLines.push('');
		formattedLines.push(
			`*Output truncated. Only showing the first ${maxFiles} files.*`,
		);
	}

	return formattedLines.join('\n');
}
</file>

<file path="src/utils/logger.util.ts">
import * as fs from 'fs';
import * as path from 'path';
import * as os from 'os';
import * as crypto from 'crypto';

/**
 * Format a timestamp for logging
 * @returns Formatted timestamp [HH:MM:SS]
 */
function getTimestamp(): string {
	const now = new Date();
	return `[${now.toISOString().split('T')[1].split('.')[0]}]`;
}

/**
 * Safely convert object to string with size limits
 * @param obj Object to stringify
 * @param maxLength Maximum length of the resulting string
 * @returns Safely stringified object
 */
function safeStringify(obj: unknown, maxLength = 1000): string {
	try {
		const str = JSON.stringify(obj);
		if (str.length <= maxLength) {
			return str;
		}
		return `${str.substring(0, maxLength)}... (truncated, ${str.length} chars total)`;
	} catch {
		return '[Object cannot be stringified]';
	}
}

/**
 * Extract essential values from larger objects for logging
 * @param obj The object to extract values from
 * @param keys Keys to extract (if available)
 * @returns Object containing only the specified keys
 */
function extractEssentialValues(
	obj: Record<string, unknown>,
	keys: string[],
): Record<string, unknown> {
	const result: Record<string, unknown> = {};
	keys.forEach((key) => {
		if (Object.prototype.hasOwnProperty.call(obj, key)) {
			result[key] = obj[key];
		}
	});
	return result;
}

/**
 * Format source path consistently using the standardized format:
 * [module/file.ts@function] or [module/file.ts]
 *
 * @param filePath File path (with or without src/ prefix)
 * @param functionName Optional function name
 * @returns Formatted source path according to standard pattern
 */
function formatSourcePath(filePath: string, functionName?: string): string {
	// Always strip 'src/' prefix for consistency
	const normalizedPath = filePath.replace(/^src\//, '');

	return functionName
		? `[${normalizedPath}@${functionName}]`
		: `[${normalizedPath}]`;
}

/**
 * Check if debug logging is enabled for a specific module
 *
 * This function parses the DEBUG environment variable to determine if a specific
 * module should have debug logging enabled. The DEBUG variable can be:
 * - 'true' or '1': Enable all debug logging
 * - Comma-separated list of modules: Enable debug only for those modules
 * - Module patterns with wildcards: e.g., 'controllers/*' enables all controllers
 *
 * Examples:
 * - DEBUG=true
 * - DEBUG=controllers/*,services/aws.sso.auth.service.ts
 * - DEBUG=transport,utils/formatter*
 *
 * @param modulePath The module path to check against DEBUG patterns
 * @returns true if debug is enabled for this module, false otherwise
 */
function isDebugEnabledForModule(modulePath: string): boolean {
	const debugEnv = process.env.DEBUG;

	if (!debugEnv) {
		return false;
	}

	// If debug is set to true or 1, enable all debug logging
	if (debugEnv === 'true' || debugEnv === '1') {
		return true;
	}

	// Parse comma-separated debug patterns
	const debugPatterns = debugEnv.split(',').map((p) => p.trim());

	// Check if the module matches any pattern
	return debugPatterns.some((pattern) => {
		// Convert glob-like patterns to regex
		// * matches anything within a path segment
		// ** matches across path segments
		const regexPattern = pattern
			.replace(/\*/g, '.*') // Convert * to regex .*
			.replace(/\?/g, '.'); // Convert ? to regex .

		const regex = new RegExp(`^${regexPattern}$`);
		return (
			regex.test(modulePath) ||
			// Check for pattern matches without the 'src/' prefix
			regex.test(modulePath.replace(/^src\//, ''))
		);
	});
}

// Generate a unique session ID for this process
const SESSION_ID = crypto.randomUUID();

// Get the package name from environment variables or default to 'mcp-server'
const getPkgName = (): string => {
	try {
		// Try to get it from package.json first if available
		const packageJsonPath = path.resolve(process.cwd(), 'package.json');
		if (fs.existsSync(packageJsonPath)) {
			const packageJson = JSON.parse(
				fs.readFileSync(packageJsonPath, 'utf8'),
			);
			if (packageJson.name) {
				// Extract the last part of the name if it's scoped
				const match = packageJson.name.match(/(@[\w-]+\/)?(.+)/);
				return match ? match[2] : packageJson.name;
			}
		}
	} catch {
		// Silently fail and use default
	}

	// Fallback to environment variable or default
	return process.env.PACKAGE_NAME || 'mcp-server';
};

// MCP logs directory setup
const HOME_DIR = os.homedir();
const MCP_DATA_DIR = path.join(HOME_DIR, '.mcp', 'data');
const CLI_NAME = getPkgName();

// Ensure the MCP data directory exists
if (!fs.existsSync(MCP_DATA_DIR)) {
	fs.mkdirSync(MCP_DATA_DIR, { recursive: true });
}

// Create the log file path with session ID
const LOG_FILENAME = `${CLI_NAME}.${SESSION_ID}.log`;
const LOG_FILEPATH = path.join(MCP_DATA_DIR, LOG_FILENAME);

// Write initial log header
fs.writeFileSync(
	LOG_FILEPATH,
	`# ${CLI_NAME} Log Session\n` +
		`Session ID: ${SESSION_ID}\n` +
		`Started: ${new Date().toISOString()}\n` +
		`Process ID: ${process.pid}\n` +
		`Working Directory: ${process.cwd()}\n` +
		`Command: ${process.argv.join(' ')}\n\n` +
		`## Log Entries\n\n`,
	'utf8',
);

// Logger singleton to track initialization
let isLoggerInitialized = false;

/**
 * Logger class for consistent logging across the application.
 *
 * RECOMMENDED USAGE:
 *
 * 1. Create a file-level logger using the static forContext method:
 *    ```
 *    const logger = Logger.forContext('controllers/myController.ts');
 *    ```
 *
 * 2. For method-specific logging, create a method logger:
 *    ```
 *    const methodLogger = Logger.forContext('controllers/myController.ts', 'myMethod');
 *    ```
 *
 * 3. Avoid using raw string prefixes in log messages. Instead, use contextualized loggers.
 *
 * 4. For debugging objects, use the debugResponse method to log only essential properties.
 *
 * 5. Set DEBUG environment variable to control which modules show debug logs:
 *    - DEBUG=true (enable all debug logs)
 *    - DEBUG=controllers/*,services/* (enable for specific module groups)
 *    - DEBUG=transport,utils/formatter* (enable specific modules, supports wildcards)
 */
class Logger {
	private context?: string;
	private modulePath: string;
	private static sessionId = SESSION_ID;
	private static logFilePath = LOG_FILEPATH;

	constructor(context?: string, modulePath: string = '') {
		this.context = context;
		this.modulePath = modulePath;

		// Log initialization message only once
		if (!isLoggerInitialized) {
			this.info(
				`Logger initialized with session ID: ${Logger.sessionId}`,
			);
			this.info(`Logs will be saved to: ${Logger.logFilePath}`);
			isLoggerInitialized = true;
		}
	}

	/**
	 * Create a contextualized logger for a specific file or component.
	 * This is the preferred method for creating loggers.
	 *
	 * @param filePath The file path (e.g., 'controllers/aws.sso.auth.controller.ts')
	 * @param functionName Optional function name for more specific context
	 * @returns A new Logger instance with the specified context
	 *
	 * @example
	 * // File-level logger
	 * const logger = Logger.forContext('controllers/myController.ts');
	 *
	 * // Method-level logger
	 * const methodLogger = Logger.forContext('controllers/myController.ts', 'myMethod');
	 */
	static forContext(filePath: string, functionName?: string): Logger {
		return new Logger(formatSourcePath(filePath, functionName), filePath);
	}

	/**
	 * Create a method level logger from a context logger
	 * @param method Method name
	 * @returns A new logger with the method context
	 */
	forMethod(method: string): Logger {
		return Logger.forContext(this.modulePath, method);
	}

	private _formatMessage(message: string): string {
		return this.context ? `${this.context} ${message}` : message;
	}

	private _formatArgs(args: unknown[]): unknown[] {
		// If the first argument is an object and not an Error, safely stringify it
		if (
			args.length > 0 &&
			typeof args[0] === 'object' &&
			args[0] !== null &&
			!(args[0] instanceof Error)
		) {
			args[0] = safeStringify(args[0]);
		}
		return args;
	}

	_log(
		level: 'info' | 'warn' | 'error' | 'debug',
		message: string,
		...args: unknown[]
	) {
		// Skip debug messages if not enabled for this module
		if (level === 'debug' && !isDebugEnabledForModule(this.modulePath)) {
			return;
		}

		const timestamp = getTimestamp();
		const prefix = `${timestamp} [${level.toUpperCase()}]`;
		let logMessage = `${prefix} ${this._formatMessage(message)}`;

		const formattedArgs = this._formatArgs(args);
		if (formattedArgs.length > 0) {
			// Handle errors specifically
			if (formattedArgs[0] instanceof Error) {
				const error = formattedArgs[0] as Error;
				logMessage += ` Error: ${error.message}`;
				if (error.stack) {
					logMessage += `\n${error.stack}`;
				}
				// If there are more args, add them after the error
				if (formattedArgs.length > 1) {
					logMessage += ` ${formattedArgs
						.slice(1)
						.map((arg) =>
							typeof arg === 'string' ? arg : safeStringify(arg),
						)
						.join(' ')}`;
				}
			} else {
				logMessage += ` ${formattedArgs
					.map((arg) =>
						typeof arg === 'string' ? arg : safeStringify(arg),
					)
					.join(' ')}`;
			}
		}

		// Write to log file
		try {
			fs.appendFileSync(Logger.logFilePath, `${logMessage}\n`, 'utf8');
		} catch (err) {
			// If we can't write to the log file, log the error to console
			console.error(`Failed to write to log file: ${err}`);
		}

		if (process.env.NODE_ENV === 'test') {
			console[level](logMessage);
		} else {
			console.error(logMessage);
		}
	}

	info(message: string, ...args: unknown[]) {
		this._log('info', message, ...args);
	}

	warn(message: string, ...args: unknown[]) {
		this._log('warn', message, ...args);
	}

	error(message: string, ...args: unknown[]) {
		this._log('error', message, ...args);
	}

	debug(message: string, ...args: unknown[]) {
		this._log('debug', message, ...args);
	}

	/**
	 * Log essential information about an API response
	 * @param message Log message
	 * @param response API response object
	 * @param essentialKeys Keys to extract from the response
	 */
	debugResponse(
		message: string,
		response: Record<string, unknown>,
		essentialKeys: string[],
	) {
		const essentialInfo = extractEssentialValues(response, essentialKeys);
		this.debug(message, essentialInfo);
	}

	/**
	 * Get the current session ID
	 * @returns The UUID for the current logging session
	 */
	static getSessionId(): string {
		return Logger.sessionId;
	}

	/**
	 * Get the current log file path
	 * @returns The path to the current log file
	 */
	static getLogFilePath(): string {
		return Logger.logFilePath;
	}
}

// Only export the Logger class to enforce contextual logging via Logger.forContext
export { Logger };
</file>

<file path="src/utils/markdown.util.test.ts">
import { htmlToMarkdown } from './markdown.util.js';

describe('Markdown Utility', () => {
	describe('htmlToMarkdown', () => {
		it('should convert basic HTML to Markdown', () => {
			const html =
				'<h1>Hello World</h1><p>This is a <strong>test</strong>.</p>';
			const expected = '# Hello World\n\nThis is a **test**.';
			expect(htmlToMarkdown(html)).toBe(expected);
		});

		it('should handle empty input', () => {
			expect(htmlToMarkdown('')).toBe('');
			expect(htmlToMarkdown('   ')).toBe('');
		});

		it('should convert links correctly', () => {
			const html =
				'<p>Check out <a href="https://example.com">this link</a>.</p>';
			const expected = 'Check out [this link](https://example.com).';
			expect(htmlToMarkdown(html)).toBe(expected);
		});

		it('should convert lists correctly', () => {
			const html =
				'<ul><li>Item 1</li><li>Item 2</li><li>Item 3</li></ul>';
			const expected = '-   Item 1\n-   Item 2\n-   Item 3';
			expect(htmlToMarkdown(html)).toBe(expected);
		});

		it('should convert tables correctly', () => {
			const html = `
                <table>
                    <thead>
                        <tr>
                            <th>Header 1</th>
                            <th>Header 2</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td>Cell 1</td>
                            <td>Cell 2</td>
                        </tr>
                        <tr>
                            <td>Cell 3</td>
                            <td>Cell 4</td>
                        </tr>
                    </tbody>
                </table>
            `;
			const expected =
				'| Header 1 | Header 2 |\n| --- | --- |\n| Cell 1 | Cell 2 |\n| Cell 3 | Cell 4 |';

			// Normalize whitespace for comparison
			const normalizedResult = htmlToMarkdown(html)
				.replace(/\s+/g, ' ')
				.trim();
			const normalizedExpected = expected.replace(/\s+/g, ' ').trim();

			expect(normalizedResult).toBe(normalizedExpected);
		});

		it('should handle strikethrough text', () => {
			const html = '<p>This is <del>deleted</del> text.</p>';
			const expected = 'This is ~~deleted~~ text.';
			expect(htmlToMarkdown(html)).toBe(expected);
		});
	});
});
</file>

<file path="src/utils/markdown.util.ts">
/**
 * Markdown utility functions for converting HTML to Markdown
 * Uses Turndown library for HTML to Markdown conversion
 *
 * @see https://github.com/mixmark-io/turndown
 */

import TurndownService from 'turndown';
import { Logger } from './logger.util.js';

// Create a file-level logger for the module
const markdownLogger = Logger.forContext('utils/markdown.util.ts');

// DOM type definitions
interface HTMLElement {
	nodeName: string;
	parentNode?: Node;
	childNodes: NodeListOf<Node>;
}

interface Node {
	tagName?: string;
	childNodes: NodeListOf<Node>;
	parentNode?: Node;
}

interface NodeListOf<T> extends Array<T> {
	length: number;
}

// Create a singleton instance of TurndownService with default options
const turndownService = new TurndownService({
	headingStyle: 'atx', // Use # style headings
	bulletListMarker: '-', // Use - for bullet lists
	codeBlockStyle: 'fenced', // Use ``` for code blocks
	emDelimiter: '_', // Use _ for emphasis
	strongDelimiter: '**', // Use ** for strong
	linkStyle: 'inlined', // Use [text](url) for links
	linkReferenceStyle: 'full', // Use [text][id] + [id]: url for reference links
});

// Add custom rule for strikethrough
turndownService.addRule('strikethrough', {
	filter: (node: HTMLElement) => {
		return (
			node.nodeName.toLowerCase() === 'del' ||
			node.nodeName.toLowerCase() === 's' ||
			node.nodeName.toLowerCase() === 'strike'
		);
	},
	replacement: (content: string): string => `~~${content}~~`,
});

// Add custom rule for tables to improve table formatting
turndownService.addRule('tableCell', {
	filter: ['th', 'td'],
	replacement: (content: string, _node: TurndownService.Node): string => {
		return ` ${content} |`;
	},
});

turndownService.addRule('tableRow', {
	filter: 'tr',
	replacement: (content: string, node: TurndownService.Node): string => {
		let output = `|${content}\n`;

		// If this is the first row in a table head, add the header separator row
		if (
			node.parentNode &&
			'tagName' in node.parentNode &&
			node.parentNode.tagName === 'THEAD'
		) {
			const cellCount = node.childNodes.length;
			output += '|' + ' --- |'.repeat(cellCount) + '\n';
		}

		return output;
	},
});

/**
 * Convert HTML content to Markdown
 *
 * @param html - The HTML content to convert
 * @returns The converted Markdown content
 */
export function htmlToMarkdown(html: string): string {
	if (!html || html.trim() === '') {
		return '';
	}

	try {
		const markdown = turndownService.turndown(html);
		return markdown;
	} catch (error) {
		markdownLogger.error('Error converting HTML to Markdown:', error);
		// Return the original HTML if conversion fails
		return html;
	}
}
</file>

<file path="src/utils/pagination.util.ts">
import { Logger } from './logger.util.js';

/**
 * Types of pagination mechanisms used by different Atlassian APIs
 */
export enum PaginationType {
	/**
	 * Offset-based pagination (startAt, maxResults, total)
	 * Used by Jira APIs
	 */
	OFFSET = 'offset',

	/**
	 * Cursor-based pagination (cursor in URL)
	 * Used by Confluence APIs
	 */
	CURSOR = 'cursor',

	/**
	 * Page-based pagination (page parameter in URL)
	 * Used by Bitbucket APIs
	 */
	PAGE = 'page',
}

/**
 * Structure for offset-based pagination data
 */
export interface OffsetPaginationData {
	startAt?: number;
	maxResults?: number;
	total?: number;
	nextPage?: string;
	values?: unknown[];
}

/**
 * Structure for cursor-based pagination data (Confluence)
 */
export interface CursorPaginationData {
	_links: {
		next?: string;
	};
	results?: unknown[];
}

/**
 * Structure for page-based pagination data (Bitbucket)
 */
export interface PagePaginationData {
	next?: string;
	values?: unknown[];
}

/**
 * Union type for all pagination data types
 */
export type PaginationData =
	| OffsetPaginationData
	| CursorPaginationData
	| PagePaginationData;

/**
 * Extract pagination information from API response
 * @param data The API response containing pagination information
 * @param paginationType The type of pagination mechanism used
 * @returns Object with nextCursor, hasMore, and count properties
 */
export function extractPaginationInfo(
	data: PaginationData,
	paginationType: PaginationType,
): { nextCursor?: string; hasMore: boolean; count?: number } {
	const methodLogger = Logger.forContext(
		'utils/pagination.util.ts',
		'extractPaginationInfo',
	);

	let nextCursor: string | undefined;
	let count: number | undefined;

	try {
		// Extract count from the appropriate data field based on pagination type
		switch (paginationType) {
			case PaginationType.OFFSET: {
				const offsetData = data as OffsetPaginationData;
				count = offsetData.values?.length;

				// Handle Jira's offset-based pagination
				if (
					offsetData.startAt !== undefined &&
					offsetData.maxResults !== undefined &&
					offsetData.total !== undefined &&
					offsetData.startAt + offsetData.maxResults <
						offsetData.total
				) {
					nextCursor = String(
						offsetData.startAt + offsetData.maxResults,
					);
				} else if (offsetData.nextPage) {
					nextCursor = offsetData.nextPage;
				}
				break;
			}

			case PaginationType.CURSOR: {
				const cursorData = data as CursorPaginationData;
				count = cursorData.results?.length;

				// Handle Confluence's cursor-based pagination
				if (cursorData._links && cursorData._links.next) {
					const nextUrl = cursorData._links.next;
					const cursorMatch = nextUrl.match(/cursor=([^&]+)/);
					if (cursorMatch && cursorMatch[1]) {
						nextCursor = decodeURIComponent(cursorMatch[1]);
					}
				}
				break;
			}

			case PaginationType.PAGE: {
				const pageData = data as PagePaginationData;
				count = pageData.values?.length;

				// Handle Bitbucket's page-based pagination
				if (pageData.next) {
					try {
						const nextUrl = new URL(pageData.next);
						const nextPage = nextUrl.searchParams.get('page');
						if (nextPage) {
							nextCursor = nextPage;
						}
					} catch (error) {
						methodLogger.warn(
							`Failed to parse next URL: ${pageData.next}`,
							{ error },
						);
					}
				}
				break;
			}

			default:
				methodLogger.warn(`Unknown pagination type: ${paginationType}`);
		}

		if (nextCursor) {
			methodLogger.debug(`Next cursor: ${nextCursor}`);
		}

		if (count !== undefined) {
			methodLogger.debug(`Count: ${count}`);
		}

		return {
			nextCursor,
			hasMore: !!nextCursor,
			count,
		};
	} catch (error) {
		methodLogger.warn(
			`Error extracting pagination information: ${error instanceof Error ? error.message : String(error)}`,
		);
		return { hasMore: false };
	}
}
</file>

<file path="src/utils/query.util.ts">
/**
 * Utilities for formatting and handling query parameters for the Bitbucket API.
 * These functions help convert user-friendly query strings into the format expected by Bitbucket's REST API.
 */

/**
 * Format a simple text query into Bitbucket's query syntax
 * Bitbucket API expects query parameters in a specific format for the 'q' parameter
 *
 * @param query - The search query string
 * @param field - Optional field to search in, defaults to 'name'
 * @returns Formatted query string for Bitbucket API
 *
 * @example
 * // Simple text search (returns: name ~ "vue3")
 * formatBitbucketQuery("vue3")
 *
 * @example
 * // Already formatted query (returns unchanged: name = "repository")
 * formatBitbucketQuery("name = \"repository\"")
 *
 * @example
 * // With specific field (returns: description ~ "API")
 * formatBitbucketQuery("API", "description")
 */
export function formatBitbucketQuery(
	query: string,
	field: string = 'name',
): string {
	// If the query is empty, return it as is
	if (!query || query.trim() === '') {
		return query;
	}

	// Regular expression to check if the query already contains operators
	// like ~, =, !=, >, <, etc., which would indicate it's already formatted
	const operatorPattern = /[~=!<>]/;

	// If the query already contains operators, assume it's properly formatted
	if (operatorPattern.test(query)) {
		return query;
	}

	// If query is quoted, assume it's an exact match
	if (query.startsWith('"') && query.endsWith('"')) {
		return `${field} ~ ${query}`;
	}

	// Format simple text as a field search with fuzzy match
	// Wrap in double quotes to handle spaces and special characters
	return `${field} ~ "${query}"`;
}
</file>

<file path="src/utils/transport.util.test.ts">
import { getAtlassianCredentials, fetchAtlassian } from './transport.util.js';
import { Logger } from './logger.util.js';
import { config } from './config.util.js';

/**
 * Generic response type for testing
 */
interface TestResponse {
	values: Array<Record<string, unknown>>;
	next?: string;
	total?: number;
}

// Mock the logger module only to prevent console output during tests
jest.mock('./logger.util.js', () => {
	const mockLoggerInstance = {
		debug: jest.fn(),
		info: jest.fn(),
		warn: jest.fn(),
		error: jest.fn(),
	};

	return {
		Logger: {
			forContext: jest.fn().mockReturnValue(mockLoggerInstance),
		},
		// Export only Logger, not the legacy logger
	};
});

// NOTE: We are no longer mocking fetch, using real API calls instead

describe('Transport Utility', () => {
	// Load configuration before all tests
	beforeAll(() => {
		// Load configuration from all sources
		config.load();
	});

	describe('getAtlassianCredentials', () => {
		it('should return credentials when environment variables are set', () => {
			// This test will be skipped if credentials are not available
			const credentials = getAtlassianCredentials();
			if (!credentials) {
				console.warn(
					'Skipping test: No Atlassian credentials available',
				);
				return;
			}

			// Check if the credentials are for standard Atlassian or Bitbucket-specific
			if (credentials.useBitbucketAuth) {
				// Verify the Bitbucket-specific credentials
				expect(credentials).toHaveProperty('bitbucketUsername');
				expect(credentials).toHaveProperty('bitbucketAppPassword');
				expect(credentials).toHaveProperty('useBitbucketAuth');

				// Verify the credentials are not empty
				expect(credentials.bitbucketUsername).toBeTruthy();
				expect(credentials.bitbucketAppPassword).toBeTruthy();
				expect(credentials.useBitbucketAuth).toBe(true);
			} else {
				// Verify the standard Atlassian credentials
				expect(credentials).toHaveProperty('siteName');
				expect(credentials).toHaveProperty('userEmail');
				expect(credentials).toHaveProperty('apiToken');

				// Verify the credentials are not empty
				expect(credentials.siteName).toBeTruthy();
				expect(credentials.userEmail).toBeTruthy();
				expect(credentials.apiToken).toBeTruthy();
			}
		});

		it('should return null and log a warning when environment variables are missing', () => {
			// Temporarily override the config.get function
			const originalGet = config.get;
			config.get = jest.fn().mockReturnValue(undefined);

			// Call the function
			const credentials = getAtlassianCredentials();

			// Verify the result is null
			expect(credentials).toBeNull();

			// Get the mock instance returned from forContext
			const transportLogger = (Logger.forContext as jest.Mock).mock
				.results[0].value;

			// Verify that a warning was logged with the updated message
			expect(transportLogger.warn).toHaveBeenCalledWith(
				'Missing Atlassian credentials. Please set either ATLASSIAN_SITE_NAME, ATLASSIAN_USER_EMAIL, and ATLASSIAN_API_TOKEN environment variables, or ATLASSIAN_BITBUCKET_USERNAME and ATLASSIAN_BITBUCKET_APP_PASSWORD for Bitbucket-specific auth.',
			);

			// Restore the original function
			config.get = originalGet;
		});
	});

	describe('fetchAtlassian', () => {
		it('should successfully fetch data from the Atlassian API', async () => {
			// This test will be skipped if credentials are not available
			const credentials = getAtlassianCredentials();
			if (!credentials) {
				console.warn(
					'Skipping test: No Atlassian credentials available',
				);
				return;
			}

			// Make a call to a real API endpoint
			// For Bitbucket, we'll use the workspaces endpoint
			const result = await fetchAtlassian<TestResponse>(
				credentials,
				'/2.0/workspaces',
				{
					method: 'GET',
					headers: {
						'Content-Type': 'application/json',
					},
				},
			);

			// Verify the response structure from real API
			expect(result).toHaveProperty('values');
			expect(Array.isArray(result.values)).toBe(true);
			// Different property names than mocked data to match actual API response
			if (result.values.length > 0) {
				// Verify an actual workspace result
				const workspace = result.values[0];
				expect(workspace).toHaveProperty('uuid');
				expect(workspace).toHaveProperty('name');
				expect(workspace).toHaveProperty('slug');
			}
		}, 15000); // Increased timeout for real API call

		it('should handle API errors correctly', async () => {
			// This test will be skipped if credentials are not available
			const credentials = getAtlassianCredentials();
			if (!credentials) {
				console.warn(
					'Skipping test: No Atlassian credentials available',
				);
				return;
			}

			// Call a non-existent endpoint and expect it to throw
			await expect(
				fetchAtlassian(credentials, '/2.0/non-existent-endpoint'),
			).rejects.toThrow();
		}, 15000); // Increased timeout for real API call

		it('should normalize paths that do not start with a slash', async () => {
			// This test will be skipped if credentials are not available
			const credentials = getAtlassianCredentials();
			if (!credentials) {
				console.warn(
					'Skipping test: No Atlassian credentials available',
				);
				return;
			}

			// Call the function with a path that doesn't start with a slash
			const result = await fetchAtlassian<TestResponse>(
				credentials,
				'2.0/workspaces',
				{
					method: 'GET',
				},
			);

			// Verify the response structure from real API
			expect(result).toHaveProperty('values');
			expect(Array.isArray(result.values)).toBe(true);
		}, 15000); // Increased timeout for real API call

		it('should support custom request options', async () => {
			// This test will be skipped if credentials are not available
			const credentials = getAtlassianCredentials();
			if (!credentials) {
				console.warn(
					'Skipping test: No Atlassian credentials available',
				);
				return;
			}

			// Custom request options with pagination
			const options = {
				method: 'GET' as const,
				headers: {
					Accept: 'application/json',
					'Content-Type': 'application/json',
				},
			};

			// Call a real endpoint with pagination parameter
			const result = await fetchAtlassian<TestResponse>(
				credentials,
				'/2.0/workspaces?pagelen=1',
				options,
			);

			// Verify the response structure from real API
			expect(result).toHaveProperty('values');
			expect(Array.isArray(result.values)).toBe(true);
			expect(result.values.length).toBeLessThanOrEqual(1); // Should respect pagelen=1
		}, 15000); // Increased timeout for real API call
	});
});
</file>

<file path="src/utils/transport.util.ts">
import { Logger } from './logger.util.js';
import { config } from './config.util.js';
import {
	createAuthInvalidError,
	createApiError,
	createUnexpectedError,
	McpError,
} from './error.util.js';

/**
 * Interface for Atlassian API credentials
 */
export interface AtlassianCredentials {
	// Standard Atlassian credentials
	siteName?: string;
	userEmail?: string;
	apiToken?: string;
	// Bitbucket-specific credentials (alternative approach)
	bitbucketUsername?: string;
	bitbucketAppPassword?: string;
	// Indicates which auth method to use
	useBitbucketAuth?: boolean;
}

/**
 * Interface for HTTP request options
 */
export interface RequestOptions {
	method?: 'GET' | 'POST' | 'PUT' | 'DELETE';
	headers?: Record<string, string>;
	body?: unknown;
}

// Create a contextualized logger for this file
const transportLogger = Logger.forContext('utils/transport.util.ts');

// Log transport utility initialization
transportLogger.debug('Transport utility initialized');

/**
 * Get Atlassian credentials from environment variables
 * @returns AtlassianCredentials object or null if credentials are missing
 */
export function getAtlassianCredentials(): AtlassianCredentials | null {
	const methodLogger = Logger.forContext(
		'utils/transport.util.ts',
		'getAtlassianCredentials',
	);

	// First try standard Atlassian credentials (preferred for consistency)
	const siteName = config.get('ATLASSIAN_SITE_NAME');
	const userEmail = config.get('ATLASSIAN_USER_EMAIL');
	const apiToken = config.get('ATLASSIAN_API_TOKEN');

	// If standard credentials are available, use them
	if (siteName && userEmail && apiToken) {
		methodLogger.debug('Using standard Atlassian credentials');
		return {
			siteName,
			userEmail,
			apiToken,
			useBitbucketAuth: false,
		};
	}

	// If standard credentials are not available, try Bitbucket-specific credentials
	const bitbucketUsername = config.get('ATLASSIAN_BITBUCKET_USERNAME');
	const bitbucketAppPassword = config.get('ATLASSIAN_BITBUCKET_APP_PASSWORD');

	if (bitbucketUsername && bitbucketAppPassword) {
		methodLogger.debug('Using Bitbucket-specific credentials');
		return {
			bitbucketUsername,
			bitbucketAppPassword,
			useBitbucketAuth: true,
		};
	}

	// If neither set of credentials is available, return null
	methodLogger.warn(
		'Missing Atlassian credentials. Please set either ATLASSIAN_SITE_NAME, ATLASSIAN_USER_EMAIL, and ATLASSIAN_API_TOKEN environment variables, or ATLASSIAN_BITBUCKET_USERNAME and ATLASSIAN_BITBUCKET_APP_PASSWORD for Bitbucket-specific auth.',
	);
	return null;
}

/**
 * Fetch data from Atlassian API
 * @param credentials Atlassian API credentials
 * @param path API endpoint path (without base URL)
 * @param options Request options
 * @returns Response data
 */
export async function fetchAtlassian<T>(
	credentials: AtlassianCredentials,
	path: string,
	options: RequestOptions = {},
): Promise<T> {
	const methodLogger = Logger.forContext(
		'utils/transport.util.ts',
		'fetchAtlassian',
	);

	// Set up base URL and auth headers based on credential type
	let baseUrl: string;
	let authHeader: string;

	if (credentials.useBitbucketAuth) {
		// Bitbucket API uses a different base URL and auth format
		baseUrl = 'https://api.bitbucket.org';
		if (
			!credentials.bitbucketUsername ||
			!credentials.bitbucketAppPassword
		) {
			throw createAuthInvalidError(
				'Missing Bitbucket username or app password',
			);
		}
		authHeader = `Basic ${Buffer.from(
			`${credentials.bitbucketUsername}:${credentials.bitbucketAppPassword}`,
		).toString('base64')}`;
	} else {
		// Standard Atlassian API (Jira, Confluence)
		if (
			!credentials.siteName ||
			!credentials.userEmail ||
			!credentials.apiToken
		) {
			throw createAuthInvalidError('Missing Atlassian credentials');
		}
		baseUrl = `https://${credentials.siteName}.atlassian.net`;
		authHeader = `Basic ${Buffer.from(
			`${credentials.userEmail}:${credentials.apiToken}`,
		).toString('base64')}`;
	}

	// Ensure path starts with a slash
	const normalizedPath = path.startsWith('/') ? path : `/${path}`;

	// Construct the full URL
	const url = `${baseUrl}${normalizedPath}`;

	// Set up authentication and headers
	const headers = {
		Authorization: authHeader,
		'Content-Type': 'application/json',
		Accept: 'application/json',
		...options.headers,
	};

	// Prepare request options
	const requestOptions: RequestInit = {
		method: options.method || 'GET',
		headers,
		body: options.body ? JSON.stringify(options.body) : undefined,
	};

	methodLogger.debug(`Calling Atlassian API: ${url}`);

	try {
		const response = await fetch(url, requestOptions);

		// Log the raw response status and headers
		methodLogger.debug(
			`Raw response received: ${response.status} ${response.statusText}`,
			{
				url,
				status: response.status,
				statusText: response.statusText,
				headers: Object.fromEntries(response.headers.entries()),
			},
		);

		if (!response.ok) {
			const errorText = await response.text();
			methodLogger.error(
				`API error: ${response.status} ${response.statusText}`,
				errorText,
			);

			// Try to parse the error response
			let errorMessage = `${response.status} ${response.statusText}`;
			let parsedError = null;

			try {
				if (
					errorText &&
					(errorText.startsWith('{') || errorText.startsWith('['))
				) {
					parsedError = JSON.parse(errorText);

					// Extract specific error details from various Atlassian API response formats
					if (
						parsedError.errors &&
						Array.isArray(parsedError.errors) &&
						parsedError.errors.length > 0
					) {
						// Format: {"errors":[{"status":400,"code":"INVALID_REQUEST_PARAMETER","title":"..."}]}
						const atlassianError = parsedError.errors[0];
						if (atlassianError.title) {
							errorMessage = atlassianError.title;
						}
					} else if (parsedError.message) {
						// Format: {"message":"Some error message"}
						errorMessage = parsedError.message;
					} else if (parsedError.error && parsedError.error.message) {
						// Bitbucket specific format: {"error": {"message": "..."}}
						errorMessage = parsedError.error.message;
					}
				}
			} catch (parseError) {
				methodLogger.debug(`Error parsing error response:`, parseError);
				// Fall back to the default error message
			}

			// Classify HTTP errors based on status code
			if (response.status === 401 || response.status === 403) {
				throw createAuthInvalidError('Invalid Atlassian credentials');
			} else if (response.status === 404) {
				throw createApiError(`Resource not found`, 404, errorText);
			} else {
				// For other API errors, preserve the original error message from Atlassian API
				throw createApiError(errorMessage, response.status, errorText);
			}
		}

		// Check if the response is expected to be plain text
		const contentType = response.headers.get('content-type') || '';
		if (contentType.includes('text/plain')) {
			// If we're expecting text (like a diff), return the raw text
			const textResponse = await response.text();
			methodLogger.debug(
				`Text response received (truncated)`,
				textResponse.substring(0, 200) + '...',
			);
			return textResponse as unknown as T;
		}

		// For JSON responses, proceed as before
		// Clone the response to log its content without consuming it
		const clonedResponse = response.clone();
		try {
			const responseJson = await clonedResponse.json();
			methodLogger.debug(`Response body:`, responseJson);
		} catch {
			methodLogger.debug(
				`Could not parse response as JSON, returning raw content`,
			);
		}

		return response.json() as Promise<T>;
	} catch (error) {
		methodLogger.error(`Request failed`, error);

		// If it's already an McpError, just rethrow it
		if (error instanceof McpError) {
			throw error;
		}

		// Handle network or parsing errors
		if (error instanceof TypeError || error instanceof SyntaxError) {
			throw createApiError(
				`Network or parsing error: ${error instanceof Error ? error.message : String(error)}`,
				500,
				error,
			);
		}

		throw createUnexpectedError(
			`Unexpected error while calling Atlassian API: ${error instanceof Error ? error.message : String(error)}`,
			error,
		);
	}
}
</file>

<file path="src/index.ts">
#!/usr/bin/env node
import { McpServer } from '@modelcontextprotocol/sdk/server/mcp.js';
import { SSEServerTransport } from '@modelcontextprotocol/sdk/server/sse.js';
import { StdioServerTransport } from '@modelcontextprotocol/sdk/server/stdio.js';
import { Logger } from './utils/logger.util.js';
import { config } from './utils/config.util.js';
import { createUnexpectedError } from './utils/error.util.js';
import { VERSION, PACKAGE_NAME } from './utils/constants.util.js';
import { runCli } from './cli/index.js';

// Import Bitbucket-specific tools
import atlassianWorkspacesTools from './tools/atlassian.workspaces.tool.js';
import atlassianRepositoriesTools from './tools/atlassian.repositories.tool.js';
import atlassianPullRequestsTools from './tools/atlassian.pullrequests.tool.js';
import atlassianSearchTools from './tools/atlassian.search.tool.js';

// Create a contextualized logger for this file
const indexLogger = Logger.forContext('index.ts');

// Log initialization at debug level
indexLogger.debug('Bitbucket MCP server module loaded');

let serverInstance: McpServer | null = null;
let transportInstance: SSEServerTransport | StdioServerTransport | null = null;

/**
 * Start the MCP server with the specified transport mode
 *
 * @param mode The transport mode to use (stdio or sse)
 * @returns Promise that resolves to the server instance when started successfully
 */
export async function startServer(mode: 'stdio' | 'sse' = 'stdio') {
	// Create method-level logger with more specific context
	const serverLogger = Logger.forContext('index.ts', 'startServer');

	// Load configuration
	serverLogger.info('Starting MCP server initialization...');
	config.load();
	serverLogger.info('Configuration loaded successfully');

	// Enable debug logging if DEBUG is set to true
	if (config.getBoolean('DEBUG')) {
		serverLogger.debug('Debug mode enabled');
	}

	// Log debug configuration settings at debug level
	serverLogger.debug(`DEBUG environment variable: ${process.env.DEBUG}`);
	serverLogger.debug(
		`ATLASSIAN_API_TOKEN exists: ${Boolean(process.env.ATLASSIAN_API_TOKEN)}`,
	);
	serverLogger.debug(`Config DEBUG value: ${config.get('DEBUG')}`);

	serverLogger.info(`Initializing Bitbucket MCP server v${VERSION}`);
	serverInstance = new McpServer({
		name: PACKAGE_NAME,
		version: VERSION,
	});

	if (mode === 'stdio') {
		serverLogger.info('Using STDIO transport for MCP communication');
		transportInstance = new StdioServerTransport();
	} else {
		throw createUnexpectedError('SSE mode is not supported yet');
	}

	// Register tools
	serverLogger.info('Registering MCP tools...');

	atlassianWorkspacesTools.registerTools(serverInstance);
	serverLogger.debug('Registered Workspaces tools');

	atlassianRepositoriesTools.registerTools(serverInstance);
	serverLogger.debug('Registered Repositories tools');

	atlassianPullRequestsTools.registerTools(serverInstance);
	serverLogger.debug('Registered Pull requests tools');

	atlassianSearchTools.registerTools(serverInstance);
	serverLogger.debug('Registered Search tools');

	serverLogger.info('All tools registered successfully');

	try {
		serverLogger.info(`Connecting to ${mode.toUpperCase()} transport...`);
		await serverInstance.connect(transportInstance);
		serverLogger.info(
			'MCP server started successfully and ready to process requests',
		);
		return serverInstance;
	} catch (err) {
		serverLogger.error(`Failed to start server`, err);
		process.exit(1);
	}
}

/**
 * Main entry point - this will run when executed directly
 * Determines whether to run in CLI or server mode based on command-line arguments
 */
async function main() {
	// Create method-level logger with more specific context
	const mainLogger = Logger.forContext('index.ts', 'main');

	// Load configuration
	config.load();

	// Check if arguments are provided (CLI mode)
	if (process.argv.length > 2) {
		// CLI mode: Pass arguments to CLI runner
		mainLogger.info('Starting in CLI mode');
		await runCli(process.argv.slice(2));
		mainLogger.info('CLI execution completed');
	} else {
		// MCP Server mode: Start server with default STDIO
		mainLogger.info('Starting in server mode');
		await startServer();
		mainLogger.info('Server is now running');
	}
}

// If this file is being executed directly (not imported), run the main function
if (require.main === module) {
	main().catch((err) => {
		indexLogger.error('Unhandled error in main process', err);
		process.exit(1);
	});
}

// Export key utilities for library users
export { Logger, config };
export * from './utils/error.util.js';
export { VERSION, PACKAGE_NAME, CLI_NAME } from './utils/constants.util.js';
</file>

<file path=".env.example">
# Enable debug logging
DEBUG=false

# Atlassian Configuration
ATLASSIAN_SITE_NAME=your-instance
ATLASSIAN_USER_EMAIL=your-email@example.com
ATLASSIAN_API_TOKEN=
</file>

<file path=".gitignore">
# Dependency directories
node_modules/
.npm

# TypeScript output
dist/
build/
*.tsbuildinfo

# Coverage directories
coverage/
.nyc_output/

# Environment variables
.env
.env.local
.env.*.local

# Log files
logs/
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# IDE files
.idea/
.vscode/
*.sublime-project
*.sublime-workspace
.project
.classpath
.settings/
.DS_Store

# Temp directories
.tmp/
temp/

# Backup files
*.bak

# Editor directories and files
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?

# macOS
.DS_Store

# Misc
.yarn-integrity
</file>

<file path=".node-version">
22.14.0
</file>

<file path=".npmignore">
# Source code
src/
*.ts
!*.d.ts

# Tests
*.test.ts
*.test.js
__tests__/
coverage/
jest.config.js

# Development files
.github/
.git/
.gitignore
.eslintrc
.eslintrc.js
.eslintignore
.prettierrc
.prettierrc.js
tsconfig.json
*.tsbuildinfo

# Editor directories
.idea/
.vscode/
*.swp
*.swo

# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# CI/CD
.travis.yml

# Runtime data
.env
.env.*
</file>

<file path=".npmrc">
# This file is for local development only
# The CI/CD workflow will create its own .npmrc files

# For npm registry
registry=https://registry.npmjs.org/

# GitHub Packages configuration removed
</file>

<file path=".prettierrc">
{
  "singleQuote": true,
  "semi": true,
  "useTabs": true,
  "tabWidth": 4,
  "printWidth": 80,
  "trailingComma": "all"
}
</file>

<file path=".releaserc.json">
{
	"branches": ["main"],
	"plugins": [
		"@semantic-release/commit-analyzer",
		"@semantic-release/release-notes-generator",
		"@semantic-release/changelog",
		[
			"@semantic-release/exec",
			{
				"prepareCmd": "node scripts/update-version.js ${nextRelease.version} && npm run build && chmod +x dist/index.js"
			}
		],
		[
			"@semantic-release/npm",
			{
				"npmPublish": true,
				"pkgRoot": "."
			}
		],
		[
			"@semantic-release/git",
			{
				"assets": [
					"package.json",
					"CHANGELOG.md",
					"src/index.ts",
					"src/cli/index.ts"
				],
				"message": "chore(release): ${nextRelease.version} [skip ci]\n\n${nextRelease.notes}"
			}
		],
		"@semantic-release/github"
	]
}
</file>

<file path="CHANGELOG.md">
## [1.15.3](https://github.com/aashari/mcp-server-atlassian-bitbucket/compare/v1.15.2...v1.15.3) (2025-04-22)


### Performance Improvements

* Update dependencies ([fae420e](https://github.com/aashari/mcp-server-atlassian-bitbucket/commit/fae420ee00d9dd5c71dfce18610e33e8d8857403))

## [1.15.2](https://github.com/aashari/mcp-server-atlassian-bitbucket/compare/v1.15.1...v1.15.2) (2025-04-20)


### Bug Fixes

* Update dependencies and fix related type errors ([4acea85](https://github.com/aashari/mcp-server-atlassian-bitbucket/commit/4acea85c681dce9af6f23f751384c4aae08480b7))

## [1.15.1](https://github.com/aashari/mcp-server-atlassian-bitbucket/compare/v1.15.0...v1.15.1) (2025-04-09)


### Bug Fixes

* **deps:** update dependencies to latest versions ([68c2f39](https://github.com/aashari/mcp-server-atlassian-bitbucket/commit/68c2f390499b7694da6771963f856cefa0b812d6))

# [1.15.0](https://github.com/aashari/mcp-server-atlassian-bitbucket/compare/v1.14.2...v1.15.0) (2025-04-04)


### Bug Fixes

* improve README clarity and accuracy ([c09711f](https://github.com/aashari/mcp-server-atlassian-bitbucket/commit/c09711fc86dd29f6018907660b891e322bf089b2))


### Features

* **pullrequests:** add code diff and diffstat display to pull request details ([ed2fd3a](https://github.com/aashari/mcp-server-atlassian-bitbucket/commit/ed2fd3a2483117989701bc37b14f8aeed1233e2b))

## [1.14.2](https://github.com/aashari/mcp-server-atlassian-bitbucket/compare/v1.14.1...v1.14.2) (2025-04-04)


### Bug Fixes

* add remaining search functionality improvements ([163d38f](https://github.com/aashari/mcp-server-atlassian-bitbucket/commit/163d38fb5d18f3b2b7dc47cee778c48be61a23c4))
* improve search results consistency across all search types ([d5f8313](https://github.com/aashari/mcp-server-atlassian-bitbucket/commit/d5f8313df4f04287d5c97824a3db98202e428f7d))
* standardize tool registration function names to registerTools ([4f4b7c6](https://github.com/aashari/mcp-server-atlassian-bitbucket/commit/4f4b7c6dce51b750048465526f0033239af54921))

## [1.14.1](https://github.com/aashari/mcp-server-atlassian-bitbucket/compare/v1.14.0...v1.14.1) (2025-04-03)


### Performance Improvements

* trigger new release ([9c3cd52](https://github.com/aashari/mcp-server-atlassian-bitbucket/commit/9c3cd52bf4ba820df9bb0a9f5a3b7ea6d6f90c99))

# [1.14.0](https://github.com/aashari/mcp-server-atlassian-bitbucket/compare/v1.13.3...v1.14.0) (2025-04-03)


### Features

* **logging:** add file logging with session ID to ~/.mcp/data/ ([8e2eae1](https://github.com/aashari/mcp-server-atlassian-bitbucket/commit/8e2eae16cdf78579bf7925704fb958a0a97411b7))

## [1.13.3](https://github.com/aashari/mcp-server-atlassian-bitbucket/compare/v1.13.2...v1.13.3) (2025-04-03)


### Bug Fixes

* **logger:** ensure consistent logger implementation across all projects ([30f96e9](https://github.com/aashari/mcp-server-atlassian-bitbucket/commit/30f96e96eb7576cfdac904534210915c40286aa3))

## [1.13.2](https://github.com/aashari/mcp-server-atlassian-bitbucket/compare/v1.13.1...v1.13.2) (2025-04-03)


### Performance Improvements

* **bitbucket:** improve version handling and module exports ([76f9820](https://github.com/aashari/mcp-server-atlassian-bitbucket/commit/76f982098774f8dd22d4694c683fdd485c38112d))

## [1.13.1](https://github.com/aashari/mcp-server-atlassian-bitbucket/compare/v1.13.0...v1.13.1) (2025-04-03)


### Bug Fixes

* update PR tool argument types for Windsurf wave 6 compatibility ([51b3824](https://github.com/aashari/mcp-server-atlassian-bitbucket/commit/51b38242cb553f77b73d025280db9cceaa2365d5)), closes [#7](https://github.com/aashari/mcp-server-atlassian-bitbucket/issues/7)

# [1.13.0](https://github.com/aashari/mcp-server-atlassian-bitbucket/compare/v1.12.0...v1.13.0) (2025-04-01)


### Bug Fixes

* **cli:** rename create-pr to create-pull-request and update parameter names for consistency ([6e4dbb2](https://github.com/aashari/mcp-server-atlassian-bitbucket/commit/6e4dbb2112368544cdbf567561ef800575e91536))


### Features

* **pullrequests:** add create pull request feature to CLI and MCP tools ([73400af](https://github.com/aashari/mcp-server-atlassian-bitbucket/commit/73400af266fd787b8b216bcb3ec5058b1fa99ff9)), closes [#3](https://github.com/aashari/mcp-server-atlassian-bitbucket/issues/3)

# [1.12.0](https://github.com/aashari/mcp-server-atlassian-bitbucket/compare/v1.11.1...v1.12.0) (2025-04-01)


### Bug Fixes

* **build:** remove unused skipIfNoCredentials function ([9173010](https://github.com/aashari/mcp-server-atlassian-bitbucket/commit/91730106c1a21f33879130ffb20b24d9d3731e78))
* **pr:** fix double JSON.stringify in PR comment API call ([a445dc7](https://github.com/aashari/mcp-server-atlassian-bitbucket/commit/a445dc7db71bcc6fd73f2b3bf6312686b9424ce1))


### Features

* **pr:** add CLI command and tests for PR comments ([d6d3dc2](https://github.com/aashari/mcp-server-atlassian-bitbucket/commit/d6d3dc20e3722b22f694e50e7b80542ba951ea54))

## [1.11.1](https://github.com/aashari/mcp-server-atlassian-bitbucket/compare/v1.11.0...v1.11.1) (2025-03-29)


### Bug Fixes

* conflict ([e947249](https://github.com/aashari/mcp-server-atlassian-bitbucket/commit/e9472496062a64bd9766c3ba8b61944076d16883))

# [1.11.0](https://github.com/aashari/mcp-server-atlassian-bitbucket/compare/v1.10.1...v1.11.0) (2025-03-28)


### Bug Fixes

* **cli:** standardize CLI parameter naming conventions ([fe16246](https://github.com/aashari/mcp-server-atlassian-bitbucket/commit/fe16246a550674470ce8b03441809e07c0c7016b))
* resolve TypeScript errors and lint warnings in Bitbucket MCP server ([29446b9](https://github.com/aashari/mcp-server-atlassian-bitbucket/commit/29446b95151e3462f2bef3cd1f772e9726c97a29))
* standardize status parameter and workspace identifiers ([c11b2bf](https://github.com/aashari/mcp-server-atlassian-bitbucket/commit/c11b2bf5b6cf7f4e3b0eae189c17f300d64c5534))
* **test:** improve Bitbucket workspaces integration tests with better error handling and reliability ([284447f](https://github.com/aashari/mcp-server-atlassian-bitbucket/commit/284447f0897c9e53c271777d2f81178a65e32ca9))
* **tests:** improve test resiliency for CLI commands ([7f690ba](https://github.com/aashari/mcp-server-atlassian-bitbucket/commit/7f690ba4f3c42fb2f8bce6cf279ccfb5dc419a74))


### Features

* standardize CLI flag patterns and entity parameter naming ([7b4d719](https://github.com/aashari/mcp-server-atlassian-bitbucket/commit/7b4d71948d3bf6a4b2cf8659e42b02e57b92f451))
* **test:** add comprehensive test coverage for Bitbucket MCP server ([b69fa8f](https://github.com/aashari/mcp-server-atlassian-bitbucket/commit/b69fa8f171efbe713f42e9cfde013a83898419dd))

## [1.10.1](https://github.com/aashari/mcp-server-atlassian-bitbucket/compare/v1.10.0...v1.10.1) (2025-03-28)


### Performance Improvements

* rename tools to use underscore instead of hyphen ([bc1f65e](https://github.com/aashari/mcp-server-atlassian-bitbucket/commit/bc1f65e7d76d3c13f4fd96cde115c441c7d6212f))

# [1.10.0](https://github.com/aashari/mcp-server-atlassian-bitbucket/compare/v1.9.1...v1.10.0) (2025-03-27)


### Bug Fixes

* remove sort option from Bitbucket workspaces endpoints, API does not support sorting ([e6ccd9b](https://github.com/aashari/mcp-server-atlassian-bitbucket/commit/e6ccd9b7e78d6316dbbfa7def756b6897550ff29))
* standardize patterns across MCP server projects ([78ca874](https://github.com/aashari/mcp-server-atlassian-bitbucket/commit/78ca8748ba2b639e52e13bfc361c91d9573e1340))
* trigger new release ([63b2025](https://github.com/aashari/mcp-server-atlassian-bitbucket/commit/63b2025127c509e7db2d82945717b49ea223d77d))
* update applyDefaults utility to work with TypeScript interfaces ([2f682ca](https://github.com/aashari/mcp-server-atlassian-bitbucket/commit/2f682cacef284ebeb9d2f40577209bf6b45ad1d9))
* update version to 1.10.0 to fix CI/CD workflows ([938f481](https://github.com/aashari/mcp-server-atlassian-bitbucket/commit/938f48109fc1a93c7375495d08598dca044a2235))


### Features

* update to version 1.11.0 with new repository command documentation ([0a714df](https://github.com/aashari/mcp-server-atlassian-bitbucket/commit/0a714df36671f1a9bd94c90cab9d462cb90105ec))

## [1.9.2](https://github.com/aashari/mcp-server-atlassian-bitbucket/compare/v1.9.1...v1.9.2) (2025-03-27)


### Bug Fixes

* remove sort option from Bitbucket workspaces endpoints, API does not support sorting ([e6ccd9b](https://github.com/aashari/mcp-server-atlassian-bitbucket/commit/e6ccd9b7e78d6316dbbfa7def756b6897550ff29))
* standardize patterns across MCP server projects ([78ca874](https://github.com/aashari/mcp-server-atlassian-bitbucket/commit/78ca8748ba2b639e52e13bfc361c91d9573e1340))
* trigger new release ([63b2025](https://github.com/aashari/mcp-server-atlassian-bitbucket/commit/63b2025127c509e7db2d82945717b49ea223d77d))
* update applyDefaults utility to work with TypeScript interfaces ([2f682ca](https://github.com/aashari/mcp-server-atlassian-bitbucket/commit/2f682cacef284ebeb9d2f40577209bf6b45ad1d9))
* update version to 1.10.0 to fix CI/CD workflows ([938f481](https://github.com/aashari/mcp-server-atlassian-bitbucket/commit/938f48109fc1a93c7375495d08598dca044a2235))

## [1.9.2](https://github.com/aashari/mcp-server-atlassian-bitbucket/compare/v1.9.1...v1.9.2) (2025-03-27)


### Bug Fixes

* remove sort option from Bitbucket workspaces endpoints, API does not support sorting ([e6ccd9b](https://github.com/aashari/mcp-server-atlassian-bitbucket/commit/e6ccd9b7e78d6316dbbfa7def756b6897550ff29))
* standardize patterns across MCP server projects ([78ca874](https://github.com/aashari/mcp-server-atlassian-bitbucket/commit/78ca8748ba2b639e52e13bfc361c91d9573e1340))
* trigger new release ([63b2025](https://github.com/aashari/mcp-server-atlassian-bitbucket/commit/63b2025127c509e7db2d82945717b49ea223d77d))
* update applyDefaults utility to work with TypeScript interfaces ([2f682ca](https://github.com/aashari/mcp-server-atlassian-bitbucket/commit/2f682cacef284ebeb9d2f40577209bf6b45ad1d9))

## [1.9.1](https://github.com/aashari/mcp-server-atlassian-bitbucket/compare/v1.9.0...v1.9.1) (2025-03-27)


### Bug Fixes

* **error:** standardize error handling across all MCP servers ([76834af](https://github.com/aashari/mcp-server-atlassian-bitbucket/commit/76834aff1d716e3e2caf210f667df65dfd21d466))

# [1.9.0](https://github.com/aashari/mcp-server-atlassian-bitbucket/compare/v1.8.1...v1.9.0) (2025-03-27)


### Features

* **logger:** implement contextual logging pattern ([d6f16b7](https://github.com/aashari/mcp-server-atlassian-bitbucket/commit/d6f16b76513990dce1e6d68c32767331d075c78b))

## [1.8.1](https://github.com/aashari/mcp-server-atlassian-bitbucket/compare/v1.8.0...v1.8.1) (2025-03-27)


### Bug Fixes

* trigger release ([43a4d06](https://github.com/aashari/mcp-server-atlassian-bitbucket/commit/43a4d069c3702f748a751f6f8a5d8b8ff425f5ab))

# [1.8.0](https://github.com/aashari/mcp-server-atlassian-bitbucket/compare/v1.7.3...v1.8.0) (2025-03-26)


### Features

* **bitbucket:** add default -updated_on sort to list operations ([ee5dbca](https://github.com/aashari/mcp-server-atlassian-bitbucket/commit/ee5dbcae32484b61e67f5852e21d5e63ed2ea4a4))
* **bitbucket:** add pull request comments and enhance repository details ([72a91c8](https://github.com/aashari/mcp-server-atlassian-bitbucket/commit/72a91c89c7ce54aedbdf457ba818af83414c43a6))

## [1.7.3](https://github.com/aashari/mcp-server-atlassian-bitbucket/compare/v1.7.2...v1.7.3) (2025-03-26)


### Bug Fixes

* empty commit to trigger patch version bump ([260911a](https://github.com/aashari/mcp-server-atlassian-bitbucket/commit/260911a1a2927aaadbe38e77fe04281a45d75334))

## [1.7.2](https://github.com/aashari/mcp-server-atlassian-bitbucket/compare/v1.7.1...v1.7.2) (2025-03-26)


### Bug Fixes

* improve CLI and tool descriptions with consistent formatting and detailed guidance ([ce74835](https://github.com/aashari/mcp-server-atlassian-bitbucket/commit/ce748354d84f7649d71a230b8e66e80c41547f34))

## [1.7.1](https://github.com/aashari/mcp-server-atlassian-bitbucket/compare/v1.7.0...v1.7.1) (2025-03-26)


### Bug Fixes

* standardize parameter naming conventions in Bitbucket module ([458a6e2](https://github.com/aashari/mcp-server-atlassian-bitbucket/commit/458a6e2ce714420794a83b334476c135353639fb))

# [1.7.0](https://github.com/aashari/mcp-server-atlassian-bitbucket/compare/v1.6.0...v1.7.0) (2025-03-26)


### Features

* trigger release with semantic versioning ([f4895b8](https://github.com/aashari/mcp-server-atlassian-bitbucket/commit/f4895b82f93d842bf777c59e2707aeedb64fd30c))

# [1.6.0](https://github.com/aashari/mcp-server-atlassian-bitbucket/compare/v1.5.0...v1.6.0) (2025-03-26)


### Features

* standardize CLI flags for consistent naming patterns ([b2ee0ba](https://github.com/aashari/mcp-server-atlassian-bitbucket/commit/b2ee0ba05dbd386ee3adb42c3fe82287d2b735ab))

# [1.5.0](https://github.com/aashari/mcp-server-atlassian-bitbucket/compare/v1.4.2...v1.5.0) (2025-03-26)


### Features

* improve CLI interface by using named parameters instead of positional arguments ([99318be](https://github.com/aashari/mcp-server-atlassian-bitbucket/commit/99318bee1cc2f4706b63072800431e43b0c051a4))

## [1.4.2](https://github.com/aashari/mcp-server-atlassian-bitbucket/compare/v1.4.1...v1.4.2) (2025-03-26)


### Bug Fixes

* standardize CLI pagination and query parameter names ([e116b25](https://github.com/aashari/mcp-server-atlassian-bitbucket/commit/e116b2582eda41f2241bf71454f82fcd2a6bdad0))

## [1.4.1](https://github.com/aashari/mcp-server-atlassian-bitbucket/compare/v1.4.0...v1.4.1) (2025-03-25)


### Bug Fixes

* replace any with unknown in defaults.util.ts ([5dbc0b1](https://github.com/aashari/mcp-server-atlassian-bitbucket/commit/5dbc0b1050df479ac844907ef1ed26fc26734561))

# [1.4.0](https://github.com/aashari/mcp-server-atlassian-bitbucket/compare/v1.3.0...v1.4.0) (2025-03-25)


### Features

* **pagination:** standardize pagination display across all CLI commands ([34f4c91](https://github.com/aashari/mcp-server-atlassian-bitbucket/commit/34f4c91f8aeb5c00d56d6975b8fa4c3ee81f4a9a))

# [1.3.0](https://github.com/aashari/mcp-server-atlassian-bitbucket/compare/v1.2.0...v1.3.0) (2025-03-25)


### Features

* **format:** implement standardized formatters and update CLI documentation ([9770402](https://github.com/aashari/mcp-server-atlassian-bitbucket/commit/9770402096de6b6dffda263b976f7dbf4f4a9ee4))

# [1.2.0](https://github.com/aashari/mcp-server-atlassian-bitbucket/compare/v1.1.1...v1.2.0) (2025-03-25)


### Bug Fixes

* standardize logging patterns and fix linter and type errors ([368df0f](https://github.com/aashari/mcp-server-atlassian-bitbucket/commit/368df0f602e29eea982628ddbc6f4f0702a6fab7))


### Features

* **workspaces:** improve workspace and repository management ([f27daf2](https://github.com/aashari/mcp-server-atlassian-bitbucket/commit/f27daf2238362c897ca2990a252d268e9d005484))

## [1.1.1](https://github.com/aashari/mcp-server-atlassian-bitbucket/compare/v1.1.0...v1.1.1) (2025-03-25)


### Bug Fixes

* trigger new release for parameter and pagination standardization ([5607ce9](https://github.com/aashari/mcp-server-atlassian-bitbucket/commit/5607ce91179b33ee9f3457e5150608300072a5f9))
* update CLI and tool handlers to use object-based identifiers ([2899adc](https://github.com/aashari/mcp-server-atlassian-bitbucket/commit/2899adc38e2b804bc85098aef1f0a26caa90f5aa))

# [1.1.0](https://github.com/aashari/mcp-server-atlassian-bitbucket/compare/v1.0.0...v1.1.0) (2025-03-25)


### Bug Fixes

* conflict ([91d2720](https://github.com/aashari/mcp-server-atlassian-bitbucket/commit/91d27204fdb7029d5fdd49282dbdfbdfe6da9090))
* conflict ([bccabbf](https://github.com/aashari/mcp-server-atlassian-bitbucket/commit/bccabbf44991eda2c91de592d2662f614adf4fb2))
* improve documentation with additional section ([6849f9b](https://github.com/aashari/mcp-server-atlassian-bitbucket/commit/6849f9b2339c049e0017ef40aedadd184350cee0))
* remove dist directory from git tracking ([7343e65](https://github.com/aashari/mcp-server-atlassian-bitbucket/commit/7343e65746001cb3465f9d0b0db30297ee43fb09))
* remove dist files from release commit assets ([74e53ce](https://github.com/aashari/mcp-server-atlassian-bitbucket/commit/74e53cee60c6a7785561354c81cbdf611323df5a))
* version consistency and release workflow improvements ([1a2baae](https://github.com/aashari/mcp-server-atlassian-bitbucket/commit/1a2baae4326163c8caf4fa4cfeb9f4b8028d2b5a))


### Features

* enhance get-space command to support both numeric IDs and space keys ([2913153](https://github.com/aashari/mcp-server-atlassian-bitbucket/commit/29131536f302abf1923c0c6521d544c51ad222fa))

# 1.0.0 (2025-03-24)

### Bug Fixes

- add workflows permission to semantic-release workflow ([de3a335](https://github.com/aashari/mcp-server-atlassian-bitbucket/commit/de3a33510bd447af353444db1fcb58e1b1aa02e4))
- correct package name and version consistency ([374a660](https://github.com/aashari/mcp-server-atlassian-bitbucket/commit/374a660e88a62b9c7b7c59718beec09806c47c0e))
- ensure executable permissions for bin script ([395f1dc](https://github.com/aashari/mcp-server-atlassian-bitbucket/commit/395f1dcb5f3b5efee99048d1b91e3b083e9e544f))
- handle empty strings properly in greet function ([546d3a8](https://github.com/aashari/mcp-server-atlassian-bitbucket/commit/546d3a84209e1065af46b2213053f589340158df))
- improve documentation with additional section ([ccbd814](https://github.com/aashari/mcp-server-atlassian-bitbucket/commit/ccbd8146ef55bed1edb6ed005f923ac25bfa8dae))
- improve error logging with IP address details ([121f516](https://github.com/aashari/mcp-server-atlassian-bitbucket/commit/121f51655517ddbea7d25968372bd6476f1b3e0f))
- improve GitHub Packages publishing with a more robust approach ([fd2aec9](https://github.com/aashari/mcp-server-atlassian-bitbucket/commit/fd2aec9926cf99d301cbb2b5f5ca961a6b6fec7e))
- improve GitHub Packages publishing with better error handling and debugging ([db25f04](https://github.com/aashari/mcp-server-atlassian-bitbucket/commit/db25f04925e884349fcf3ab85316550fde231d1f))
- improve GITHUB_OUTPUT syntax in semantic-release workflow ([6f154bc](https://github.com/aashari/mcp-server-atlassian-bitbucket/commit/6f154bc43f42475857e9256b0a671c3263dc9708))
- improve version detection for global installations ([97a95dc](https://github.com/aashari/mcp-server-atlassian-bitbucket/commit/97a95dca61d8cd7a86c81bde4cb38c509b810dc0))
- make publish workflow more resilient against version conflicts ([ffd3705](https://github.com/aashari/mcp-server-atlassian-bitbucket/commit/ffd3705bc064ee9135402052a0dc7fe32645714b))
- remove dist directory from git tracking ([0ed5d4b](https://github.com/aashari/mcp-server-atlassian-bitbucket/commit/0ed5d4bad05e09cbae3350eb934c98ef1d28ed12))
- remove dist files from release commit assets ([86e486b](https://github.com/aashari/mcp-server-atlassian-bitbucket/commit/86e486bb68cb18d077852e73eabf8f912d9d007e))
- remove incorrect limit expectation in transport utility tests ([6f7b689](https://github.com/aashari/mcp-server-atlassian-bitbucket/commit/6f7b689a7eb5db8a8592db88e7fa27ac04d641c8))
- remove invalid workflows permission ([c012e46](https://github.com/aashari/mcp-server-atlassian-bitbucket/commit/c012e46a29070c8394f7ab596fe7ba68c037d3a3))
- remove type module to fix CommonJS compatibility ([8b1f00c](https://github.com/aashari/mcp-server-atlassian-bitbucket/commit/8b1f00c37467bc676ad8ec9ab672ba393ed084a9))
- resolve linter errors in version detection code ([5f1f33e](https://github.com/aashari/mcp-server-atlassian-bitbucket/commit/5f1f33e88ae843b7a0d708899713be36fcd2ec2e))
- update examples to use correct API (greet instead of sayHello) ([7c062ca](https://github.com/aashari/mcp-server-atlassian-bitbucket/commit/7c062ca42765c659f018f990f4b1ec563d1172d3))
- update package name in config loader ([3b8157b](https://github.com/aashari/mcp-server-atlassian-bitbucket/commit/3b8157b076441e4dde562cddfe31671f3696434d))
- update package.json version and scripts, fix transport.util.test.ts, update README ([deefccd](https://github.com/aashari/mcp-server-atlassian-bitbucket/commit/deefccdc93311be572abf45feb9a5aae69ed57eb))
- update release workflow to ensure correct versioning in compiled files ([a365394](https://github.com/aashari/mcp-server-atlassian-bitbucket/commit/a365394b8596defa33ff5a44583d52e2c43f0aa3))
- update version display in CLI ([2b7846c](https://github.com/aashari/mcp-server-atlassian-bitbucket/commit/2b7846cbfa023f4b1a8c81ec511370fa8f5aaf33))

### Features

- add automated dependency management ([efa1b62](https://github.com/aashari/mcp-server-atlassian-bitbucket/commit/efa1b6292e0e9b6efd0d43b40cf7099d50769487))
- add CLI usage examples for both JavaScript and TypeScript ([d5743b0](https://github.com/aashari/mcp-server-atlassian-bitbucket/commit/d5743b07a6f2afe1c6cb0b03265228cba771e657))
- add support for custom name in greet command ([be48a05](https://github.com/aashari/mcp-server-atlassian-bitbucket/commit/be48a053834a1d910877864608a5e9942d913367))
- add version update script and fix version display ([ec831d3](https://github.com/aashari/mcp-server-atlassian-bitbucket/commit/ec831d3a3c966d858c15972365007f9dfd6115b8))
- implement Atlassian Bitbucket MCP server with pull request, repository, and workspace features ([a9ff1c9](https://github.com/aashari/mcp-server-atlassian-bitbucket/commit/a9ff1c9ddecaa323ffdbd6620bd5bc02b517079b))
- implement Atlassian Confluence MCP server ([50ee69e](https://github.com/aashari/mcp-server-atlassian-bitbucket/commit/50ee69e37f4d453cb8f0447e10fa5708a787aa93))
- implement review recommendations ([a23cbc0](https://github.com/aashari/mcp-server-atlassian-bitbucket/commit/a23cbc0608a07e202396b3cd496c1f2078e304c1))
- implement testing, linting, and semantic versioning ([1d7710d](https://github.com/aashari/mcp-server-atlassian-bitbucket/commit/1d7710dfa11fd1cb04ba3c604e9a2eb785652394))
- improve CI workflows with standardized Node.js version, caching, and dual publishing ([0dc9470](https://github.com/aashari/mcp-server-atlassian-bitbucket/commit/0dc94705c81067d7ff63ab978ef9e6a6e3f75784))
- improve development workflow and update documentation ([4458957](https://github.com/aashari/mcp-server-atlassian-bitbucket/commit/445895777be6287a624cb19b8cd8a12590a28c7b))
- improve package structure and add better examples ([bd66891](https://github.com/aashari/mcp-server-atlassian-bitbucket/commit/bd668915bde84445161cdbd55ff9da0b0af51944))
- initial implementation of Jira MCP server ([79e4651](https://github.com/aashari/mcp-server-atlassian-bitbucket/commit/79e4651ddf322d2dcc93d2a4aa2bd1294266550b))

### Reverts

- restore simple version handling ([bd0fadf](https://github.com/aashari/mcp-server-atlassian-bitbucket/commit/bd0fadfa8207b4a7cf472c3b9f4ee63d8e36189d))

## [1.1.4](https://github.com/aashari/mcp-server-atlassian-jira/compare/v1.1.3...v1.1.4) (2025-03-24)

### Bug Fixes

- remove dist directory from git tracking ([0ed5d4b](https://github.com/aashari/mcp-server-atlassian-jira/commit/0ed5d4bad05e09cbae3350eb934c98ef1d28ed12))

## [1.1.3](https://github.com/aashari/mcp-server-atlassian-jira/compare/v1.1.2...v1.1.3) (2025-03-24)

### Bug Fixes

- remove dist files from release commit assets ([86e486b](https://github.com/aashari/mcp-server-atlassian-jira/commit/86e486bb68cb18d077852e73eabf8f912d9d007e))

## [1.1.2](https://github.com/aashari/mcp-server-atlassian-jira/compare/v1.1.1...v1.1.2) (2025-03-24)

### Bug Fixes

- correct package name and version consistency ([374a660](https://github.com/aashari/mcp-server-atlassian-jira/commit/374a660e88a62b9c7b7c59718beec09806c47c0e))

## [1.1.1](https://github.com/aashari/mcp-server-atlassian-jira/compare/v1.1.0...v1.1.1) (2025-03-24)

### Bug Fixes

- improve documentation with additional section ([ccbd814](https://github.com/aashari/mcp-server-atlassian-jira/commit/ccbd8146ef55bed1edb6ed005f923ac25bfa8dae))

# [1.1.0](https://github.com/aashari/mcp-server-atlassian-jira/compare/v1.0.0...v1.1.0) (2025-03-23)

### Bug Fixes

- remove incorrect limit expectation in transport utility tests ([6f7b689](https://github.com/aashari/mcp-server-atlassian-jira/commit/6f7b689a7eb5db8a8592db88e7fa27ac04d641c8))
- update package.json version and scripts, fix transport.util.test.ts, update README ([deefccd](https://github.com/aashari/mcp-server-atlassian-jira/commit/deefccdc93311be572abf45feb9a5aae69ed57eb))

### Features

- improve development workflow and update documentation ([4458957](https://github.com/aashari/mcp-server-atlassian-jira/commit/445895777be6287a624cb19b8cd8a12590a28c7b))

# 1.0.0 (2025-03-23)

### Bug Fixes

- add workflows permission to semantic-release workflow ([de3a335](https://github.com/aashari/mcp-server-atlassian-jira/commit/de3a33510bd447af353444db1fcb58e1b1aa02e4))
- ensure executable permissions for bin script ([395f1dc](https://github.com/aashari/mcp-server-atlassian-jira/commit/395f1dcb5f3b5efee99048d1b91e3b083e9e544f))
- handle empty strings properly in greet function ([546d3a8](https://github.com/aashari/mcp-server-atlassian-jira/commit/546d3a84209e1065af46b2213053f589340158df))
- improve error logging with IP address details ([121f516](https://github.com/aashari/mcp-server-atlassian-jira/commit/121f51655517ddbea7d25968372bd6476f1b3e0f))
- improve GitHub Packages publishing with a more robust approach ([fd2aec9](https://github.com/aashari/mcp-server-atlassian-jira/commit/fd2aec9926cf99d301cbb2b5f5ca961a6b6fec7e))
- improve GitHub Packages publishing with better error handling and debugging ([db25f04](https://github.com/aashari/mcp-server-atlassian-jira/commit/db25f04925e884349fcf3ab85316550fde231d1f))
- improve GITHUB_OUTPUT syntax in semantic-release workflow ([6f154bc](https://github.com/aashari/mcp-server-atlassian-jira/commit/6f154bc43f42475857e9256b0a671c3263dc9708))
- improve version detection for global installations ([97a95dc](https://github.com/aashari/mcp-server-atlassian-jira/commit/97a95dca61d8cd7a86c81bde4cb38c509b810dc0))
- make publish workflow more resilient against version conflicts ([ffd3705](https://github.com/aashari/mcp-server-atlassian-jira/commit/ffd3705bc064ee9135402052a0dc7fe32645714b))
- remove invalid workflows permission ([c012e46](https://github.com/aashari/mcp-server-atlassian-jira/commit/c012e46a29070c8394f7ab596fe7ba68c037d3a3))
- remove type module to fix CommonJS compatibility ([8b1f00c](https://github.com/aashari/mcp-server-atlassian-jira/commit/8b1f00c37467bc676ad8ec9ab672ba393ed084a9))
- resolve linter errors in version detection code ([5f1f33e](https://github.com/aashari/mcp-server-atlassian-jira/commit/5f1f33e88ae843b7a0d708899713be36fcd2ec2e))
- update examples to use correct API (greet instead of sayHello) ([7c062ca](https://github.com/aashari/mcp-server-atlassian-jira/commit/7c062ca42765c659f018f990f4b1ec563d1172d3))
- update package name in config loader ([3b8157b](https://github.com/aashari/mcp-server-atlassian-jira/commit/3b8157b076441e4dde562cddfe31671f3696434d))
- update release workflow to ensure correct versioning in compiled files ([a365394](https://github.com/aashari/mcp-server-atlassian-jira/commit/a365394b8596defa33ff5a44583d52e2c43f0aa3))
- update version display in CLI ([2b7846c](https://github.com/aashari/mcp-server-atlassian-jira/commit/2b7846cbfa023f4b1a8c81ec511370fa8f5aaf33))

### Features

- add automated dependency management ([efa1b62](https://github.com/aashari/mcp-server-atlassian-jira/commit/efa1b6292e0e9b6efd0d43b40cf7099d50769487))
- add CLI usage examples for both JavaScript and TypeScript ([d5743b0](https://github.com/aashari/mcp-server-atlassian-jira/commit/d5743b07a6f2afe1c6cb0b03265228cba771e657))
- add support for custom name in greet command ([be48a05](https://github.com/aashari/mcp-server-atlassian-jira/commit/be48a053834a1d910877864608a5e9942d913367))
- add version update script and fix version display ([ec831d3](https://github.com/aashari/mcp-server-atlassian-jira/commit/ec831d3a3c966d858c15972365007f9dfd6115b8))
- implement Atlassian Confluence MCP server ([50ee69e](https://github.com/aashari/mcp-server-atlassian-jira/commit/50ee69e37f4d453cb8f0447e10fa5708a787aa93))
- implement review recommendations ([a23cbc0](https://github.com/aashari/mcp-server-atlassian-jira/commit/a23cbc0608a07e202396b3cd496c1f2078e304c1))
- implement testing, linting, and semantic versioning ([1d7710d](https://github.com/aashari/mcp-server-atlassian-jira/commit/1d7710dfa11fd1cb04ba3c604e9a2eb785652394))
- improve CI workflows with standardized Node.js version, caching, and dual publishing ([0dc9470](https://github.com/aashari/mcp-server-atlassian-jira/commit/0dc94705c81067d7ff63ab978ef9e6a6e3f75784))
- improve package structure and add better examples ([bd66891](https://github.com/aashari/mcp-server-atlassian-jira/commit/bd668915bde84445161cdbd55ff9da0b0af51944))
- initial implementation of Jira MCP server ([79e4651](https://github.com/aashari/mcp-server-atlassian-jira/commit/79e4651ddf322d2dcc93d2a4aa2bd1294266550b))

### Reverts

- restore simple version handling ([bd0fadf](https://github.com/aashari/mcp-server-atlassian-jira/commit/bd0fadfa8207b4a7cf472c3b9f4ee63d8e36189d))

## [1.0.1](https://github.com/aashari/mcp-server-atlassian-confluence/compare/v1.0.0...v1.0.1) (2025-03-23)

### Bug Fixes

- update package name in config loader ([3b8157b](https://github.com/aashari/mcp-server-atlassian-confluence/commit/3b8157b076441e4dde562cddfe31671f3696434d))

# 1.0.0 (2025-03-23)

### Bug Fixes

- add workflows permission to semantic-release workflow ([de3a335](https://github.com/aashari/mcp-server-atlassian-confluence/commit/de3a33510bd447af353444db1fcb58e1b1aa02e4))
- ensure executable permissions for bin script ([395f1dc](https://github.com/aashari/mcp-server-atlassian-confluence/commit/395f1dcb5f3b5efee99048d1b91e3b083e9e544f))
- handle empty strings properly in greet function ([546d3a8](https://github.com/aashari/mcp-server-atlassian-confluence/commit/546d3a84209e1065af46b2213053f589340158df))
- improve error logging with IP address details ([121f516](https://github.com/aashari/mcp-server-atlassian-confluence/commit/121f51655517ddbea7d25968372bd6476f1b3e0f))
- improve GitHub Packages publishing with a more robust approach ([fd2aec9](https://github.com/aashari/mcp-server-atlassian-confluence/commit/fd2aec9926cf99d301cbb2b5f5ca961a6b6fec7e))
- improve GitHub Packages publishing with better error handling and debugging ([db25f04](https://github.com/aashari/mcp-server-atlassian-confluence/commit/db25f04925e884349fcf3ab85316550fde231d1f))
- improve GITHUB_OUTPUT syntax in semantic-release workflow ([6f154bc](https://github.com/aashari/mcp-server-atlassian-confluence/commit/6f154bc43f42475857e9256b0a671c3263dc9708))
- improve version detection for global installations ([97a95dc](https://github.com/aashari/mcp-server-atlassian-confluence/commit/97a95dca61d8cd7a86c81bde4cb38c509b810dc0))
- make publish workflow more resilient against version conflicts ([ffd3705](https://github.com/aashari/mcp-server-atlassian-confluence/commit/ffd3705bc064ee9135402052a0dc7fe32645714b))
- remove invalid workflows permission ([c012e46](https://github.com/aashari/mcp-server-atlassian-confluence/commit/c012e46a29070c8394f7ab596fe7ba68c037d3a3))
- remove type module to fix CommonJS compatibility ([8b1f00c](https://github.com/aashari/mcp-server-atlassian-confluence/commit/8b1f00c37467bc676ad8ec9ab672ba393ed084a9))
- resolve linter errors in version detection code ([5f1f33e](https://github.com/aashari/mcp-server-atlassian-confluence/commit/5f1f33e88ae843b7a0d708899713be36fcd2ec2e))
- update examples to use correct API (greet instead of sayHello) ([7c062ca](https://github.com/aashari/mcp-server-atlassian-confluence/commit/7c062ca42765c659f018f990f4b1ec563d1172d3))
- update release workflow to ensure correct versioning in compiled files ([a365394](https://github.com/aashari/mcp-server-atlassian-confluence/commit/a365394b8596defa33ff5a44583d52e2c43f0aa3))
- update version display in CLI ([2b7846c](https://github.com/aashari/mcp-server-atlassian-confluence/commit/2b7846cbfa023f4b1a8c81ec511370fa8f5aaf33))

### Features

- add automated dependency management ([efa1b62](https://github.com/aashari/mcp-server-atlassian-confluence/commit/efa1b6292e0e9b6efd0d43b40cf7099d50769487))
- add CLI usage examples for both JavaScript and TypeScript ([d5743b0](https://github.com/aashari/mcp-server-atlassian-confluence/commit/d5743b07a6f2afe1c6cb0b03265228cba771e657))
- add support for custom name in greet command ([be48a05](https://github.com/aashari/mcp-server-atlassian-confluence/commit/be48a053834a1d910877864608a5e9942d913367))
- add version update script and fix version display ([ec831d3](https://github.com/aashari/mcp-server-atlassian-confluence/commit/ec831d3a3c966d858c15972365007f9dfd6115b8))
- implement Atlassian Confluence MCP server ([50ee69e](https://github.com/aashari/mcp-server-atlassian-confluence/commit/50ee69e37f4d453cb8f0447e10fa5708a787aa93))
- implement review recommendations ([a23cbc0](https://github.com/aashari/mcp-server-atlassian-confluence/commit/a23cbc0608a07e202396b3cd496c1f2078e304c1))
- implement testing, linting, and semantic versioning ([1d7710d](https://github.com/aashari/mcp-server-atlassian-confluence/commit/1d7710dfa11fd1cb04ba3c604e9a2eb785652394))
- improve CI workflows with standardized Node.js version, caching, and dual publishing ([0dc9470](https://github.com/aashari/mcp-server-atlassian-confluence/commit/0dc94705c81067d7ff63ab978ef9e6a6e3f75784))
- improve package structure and add better examples ([bd66891](https://github.com/aashari/mcp-server-atlassian-confluence/commit/bd668915bde84445161cdbd55ff9da0b0af51944))

### Reverts

- restore simple version handling ([bd0fadf](https://github.com/aashari/mcp-server-atlassian-confluence/commit/bd0fadfa8207b4a7cf472c3b9f4ee63d8e36189d))

# 1.0.0 (2025-03-23)

### Features

- Initial release of Atlassian Confluence MCP server
- Provides tools for accessing and searching Confluence spaces, pages, and content
- Integration with Claude Desktop and Cursor AI via Model Context Protocol
- CLI support for direct interaction with Confluence
</file>

<file path="Dockerfile">
# Generated by https://smithery.ai. See: https://smithery.ai/docs/config#dockerfile
FROM node:lts-alpine

# Create app directory
WORKDIR /usr/src/app

# Copy package files
COPY package*.json ./

# Install dependencies without running prepare scripts
RUN npm install --ignore-scripts

# Copy source code
COPY . .

# Build the TypeScript code
RUN npm run build

# Ensure the entrypoint is executable (already set in prepare, but reensure here)
RUN chmod +x dist/index.js

EXPOSE 3000

# Start the MCP server
CMD [ "npm", "start" ]
</file>

<file path="eslint.config.mjs">
import eslint from '@eslint/js';
import tseslint from 'typescript-eslint';
import prettierPlugin from 'eslint-plugin-prettier';
import eslintConfigPrettier from 'eslint-config-prettier';

export default tseslint.config(
	{
		ignores: ['node_modules/**', 'dist/**', 'examples/**'],
	},
	eslint.configs.recommended,
	...tseslint.configs.recommended,
	{
		plugins: {
			prettier: prettierPlugin,
		},
		rules: {
			'prettier/prettier': 'error',
			indent: ['error', 'tab', { SwitchCase: 1 }],
			'@typescript-eslint/no-unused-vars': [
				'error',
				{ argsIgnorePattern: '^_' },
			],
		},
		languageOptions: {
			parserOptions: {
				ecmaVersion: 'latest',
				sourceType: 'module',
			},
			globals: {
				node: 'readonly',
				jest: 'readonly',
			},
		},
	},
	// Special rules for test files
	{
		files: ['**/*.test.ts'],
		rules: {
			'@typescript-eslint/no-explicit-any': 'off',
			'@typescript-eslint/no-require-imports': 'off',
			'@typescript-eslint/no-unsafe-function-type': 'off',
			'@typescript-eslint/no-unused-vars': 'off',
		},
	},
	eslintConfigPrettier,
);
</file>

<file path="package.json">
{
	"name": "@aashari/mcp-server-atlassian-bitbucket",
	"version": "1.15.3",
	"description": "Node.js/TypeScript MCP server for Atlassian Bitbucket. Enables AI systems (LLMs) to interact with workspaces, repositories, and pull requests via tools (list, get, comment, search). Connects AI directly to version control workflows through the standard MCP interface.",
	"main": "dist/index.js",
	"types": "dist/index.d.ts",
	"type": "commonjs",
	"repository": {
		"type": "git",
		"url": "https://github.com/aashari/mcp-server-atlassian-bitbucket.git"
	},
	"bin": {
		"mcp-atlassian-bitbucket": "./dist/index.js"
	},
	"scripts": {
		"build": "tsc",
		"prepare": "npm run build && chmod +x dist/index.js",
		"postinstall": "chmod +x dist/index.js || true",
		"test": "jest",
		"test:coverage": "jest --coverage",
		"test:cli": "jest src/cli/.*\\.cli\\.test\\.ts --runInBand --testTimeout=60000",
		"lint": "eslint src --ext .ts --config eslint.config.mjs",
		"format": "prettier --write 'src/**/*.ts' 'scripts/**/*.js'",
		"publish:npm": "npm publish",
		"update:check": "npx npm-check-updates",
		"update:deps": "npx npm-check-updates -u && npm install --legacy-peer-deps",
		"update:version": "node scripts/update-version.js",
		"dev:server": "DEBUG=true npm run build && npx @modelcontextprotocol/inspector -e DEBUG=true node dist/index.js",
		"dev:cli": "DEBUG=true npm run build && DEBUG=true node dist/index.js",
		"start:server": "npm run build && npx @modelcontextprotocol/inspector node dist/index.js",
		"start:cli": "npm run build && node dist/index.js"
	},
	"keywords": [
		"mcp",
		"typescript",
		"claude",
		"anthropic",
		"ai",
		"atlassian",
		"bitbucket",
		"repository",
		"version-control",
		"pull-request",
		"server",
		"model-context-protocol",
		"tools",
		"resources",
		"tooling",
		"ai-integration",
		"mcp-server",
		"llm",
		"ai-connector",
		"external-tools",
		"cli",
		"mcp-inspector"
	],
	"author": "",
	"license": "ISC",
	"devDependencies": {
		"@eslint/js": "^9.25.1",
		"@semantic-release/changelog": "^6.0.3",
		"@semantic-release/exec": "^7.0.3",
		"@semantic-release/git": "^10.0.1",
		"@semantic-release/github": "^11.0.1",
		"@semantic-release/npm": "^12.0.1",
		"@types/jest": "^29.5.14",
		"@types/node": "^22.14.1",
		"@types/turndown": "^5.0.5",
		"@typescript-eslint/eslint-plugin": "^8.31.0",
		"@typescript-eslint/parser": "^8.31.0",
		"eslint": "^9.25.1",
		"eslint-config-prettier": "^10.1.2",
		"eslint-plugin-prettier": "^5.2.6",
		"eslint-plugin-filenames": "^1.3.2",
		"jest": "^29.7.0",
		"nodemon": "^3.1.9",
		"npm-check-updates": "^18.0.0",
		"prettier": "^3.5.3",
		"semantic-release": "^24.2.3",
		"ts-jest": "^29.3.2",
		"ts-node": "^10.9.2",
		"typescript": "^5.8.3",
		"typescript-eslint": "^8.31.0"
	},
	"publishConfig": {
		"registry": "https://registry.npmjs.org/",
		"access": "public"
	},
	"dependencies": {
		"@modelcontextprotocol/sdk": "^1.10.1",
		"commander": "^13.1.0",
		"dotenv": "^16.5.0",
		"turndown": "^7.2.0",
		"zod": "^3.24.3"
	},
	"directories": {
		"example": "examples"
	},
	"jest": {
		"preset": "ts-jest",
		"testEnvironment": "node",
		"testMatch": [
			"**/src/**/*.test.ts"
		],
		"collectCoverageFrom": [
			"src/**/*.ts",
			"!src/**/*.test.ts",
			"!src/**/*.spec.ts"
		],
		"coveragePathIgnorePatterns": [
			"/node_modules/",
			"/dist/",
			"/coverage/"
		],
		"coverageReporters": [
			"text",
			"lcov",
			"json-summary"
		],
		"transform": {
			"^.+\\.tsx?$": [
				"ts-jest",
				{
					"useESM": true
				}
			]
		},
		"moduleNameMapper": {
			"(.*)\\.(js|jsx)$": "$1"
		},
		"extensionsToTreatAsEsm": [
			".ts"
		],
		"moduleFileExtensions": [
			"ts",
			"tsx",
			"js",
			"jsx",
			"json",
			"node"
		]
	}
}
</file>

<file path="README.md">
# Atlassian Bitbucket MCP Server

This project provides a Model Context Protocol (MCP) server that acts as a bridge between AI assistants (like Anthropic's Claude, Cursor AI, or other MCP-compatible clients) and your Atlassian Bitbucket instance. It allows AI to securely access and interact with your repositories, pull requests, and workspaces in real time.

---

# Overview

## What is MCP?

Model Context Protocol (MCP) is an open standard that allows AI systems to securely and contextually connect with external tools and data sources.

This server implements MCP specifically for Bitbucket Cloud, bridging your Bitbucket data with AI assistants.

## Why Use This Server?

- **Minimal Input, Maximum Output Philosophy**: Simple identifiers like `workspaceSlug` and `repoSlug` are all you need. Each tool returns comprehensive details without requiring extra flags.

- **Rich Code Visualization**: Get detailed insights into repositories and code changes with file statistics, diff views, and smart context around code modifications.

- **Secure Local Authentication**: Credentials are never stored in the server. The server runs locally, so your tokens never leave your machine and you can request only the permissions you need.

- **Intuitive Markdown Responses**: All responses use well-structured Markdown for readability with consistent formatting and navigational links.

- **Full Bitbucket Integration**: Access workspaces, repositories, pull requests, comments, code search, and more through a unified interface.

---

# Getting Started

## Prerequisites

- **Node.js** (>=18.x): [Download](https://nodejs.org/)
- **Bitbucket Cloud Account**

---

## Step 1: Authenticate

Choose one of the following authentication methods:

### Option A: Bitbucket App Password (Recommended)

Generate one from [Bitbucket App Passwords](https://bitbucket.org/account/settings/app-passwords/). Minimum permissions:

- Workspaces: Read
- Repositories: Read
- Pull Requests: Read

### Option B: Atlassian API Token

Generate one from [Atlassian API Tokens](https://id.atlassian.com/manage-profile/security/api-tokens).

---

## Step 2: Configure Credentials

### Method A: MCP Config File (Recommended)

Create or edit `~/.mcp/configs.json`:

**Using Bitbucket App Password:**

```json
{
	"@aashari/mcp-server-atlassian-bitbucket": {
		"environments": {
			"ATLASSIAN_BITBUCKET_USERNAME": "<your_username>",
			"ATLASSIAN_BITBUCKET_APP_PASSWORD": "<your_app_password>"
		}
	}
}
```

**Using Atlassian API Token:**

```json
{
	"@aashari/mcp-server-atlassian-bitbucket": {
		"environments": {
			"ATLASSIAN_SITE_NAME": "bitbucket",
			"ATLASSIAN_USER_EMAIL": "<your_email>",
			"ATLASSIAN_API_TOKEN": "<your_api_token>"
		}
	}
}
```

### Method B: Environment Variables

Pass credentials directly when running the server:

```bash
ATLASSIAN_BITBUCKET_USERNAME="<your_username>" \
ATLASSIAN_BITBUCKET_APP_PASSWORD="<your_app_password>" \
npx -y @aashari/mcp-server-atlassian-bitbucket
```

---

## Step 3: Connect Your AI Assistant

Configure your MCP-compatible client to launch this server.

**Claude / Cursor Configuration:**

```json
{
	"mcpServers": {
		"aashari/mcp-server-atlassian-bitbucket": {
			"command": "npx",
			"args": ["-y", "@aashari/mcp-server-atlassian-bitbucket"]
		}
	}
}
```

This configuration launches the server automatically at runtime.

---

# Tools

This section covers the MCP tools available when using this server with an AI assistant. Note that MCP tools use `snake_case` for tool names and `camelCase` for parameters.

## `list_workspaces`

List available Bitbucket workspaces.

```json
{}
```

_or:_

```json
{ "query": "devteam" }
```

> "Show me all my Bitbucket workspaces."

---

## `get_workspace`

Get full details for a specific workspace.

```json
{ "workspaceSlug": "acme-corp" }
```

> "Tell me more about the 'acme-corp' workspace."

---

## `list_repositories`

List repositories in a workspace.

```json
{ "workspaceSlug": "acme-corp" }
```

_or:_

```json
{ "workspaceSlug": "acme-corp", "query": "api" }
```

> "List repositories in 'acme-corp'."

---

## `get_repository`

Get details of a specific repository.

```json
{ "workspaceSlug": "acme-corp", "repoSlug": "backend-api" }
```

> "Show me the 'backend-api' repository in 'acme-corp'."

---

## `search`

Search Bitbucket content.

**Repositories:**

```json
{ "workspaceSlug": "acme-corp", "query": "api", "scope": "repositories" }
```

**Pull Requests:**

```json
{
	"workspaceSlug": "acme-corp",
	"repoSlug": "backend-api",
	"query": "fix",
	"scope": "pullrequests"
}
```

**Commits:**

```json
{
	"workspaceSlug": "acme-corp",
	"repoSlug": "backend-api",
	"query": "update",
	"scope": "commits"
}
```

**Code:**

```json
{ "workspaceSlug": "acme-corp", "query": "function getUser", "scope": "code" }
```

> "Search for 'function getUser' in the 'acme-corp' workspace."

---

## `list_pull_requests`

List pull requests in a repository.

```json
{ "workspaceSlug": "acme-corp", "repoSlug": "frontend-app", "state": "OPEN" }
```

> "Show open PRs in 'frontend-app'."

---

## `get_pull_request`

Get full details of a pull request, including code diffs and file changes.

```json
{ "workspaceSlug": "acme-corp", "repoSlug": "frontend-app", "prId": "42" }
```

> "Get PR #42 from 'frontend-app' with all code changes."

---

## `list_pr_comments`

List comments on a specific pull request.

```json
{ "workspaceSlug": "acme-corp", "repoSlug": "frontend-app", "prId": "42" }
```

> "Show me all comments on PR #42."

---

## `add_pr_comment`

Add a comment to a pull request.

**General:**

```json
{
	"workspaceSlug": "acme-corp",
	"repoSlug": "frontend-app",
	"prId": "42",
	"content": "Looks good."
}
```

**Inline:**

```json
{
	"workspaceSlug": "acme-corp",
	"repoSlug": "frontend-app",
	"prId": "42",
	"content": "Consider refactoring.",
	"inline": { "path": "src/utils.js", "line": 42 }
}
```

> "Add a comment to PR #42 on line 42."

---

## `pull_requests_create`

Create a new pull request.

```json
{
	"workspaceSlug": "acme-corp",
	"repoSlug": "frontend-app",
	"title": "Add login screen",
	"sourceBranch": "feature/login"
}
```

> "Create a PR from 'feature/login' to 'main'."

---

# Command-Line Interface (CLI)

The CLI uses kebab-case for commands (e.g., `list-workspaces`) and options (e.g., `--workspace-slug`).

## Quick Use with `npx`

```bash
npx -y @aashari/mcp-server-atlassian-bitbucket list-workspaces
npx -y @aashari/mcp-server-atlassian-bitbucket get-repository \
  --workspace-slug acme-corp \
  --repo-slug backend-api
```

## Install Globally

```bash
npm install -g @aashari/mcp-server-atlassian-bitbucket
```

Then run directly:

```bash
mcp-atlassian-bitbucket list-workspaces
```

## Discover More CLI Options

Use `--help` to see flags and usage for all available commands:

```bash
mcp-atlassian-bitbucket --help
```

Or get detailed help for a specific command:

```bash
mcp-atlassian-bitbucket get-repository --help
mcp-atlassian-bitbucket list-pull-requests --help
mcp-atlassian-bitbucket search --help
```

---

# License

[ISC License](https://opensource.org/licenses/ISC)
</file>

<file path="smithery.yaml">
# Smithery configuration file: https://smithery.ai/docs/config#smitheryyaml

startCommand:
    type: stdio
    configSchema:
        # JSON Schema defining the configuration options for the MCP.
        type: object
        required: []
        properties:
            debug:
                type: boolean
                default: false
                description: Enable debug logging
            atlassianSiteName:
                type: string
                default: ''
                description: Your Atlassian site name, e.g., 'your-instance' for 'your-instance.atlassian.net'
            atlassianUserEmail:
                type: string
                default: ''
                description: Your Atlassian account email address
            atlassianApiToken:
                type: string
                default: ''
                description: API token for Atlassian API access
    commandFunction:
        # A JS function that produces the CLI command based on the given config to start the MCP on stdio.
        |-
        (config) => {
          // Setup environment variables based on provided config
          const env = Object.assign({}, process.env);
          if (config.debug) {
            env.DEBUG = 'true';
          }
          if (config.atlassianSiteName) {
            env.ATLASSIAN_SITE_NAME = config.atlassianSiteName;
          }
          if (config.atlassianUserEmail) {
            env.ATLASSIAN_USER_EMAIL = config.atlassianUserEmail;
          }
          if (config.atlassianApiToken) {
            env.ATLASSIAN_API_TOKEN = config.atlassianApiToken;
          }
          return { command: 'node', args: ['dist/index.js'], env };
        }
    exampleConfig:
        debug: true
        atlassianSiteName: your-instance
        atlassianUserEmail: your-email@example.com
        atlassianApiToken: YOUR_API_TOKEN
</file>

<file path="tsconfig.json">
{
  "compilerOptions": {
    /* Visit https://aka.ms/tsconfig to read more about this file */

    /* Projects */
    // "incremental": true,                              /* Save .tsbuildinfo files to allow for incremental compilation of projects. */
    // "composite": true,                                /* Enable constraints that allow a TypeScript project to be used with project references. */
    // "tsBuildInfoFile": "./.tsbuildinfo",              /* Specify the path to .tsbuildinfo incremental compilation file. */
    // "disableSourceOfProjectReferenceRedirect": true,  /* Disable preferring source files instead of declaration files when referencing composite projects. */
    // "disableSolutionSearching": true,                 /* Opt a project out of multi-project reference checking when editing. */
    // "disableReferencedProjectLoad": true,             /* Reduce the number of projects loaded automatically by TypeScript. */

    /* Language and Environment */
    "target": "ES2020",                                  /* Set the JavaScript language version for emitted JavaScript and include compatible library declarations. */
    "lib": ["ES2020"],                                   /* Specify a set of bundled library declaration files that describe the target runtime environment. */
    // "jsx": "preserve",                                /* Specify what JSX code is generated. */
    // "libReplacement": true,                           /* Enable lib replacement. */
    // "experimentalDecorators": true,                   /* Enable experimental support for legacy experimental decorators. */
    // "emitDecoratorMetadata": true,                    /* Emit design-type metadata for decorated declarations in source files. */
    // "jsxFactory": "",                                 /* Specify the JSX factory function used when targeting React JSX emit, e.g. 'React.createElement' or 'h'. */
    // "jsxFragmentFactory": "",                         /* Specify the JSX Fragment reference used for fragments when targeting React JSX emit e.g. 'React.Fragment' or 'Fragment'. */
    // "jsxImportSource": "",                            /* Specify module specifier used to import the JSX factory functions when using 'jsx: react-jsx*'. */
    // "reactNamespace": "",                             /* Specify the object invoked for 'createElement'. This only applies when targeting 'react' JSX emit. */
    // "noLib": true,                                    /* Disable including any library files, including the default lib.d.ts. */
    // "useDefineForClassFields": true,                  /* Emit ECMAScript-standard-compliant class fields. */
    // "moduleDetection": "auto",                        /* Control what method is used to detect module-format JS files. */

    /* Modules */
    "module": "NodeNext",                                /* Specify what module code is generated. */
    // "rootDir": "./",                                  /* Specify the root folder within your source files. */
    "moduleResolution": "NodeNext",                      /* Specify how TypeScript looks up a file from a given module specifier. */
    // "baseUrl": "./",                                  /* Specify the base directory to resolve non-relative module names. */
    // "paths": {},                                      /* Specify a set of entries that re-map imports to additional lookup locations. */
    // "rootDirs": [],                                   /* Allow multiple folders to be treated as one when resolving modules. */
    // "typeRoots": [],                                  /* Specify multiple folders that act like './node_modules/@types'. */
    // "types": [],                                      /* Specify type package names to be included without being referenced in a source file. */
    // "allowUmdGlobalAccess": true,                     /* Allow accessing UMD globals from modules. */
    // "moduleSuffixes": [],                             /* List of file name suffixes to search when resolving a module. */
    // "allowImportingTsExtensions": true,               /* Allow imports to include TypeScript file extensions. Requires '--moduleResolution bundler' and either '--noEmit' or '--emitDeclarationOnly' to be set. */
    // "rewriteRelativeImportExtensions": true,          /* Rewrite '.ts', '.tsx', '.mts', and '.cts' file extensions in relative import paths to their JavaScript equivalent in output files. */
    // "resolvePackageJsonExports": true,                /* Use the package.json 'exports' field when resolving package imports. */
    // "resolvePackageJsonImports": true,                /* Use the package.json 'imports' field when resolving imports. */
    // "customConditions": [],                           /* Conditions to set in addition to the resolver-specific defaults when resolving imports. */
    // "noUncheckedSideEffectImports": true,             /* Check side effect imports. */
    "resolveJsonModule": true,                           /* Enable importing .json files. */
    // "allowArbitraryExtensions": true,                 /* Enable importing files with any extension, provided a declaration file is present. */
    // "noResolve": true,                                /* Disallow 'import's, 'require's or '<reference>'s from expanding the number of files TypeScript should add to a project. */

    /* JavaScript Support */
    // "allowJs": true,                                  /* Allow JavaScript files to be a part of your program. Use the 'checkJS' option to get errors from these files. */
    // "checkJs": true,                                  /* Enable error reporting in type-checked JavaScript files. */
    // "maxNodeModuleJsDepth": 1,                        /* Specify the maximum folder depth used for checking JavaScript files from 'node_modules'. Only applicable with 'allowJs'. */

    /* Emit */
    "declaration": true,                                 /* Generate .d.ts files from TypeScript and JavaScript files in your project. */
    // "declarationMap": true,                           /* Create sourcemaps for d.ts files. */
    // "emitDeclarationOnly": true,                      /* Only output d.ts files and not JavaScript files. */
    // "sourceMap": true,                                /* Create source map files for emitted JavaScript files. */
    // "inlineSourceMap": true,                          /* Include sourcemap files inside the emitted JavaScript. */
    // "noEmit": true,                                   /* Disable emitting files from a compilation. */
    // "outFile": "./",                                  /* Specify a file that bundles all outputs into one JavaScript file. If 'declaration' is true, also designates a file that bundles all .d.ts output. */
    "outDir": "./dist",                                  /* Specify an output folder for all emitted files. */
    // "removeComments": true,                           /* Disable emitting comments. */
    // "importHelpers": true,                            /* Allow importing helper functions from tslib once per project, instead of including them per-file. */
    // "downlevelIteration": true,                       /* Emit more compliant, but verbose and less performant JavaScript for iteration. */
    // "sourceRoot": "",                                 /* Specify the root path for debuggers to find the reference source code. */
    // "mapRoot": "",                                    /* Specify the location where debugger should locate map files instead of generated locations. */
    // "inlineSources": true,                            /* Include source code in the sourcemaps inside the emitted JavaScript. */
    // "emitBOM": true,                                  /* Emit a UTF-8 Byte Order Mark (BOM) in the beginning of output files. */
    // "newLine": "crlf",                                /* Set the newline character for emitting files. */
    // "stripInternal": true,                            /* Disable emitting declarations that have '@internal' in their JSDoc comments. */
    // "noEmitHelpers": true,                            /* Disable generating custom helper functions like '__extends' in compiled output. */
    // "noEmitOnError": true,                            /* Disable emitting files if any type checking errors are reported. */
    // "preserveConstEnums": true,                       /* Disable erasing 'const enum' declarations in generated code. */
    // "declarationDir": "./",                           /* Specify the output directory for generated declaration files. */

    /* Interop Constraints */
    "isolatedModules": true,
    // "verbatimModuleSyntax": true,                     /* Do not transform or elide any imports or exports not marked as type-only, ensuring they are written in the output file's format based on the 'module' setting. */
    // "isolatedDeclarations": true,                     /* Require sufficient annotation on exports so other tools can trivially generate declaration files. */
    // "erasableSyntaxOnly": true,                       /* Do not allow runtime constructs that are not part of ECMAScript. */
    // "allowSyntheticDefaultImports": true,             /* Allow 'import x from y' when a module doesn't have a default export. */
    "esModuleInterop": true,                             /* Emit additional JavaScript to ease support for importing CommonJS modules. This enables 'allowSyntheticDefaultImports' for type compatibility. */
    // "preserveSymlinks": true,                         /* Disable resolving symlinks to their realpath. This correlates to the same flag in node. */
    "forceConsistentCasingInFileNames": true,            /* Ensure that casing is correct in imports. */

    /* Type Checking */
    "strict": true,                                      /* Enable all strict type-checking options. */
    "noImplicitAny": true,                               /* Enable error reporting for expressions and declarations with an implied 'any' type. */
    "strictNullChecks": true,                            /* When type checking, take into account 'null' and 'undefined'. */
    // "strictFunctionTypes": true,                      /* When assigning functions, check to ensure parameters and the return values are subtype-compatible. */
    // "strictBindCallApply": true,                      /* Check that the arguments for 'bind', 'call', and 'apply' methods match the original function. */
    // "strictPropertyInitialization": true,             /* Check for class properties that are declared but not set in the constructor. */
    // "strictBuiltinIteratorReturn": true,              /* Built-in iterators are instantiated with a 'TReturn' type of 'undefined' instead of 'any'. */
    // "noImplicitThis": true,                           /* Enable error reporting when 'this' is given the type 'any'. */
    // "useUnknownInCatchVariables": true,               /* Default catch clause variables as 'unknown' instead of 'any'. */
    // "alwaysStrict": true,                             /* Ensure 'use strict' is always emitted. */
    "noUnusedLocals": true,                              /* Enable error reporting when local variables aren't read. */
    "noUnusedParameters": true,                          /* Raise an error when a function parameter isn't read. */
    // "exactOptionalPropertyTypes": true,               /* Interpret optional property types as written, rather than adding 'undefined'. */
    "noImplicitReturns": true,                           /* Enable error reporting for codepaths that do not explicitly return in a function. */
    // "noFallthroughCasesInSwitch": true,               /* Enable error reporting for fallthrough cases in switch statements. */
    // "noUncheckedIndexedAccess": true,                 /* Add 'undefined' to a type when accessed using an index. */
    // "noImplicitOverride": true,                       /* Ensure overriding members in derived classes are marked with an override modifier. */
    // "noPropertyAccessFromIndexSignature": true,       /* Enforces using indexed accessors for keys declared using an indexed type. */
    // "allowUnusedLabels": true,                        /* Disable error reporting for unused labels. */
    // "allowUnreachableCode": true,                     /* Disable error reporting for unreachable code. */

    /* Completeness */
    // "skipDefaultLibCheck": true,                      /* Skip type checking .d.ts files that are included with TypeScript. */
    "skipLibCheck": true                                 /* Skip type checking all .d.ts files. */
  },
  "include": ["src/**/*"]
}
</file>

</files>
